{
    "pipes": [
        {
            "name": "AutoCompleteFilterPipe",
            "id": "pipe-AutoCompleteFilterPipe-0ebbabc406a63e973113b7a23803c48f",
            "file": "projects/common/src/lib/pipes/auto-complete-filter.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<any>"
                        },
                        {
                            "name": "searchTerm",
                            "type": "string"
                        },
                        {
                            "name": "labelKey",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "autoCompleteFilter",
            "sourceCode": "import { Pipe, PipeTransform } from \"@angular/core\";\r\n\r\n@Pipe({\r\n    name: 'autoCompleteFilter'\r\n})\r\nexport class AutoCompleteFilterPipe implements PipeTransform{\r\n    transform(items: Array<any>, searchTerm: string, labelKey?: string) {\r\n        if (!items || !searchTerm) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter(i => i[labelKey || 'label'].toLowerCase().includes(searchTerm.toLowerCase()) === true);\r\n    }\r\n}"
        },
        {
            "name": "EmailMaskPipe",
            "id": "pipe-EmailMaskPipe-69464d4013819ae13ef3648cd19b6c4e",
            "file": "projects/common/src/lib/pipes/email-mask.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "emailMask",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'emailMask',\r\n})\r\nexport class EmailMaskPipe implements PipeTransform {\r\n    transform(value: string): any {\r\n        if (value) {\r\n            const emailParts = value.split('@');\r\n\r\n            if (emailParts.length === 2) {\r\n                const parts = emailParts[0].split('');\r\n                return `${parts[0]}****${parts[parts.length - 1]}@${emailParts[1]}`;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n"
        },
        {
            "name": "MaskPipe",
            "id": "pipe-MaskPipe-3612b0b95423099b78e222096c78ee06",
            "file": "projects/common/src/lib/pipes/mask.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "numberOfLastCharactersToDisplay",
                            "type": "number"
                        },
                        {
                            "name": "email",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numberOfLastCharactersToDisplay",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "mask",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'mask',\r\n})\r\nexport class MaskPipe implements PipeTransform {\r\n    transform(value: string, numberOfLastCharactersToDisplay: number, email: boolean = false): any {\r\n        if (value) {\r\n            if (!email && value.length >= numberOfLastCharactersToDisplay) {\r\n                return `****${value.substr(value.length - numberOfLastCharactersToDisplay)}`;\r\n            } else if (email) {\r\n                return `****${value.substr(value.indexOf('@'))}`;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n}\r\n"
        },
        {
            "name": "TextTransformPipe",
            "id": "pipe-TextTransformPipe-adf80e4ec002dc9fb7a5c088dee10746",
            "file": "projects/common/src/lib/pipes/text-transform.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "textTransform",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'textTransform',\r\n})\r\nexport class TextTransformPipe implements PipeTransform {\r\n    transform(value: string): any {\r\n        if (value) {\r\n            return value.replace(/([A-Z])/g, ' $1').trim();\r\n        }\r\n        return value;\r\n    }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Address",
            "id": "interface-Address-6d7305c4aea56192cab8b0e1d63b633c",
            "file": "projects/common/src/lib/types/address.ts",
            "type": "interface",
            "sourceCode": "export interface Address {\r\n    _id?: string;\r\n    country?: string;\r\n    postcode?: string;\r\n    addressLine1?: string;\r\n    addressLine2?: string;\r\n    addressLine3?: string;\r\n    town?: string;\r\n    state?: string;\r\n    addressType?: string;\r\n    isDefaultAddress?: boolean;\r\n    instructions?: string;\r\n    code?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "addressLine1",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "addressLine2",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "addressLine3",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "addressType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "code",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "country",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "instructions",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isDefaultAddress",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "postcode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "state",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "town",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AvailableSlot",
            "id": "interface-AvailableSlot-c6ecc0c5972ddc0eee705c806d247fb8",
            "file": "projects/common/src/lib/types/available-slot.ts",
            "type": "interface",
            "sourceCode": "import { DeliverySlotType } from '@common/src/public-api';\r\n\r\nexport interface AvailableSlot {\r\n    _id: string;\r\n    deliveryDate: Date;\r\n    startTime: number;\r\n    endTime: number;\r\n    availableSlots: number;\r\n    selected: boolean;\r\n    deliverySlotType: DeliverySlotType;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "availableSlots",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deliveryDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "deliverySlotType",
                    "type": "DeliverySlotType",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "endTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "startTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ChangePasswordModel",
            "id": "interface-ChangePasswordModel-2bf7556135685b779f38a1b0d1151d0a",
            "file": "projects/customer/src/lib/models/change-password.model.ts",
            "type": "interface",
            "sourceCode": "export interface ChangePasswordModel {\r\n    mode: string;\r\n    isoCode: string;\r\n    userName: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isoCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "mode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HistoryItem",
            "id": "interface-HistoryItem-b26ca74c935d9849a85c17ca1065ea08",
            "file": "projects/common/src/lib/types/history-item.ts",
            "type": "interface",
            "sourceCode": "import { KeyValuePair } from \"./key-value-pair\";\r\n\r\nexport interface HistoryItem {\r\n    url: string;\r\n    storeData?: Array<KeyValuePair>;    \r\n}",
            "properties": [
                {
                    "name": "storeData",
                    "type": "Array<KeyValuePair>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IConfiguration",
            "id": "interface-IConfiguration-29060ab7ea0356607cd401c4993228fc",
            "file": "projects/common/src/lib/types/configuration.ts",
            "type": "interface",
            "sourceCode": "export interface IConfiguration {\r\n    apiEndpoint: string;\r\n    currencySymbol: string;\r\n    mode: string;\r\n    resourceEndpoint: string;\r\n    version: string;\r\n    recaptchaSiteKey: string;\r\n    recaptchaSiteUrl: string;\r\n    recaptchaUse: boolean;\r\n    token: {\r\n        aud: string;\r\n        iss: string;\r\n        offset: number;\r\n    };\r\n    country: string;\r\n    language: string;\r\n    localResourcePointEndpoint: string;\r\n    useLocalResourcePointEndpoint: boolean;\r\n    payuBoltScript: string;\r\n    payuBoltLogo: string;\r\n    payuBoltColor: string;\r\n    payuMode: string;\r\n    usePaymentTestData: boolean;\r\n    isDcokerDeployed: boolean;\r\n    nonDockerApiEndpoint: string;\r\n    defaultLanguage: string;\r\n    showReview: boolean;\r\n    selectedLanguage: string;\r\n    loyaltyPoints: boolean;\r\n    productSupport: boolean;\r\n    returnItems: boolean;\r\n    reviewLimit: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "apiEndpoint",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "country",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currencySymbol",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "defaultLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isDcokerDeployed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "language",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "localResourcePointEndpoint",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loyaltyPoints",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "mode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "nonDockerApiEndpoint",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "payuBoltColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "payuBoltLogo",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "payuBoltScript",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "payuMode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "productSupport",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "recaptchaSiteKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "recaptchaSiteUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "recaptchaUse",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "resourceEndpoint",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "returnItems",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "reviewLimit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showReview",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "token",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "useLocalResourcePointEndpoint",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "usePaymentTestData",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "version",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDeliveryOptions",
            "id": "interface-IDeliveryOptions-453a9da4379c59314824787d54018d4f",
            "file": "projects/common/src/lib/types/delivery-options.ts",
            "type": "interface",
            "sourceCode": "export interface IDeliveryOptions {\r\n    freeDeliveryMinOrderValue: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "freeDeliveryMinOrderValue",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IInputValue",
            "id": "interface-IInputValue-02c6923ab4faeca4b8aec3f9204e152d",
            "file": "projects/common/src/lib/types/IInputValue.ts",
            "type": "interface",
            "sourceCode": "export interface IInputValue {\r\n    name: string;\r\n    value: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILogin",
            "id": "interface-ILogin-b6c15344202c2fa91491221193be5c08",
            "file": "projects/login/src/lib/models/ILogin.ts",
            "type": "interface",
            "sourceCode": "export interface ILogin {\r\n    userName: string;\r\n    password: string;\r\n    mode: string;\r\n    isoCode: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "isoCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "mode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILookup",
            "id": "interface-ILookup-745165b567b5a525c5da83528bf3948f",
            "file": "projects/common/src/lib/types/ILookup.ts",
            "type": "interface",
            "sourceCode": "export interface ILookup {\r\n    id: string;\r\n    value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "INewCustomer",
            "id": "interface-INewCustomer-df61f74f4006090dde11380df14d176b",
            "file": "projects/customer/src/lib/models/INewCustomer.ts",
            "type": "interface",
            "sourceCode": "export interface INewCustomer {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    isoCode: string;\r\n    mobile: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isoCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "mobile",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "KeyValuePair",
            "id": "interface-KeyValuePair-ab9365e1064afcae042d8c069be10a91",
            "file": "projects/common/src/lib/types/key-value-pair.ts",
            "type": "interface",
            "sourceCode": "export interface KeyValuePair {\r\n    Key: string;\r\n    Value: string | Array<string> | boolean | number;\r\n}",
            "properties": [
                {
                    "name": "Key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "Value",
                    "type": "string | Array<string> | boolean | number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LikeDislikeVote",
            "id": "interface-LikeDislikeVote-0306f1b7e483ada8401c425aa44a65ab",
            "file": "projects/common/src/lib/types/like-dislike.ts",
            "type": "interface",
            "sourceCode": "export interface LikeDislikeVote {\r\n    likeVote: number;\r\n    dislikeVote: number;\r\n}",
            "properties": [
                {
                    "name": "dislikeVote",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "likeVote",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Order",
            "id": "interface-Order-1280cb1c175530c7a245a0bafd028041",
            "file": "projects/common/src/lib/types/order.ts",
            "type": "interface",
            "sourceCode": "import { OrderItem } from \"./order-item\";\r\nimport { OrderPaymentStatus } from \"./order-payment-status\";\r\nimport { OrderStatus } from \"./order-status\";\r\n\r\nexport interface Order {\r\n    _id: string;\r\n    addressID: string;\r\n    userID: string;\r\n    statusHistory: Array<{ status: OrderStatus, statusDate: Date}>;\r\n    status: OrderStatus;\r\n    invoice: string;\r\n    dateCreated: Date;\r\n    amount: number;\r\n    orderNumber: string;\r\n    items: Array<OrderItem>;\r\n    orderPaymentStatus: OrderPaymentStatus;\r\n    slotId: string;\r\n    modifiedDate: string;\r\n}",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "addressID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dateCreated",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "invoice",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "items",
                    "type": "Array<OrderItem>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modifiedDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "orderPaymentStatus",
                    "type": "OrderPaymentStatus",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "slotId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "status",
                    "type": "OrderStatus",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "statusHistory",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "userID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "OrderItem",
            "id": "interface-OrderItem-e9a1fd1a938b62c8e6c2b162971b5b8c",
            "file": "projects/common/src/lib/types/order-item.ts",
            "type": "interface",
            "sourceCode": "import { ShoppingCartItem } from \"./shopping-cart-item\";\r\n\r\nexport interface OrderItem extends ShoppingCartItem {\r\n    returned?: boolean;\r\n    returnedQuantity?: number;\r\n    discountAmount?: number;\r\n}",
            "properties": [
                {
                    "name": "discountAmount",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "returned",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "returnedQuantity",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ShoppingCartItem"
        },
        {
            "name": "PaymentCompleteResponse",
            "id": "interface-PaymentCompleteResponse-34626283742198614431403398775d80",
            "file": "projects/checkout/src/lib/types/payment-complete-response.ts",
            "type": "interface",
            "sourceCode": "export interface PaymentCompleteResponse {\r\n    status: string;\r\n    message: string;\r\n    paymentTransactionID?: string;\r\n    orderID?: string;\r\n    bankReferenceNumber?: string;\r\n    orderNumber?: string;\r\n}",
            "properties": [
                {
                    "name": "bankReferenceNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "orderID",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "orderNumber",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "paymentTransactionID",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Position",
            "id": "interface-Position-f03103a19da51a515f4254cf0115c2ec",
            "file": "projects/common/src/lib/services/infinite-scroll.service.ts",
            "type": "interface",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, map, pairwise } from 'rxjs/operators';\r\nimport { WINDOW } from './window.service';\r\n\r\ninterface Position {\r\n    scrollHeight: number,\r\n    scrollTop:    number,\r\n    clientHeight: number\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class InfiniteScrollService {\r\n    private _scrollPercent: number = 80;\r\n    private scrollSubject: Subject<any> = new Subject();\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any,\r\n        @Inject(WINDOW) private window: Window\r\n    ) {\r\n        this.window.addEventListener('scroll', this.onScroll, true);\r\n    }\r\n\r\n    private onScroll = (event: UIEvent): void => this.scrollSubject.next(event.target);\r\n\r\n    private isUserScrollingDown = (positions: Array<Position>) => positions[0].scrollTop < positions[1].scrollTop;\r\n\r\n    private isScrollExpectedPercent = (position:Position, percent:number) => {\r\n        return (position.scrollTop / position.scrollHeight) > (percent/100);\r\n    }\r\n     \r\n    public get onScrolledDown(): Observable<[Position, Position]> {\r\n        return this.scrollSubject\r\n            .asObservable()\r\n            .pipe(\r\n                map(() => {\r\n                    return <Position>{\r\n                        scrollHeight: this.document.documentElement.scrollHeight,\r\n                        scrollTop: this.document.documentElement.scrollTop || this.document.body.scrollTop,\r\n                        clientHeight: this.document.documentElement.clientHeight\r\n                    }\r\n                })\r\n            ).pipe(pairwise())\r\n            .pipe(filter(positions => {\r\n                const scrollingDown = this.isUserScrollingDown(positions);\r\n                const expectedPercent = this.isScrollExpectedPercent(positions[1], this._scrollPercent);\r\n                return scrollingDown && expectedPercent; \r\n            }));\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "clientHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "scrollHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "scrollTop",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Pricing",
            "id": "interface-Pricing-fe5cd5b3ab7629c3941d03c661ae413c",
            "file": "projects/common/src/lib/types/pricing.ts",
            "type": "interface",
            "sourceCode": "export interface Pricing {\r\n    list: number;\r\n    retail: number;\r\n    savings: number;\r\n    discountPercent: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "discountPercent",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "list",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "retail",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "savings",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-e41b8429a098acf45675b6d1ba61c1f7",
            "file": "projects/common/src/lib/types/product.ts",
            "type": "interface",
            "sourceCode": "import { Shipping } from '../types/shipping';\r\nimport { Pricing } from '../types/pricing';\r\nimport { ProductDetail } from '../types/product-detail';\r\nimport { ReviewSummary } from './review-summary';\r\n\r\nexport interface Product {\r\n    _id: any;\r\n    lob: string;\r\n    type: string;\r\n    brand: string;\r\n    shipping: Shipping;\r\n    description: string;\r\n    pricing: Pricing;\r\n    images: Array<{ size: number, src: string }>;\r\n    bestSeller: boolean;\r\n    country: string;\r\n    payOnDelivery: boolean;\r\n    details: Array<ProductDetail>;\r\n    subType: string;\r\n    reviewSummary: ReviewSummary;    \r\n    returnableDate?: Date;\r\n    hasProductSupport?: boolean;\r\n    features: Array<string>;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "bestSeller",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "brand",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "country",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "details",
                    "type": "Array<ProductDetail>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "features",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hasProductSupport",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "images",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lob",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "payOnDelivery",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pricing",
                    "type": "Pricing",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "returnableDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "reviewSummary",
                    "type": "ReviewSummary",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "shipping",
                    "type": "Shipping",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "subType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductDetail",
            "id": "interface-ProductDetail-ec8daba4eda81bf01324267e6e08d141",
            "file": "projects/common/src/lib/types/product-detail.ts",
            "type": "interface",
            "sourceCode": "export interface ProductDetail {\r\n    title: string;\r\n    value: string;\r\n    filter: boolean;\r\n    subType: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "filter",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "subType",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProfileChange",
            "id": "interface-ProfileChange-efd4bc09a628c6afe2d4db0b9730031d",
            "file": "projects/customer/src/lib/components/account/profile/models/profile-change.model.ts",
            "type": "interface",
            "sourceCode": "import { ProfileChangeProperty } from \"../../../../../../../typings/custom\";\r\n\r\nexport interface ProfileChange {\r\n    otp?: string;\r\n    email?: string;\r\n    mobile?: number;\r\n    isoCode?: string;\r\n    type?: ProfileChangeProperty\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isoCode",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mobile",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "otp",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "type": "ProfileChangeProperty",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Quantity",
            "id": "interface-Quantity-fe9344e7d86adaf1303be723f427a827",
            "file": "projects/content/src/lib/components/list/child-components/item-container/item-container.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewChild, ElementRef, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, ConfigService, NavigationService, ProductDetail, Product, WINDOW } from '@common/src/public-api';\r\n\r\nexport interface Quantity {\r\n    value: number;\r\n    viewValue: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-item-container-component',\r\n    templateUrl: './item-container.component.html',\r\n    styleUrls: ['./item-container.component.scss'],\r\n})\r\nexport class ItemContainerComponent extends BaseComponent {\r\n    @Input() metadata: any;\r\n    @Input() item: Product;\r\n    @Input() query: any;\r\n\r\n    @ViewChild('itemContainer') itemContainer: ElementRef;\r\n    itemQty = 1;\r\n    showItemQtyTextControl = false;\r\n    showReviewSummary = false;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        private navigationService: NavigationService,\r\n        private configService: ConfigService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public async onItemClick(): Promise<void> {\r\n        let query = atob(this.query);\r\n        query = query.includes('lob') ? query : JSON.stringify({ lob: this.item.lob.toLowerCase() })\r\n        await this.navigationService.navigateForListItem(query, this.currentPage, this.item._id);\r\n    }\r\n\r\n    get imageUrl(): string {\r\n        if (this.item && Array.isArray(this.item.images)){\r\n            const image = this.item.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public getSizePack(details: Array<ProductDetail>): string {\r\n        const sizePack = details.find(d => d.title.toLowerCase() === 'sizepack');\r\n        return sizePack?.value ?? '';\r\n    }\r\n\r\n    public isSpeciality(title: string): boolean {\r\n        return title.toLowerCase() === 'speciality';\r\n    }\r\n\r\n    public getBrand(): string {\r\n        if (this.item.description.toLowerCase().includes(this.item.brand.toLowerCase())){\r\n            return '';\r\n        } else {\r\n            return `${this.item.brand} `;\r\n        }\r\n    }\r\n\r\n    public get showReviews(): boolean {\r\n        return this.configService.getConfiguration().showReview;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "viewValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Review",
            "id": "interface-Review-ec13b1277142f66443c13095f4f44b29",
            "file": "projects/common/src/lib/types/review.ts",
            "type": "interface",
            "sourceCode": "import { ProductRating } from \"./product-rating\";\r\n\r\nexport interface Review {\r\n    _id: any;\r\n    productID: string;\r\n    rating: ProductRating;\r\n    headline: string;\r\n    review: string;\r\n    createdDate: number;\r\n    createdBy: string;\r\n    modifiedDate: number;\r\n    modifiedBy: string;\r\n    processed: boolean;\r\n    orderID: string;\r\n    featuresRating?: Array<{ feature: string, rating: ProductRating }>,\r\n    urls?: Array<{ type: 'image'|'video', src: string }>;\r\n    user?: string\r\n    votes?: { likeVote: number, dislikeVote: number };\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "featuresRating",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "headline",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modifiedBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modifiedDate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "orderID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "processed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "productID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rating",
                    "type": "ProductRating",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "review",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "urls",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "votes",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ReviewSummary",
            "id": "interface-ReviewSummary-d45bd989f287db2e23c5fbebddb097aa",
            "file": "projects/common/src/lib/types/review-summary.ts",
            "type": "interface",
            "sourceCode": "import { ProductRating } from \"./product-rating\";\r\n\r\nexport interface ReviewSummary {\r\n    productID?: string;\r\n    totalRatings?: number;\r\n    averageRating?: number;\r\n    ratingSummary?: Array<{ productRating: ProductRating, value: number }>;    \r\n    featuresRating?: Array<{ feature: string, value: number }>;\r\n}",
            "properties": [
                {
                    "name": "averageRating",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "featuresRating",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "productID",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ratingSummary",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalRatings",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchMap",
            "id": "interface-SearchMap-65bec2f31a899694e4e3ccdd445766a3",
            "file": "projects/common/src/lib/types/search-map.ts",
            "type": "interface",
            "sourceCode": "import { KeyValuePair } from './key-value-pair';\r\n\r\nexport interface SearchMap {\r\n    lob?: string;\r\n    types?: Array<string>;\r\n    subTypes?: Array<string>;\r\n    brands?: Array<string>;\r\n    description?: string;\r\n    filters?: Array<KeyValuePair>;\r\n    searchString?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "brands",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "filters",
                    "type": "Array<KeyValuePair>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lob",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "searchString",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subTypes",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "types",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Shipping",
            "id": "interface-Shipping-34eac3f8ef753d91cc826d84ba130e6d",
            "file": "projects/common/src/lib/types/shipping.ts",
            "type": "interface",
            "sourceCode": "export interface Shipping {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "ShoppingCart",
            "id": "interface-ShoppingCart-178ae303535d36a32cadd1a0954e6141",
            "file": "projects/common/src/lib/types/shopping-cart.ts",
            "type": "interface",
            "sourceCode": "import { ShoppingCartItem } from './shopping-cart-item';\r\n\r\nexport interface ShoppingCart {\r\n    _id: string;\r\n    sessionID?: string;\r\n    userID?: string;\r\n    items: Array<ShoppingCartItem>;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "items",
                    "type": "Array<ShoppingCartItem>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sessionID",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userID",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingCartItem",
            "id": "interface-ShoppingCartItem-0024899d4309066a744fefcdaa420074",
            "file": "projects/common/src/lib/types/shopping-cart-item.ts",
            "type": "interface",
            "sourceCode": "import { Product } from './product';\r\n\r\nexport interface ShoppingCartItem extends Product {\r\n    quantity: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "quantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Product"
        },
        {
            "name": "ShoppingCartItemGroup",
            "id": "interface-ShoppingCartItemGroup-4a2af375c10845c6b7a79ce91da10d0c",
            "file": "projects/common/src/lib/types/shopping-cart-item-group.ts",
            "type": "interface",
            "sourceCode": "import { ShoppingCartItem } from './shopping-cart-item';\r\n\r\nexport interface ShoppingCartItemGroup {\r\n    key: string;\r\n    items: Array<ShoppingCartItem>;\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "type": "Array<ShoppingCartItem>",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TabDay",
            "id": "interface-TabDay-909e7722501064e5add7b4653a4dec8e",
            "file": "projects/checkout/src/lib/types/tab-day.ts",
            "type": "interface",
            "sourceCode": "import { AvailableSlot } from '@common/src/public-api';\r\n\r\nexport interface TabDay {\r\n    day: string;\r\n    weekday: string;\r\n    selected: boolean;\r\n    slots: Array<AvailableSlot>;\r\n    date: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "day",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "slots",
                    "type": "Array<AvailableSlot>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "weekday",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TabItem",
            "id": "interface-TabItem-be6e494071a3bad654b6f914c393462d",
            "file": "projects/checkout/src/lib/types/tab-item.ts",
            "type": "interface",
            "sourceCode": "import { TabDay } from './tab-day';\r\n\r\nexport interface TabItem {\r\n    label: string;\r\n    start: number;\r\n    end: number;\r\n    selected: boolean;\r\n    days?: Array<TabDay>;\r\n}\r\n",
            "properties": [
                {
                    "name": "days",
                    "type": "Array<TabDay>",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "end",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "start",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TabItemClickEvent",
            "id": "interface-TabItemClickEvent-1e2e93a8b1da33426351df20a059b19b",
            "file": "projects/checkout/src/lib/types/tab-item-click-event.ts",
            "type": "interface",
            "sourceCode": "export interface TabItemClickEvent {\r\n    selectedDate: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "selectedDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-23a5a97b6d69c2771f4c732d73d4919d",
            "file": "projects/common/src/lib/types/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n    emailId?: string;\r\n    roles?: Array<string>;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    country?: string;\r\n    authenticated: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "authenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "country",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "emailId",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "roles",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "VideoResult",
            "id": "interface-VideoResult-6346f9871594150b4909eff1b778e6b0",
            "file": "projects/common/src/lib/types/video-result.ts",
            "type": "interface",
            "sourceCode": "export interface VideoResult {\r\n    name?: string;\r\n    dataURL?: string;\r\n    error?: any;\r\n    type: string;\r\n    file: File;\r\n}\r\n",
            "properties": [
                {
                    "name": "dataURL",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "error",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "file",
                    "type": "File",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountService",
            "id": "injectable-AccountService-54d672ba594e29a79c8a293f6f667e5d",
            "file": "projects/common/src/lib/services/account.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "addTohistory",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addTohistory",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { RouteKeys } from \"../constants/route.keys\";\r\nimport { NavigationService } from \"./navigation.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n    constructor(\r\n        private navigationService: NavigationService\r\n    ) {\r\n    }\r\n\r\n    public async navigate(key: string, addTohistory: boolean = false): Promise<void> {\r\n        let routeKey: string = key ?? 'AccountHome';\r\n       \r\n        this.navigationService.resetMenuState();\r\n\r\n        await this.navigationService.clear();        \r\n        await this.navigationService.navigateForUrl(RouteKeys[routeKey], RouteKeys.AccountHome, addTohistory);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AddressService",
            "id": "injectable-AddressService-a54c27ea55753f1b1d7cc97198069ca5",
            "file": "projects/common/src/lib/services/address.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getForUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "address",
                            "type": "Address"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "Address",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { delay } from 'rxjs/operators';\r\n\r\nimport { HttpService } from './http.service';\r\nimport { ConfigService } from './config.service';\r\nimport { Address } from '../types/address';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AddressService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async getForUser(): Promise<any> {\r\n        return await this.executeGet(`address_getforuser`, `${this.baseUrl}/address/user`).toPromise();\r\n    }\r\n\r\n    public async save(address: Address): Promise<any> {\r\n        return await this.executePost('checkout_save_new_address', `${this.baseUrl}/address/save`, {\r\n            address,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async delete(id: string): Promise<any> {\r\n        let d = await this.httpClient.delete(`${this.baseUrl}/address/${id}`).pipe(delay(this.delayTime)).toPromise();\r\n        return d;\r\n    }\r\n\r\n    public async getById(id: string): Promise<any> {\r\n        return await this.executeGet(`address_getbyid`, `${this.baseUrl}/address/user/${id}`).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "AdminService",
            "id": "injectable-AdminService-9c018c9230a754fc79523dd683aa567d",
            "file": "projects/admin/src/lib/services/admin.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService, HttpService } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AdminService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public generate(): Promise<any> {\r\n        const key = `delivery_slot_generation`;\r\n        return this.executePost(key, `${this.baseUrl}/delivery/slots/generate`, {}).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-94348b13f9aa4964ddd88c142cf05f01",
            "file": "projects/common/src/lib/services/auth.service.ts",
            "properties": [
                {
                    "name": "_configuration",
                    "type": "IConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_expires",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_refresh",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "afterLoginOrRefreshOrVerification",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "clearToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "mode",
                            "type": "string"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "setRefreshTokenTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTokenData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 141,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "validateTokenValues",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "verify",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        112,
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { delay, first } from 'rxjs/operators';\r\n\r\nimport { User } from '../types/user';\r\nimport { DataStoreService } from './data-store.service';\r\nimport { TokenService } from './token.service';\r\nimport { AuthState } from './auth.state';\r\nimport { ConfigService } from './config.service';\r\nimport { IConfiguration } from '../types/configuration';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n    private _user: User;\r\n    private _token: string;\r\n    private _refresh: string;\r\n    private _expires: any;\r\n    private _configuration: IConfiguration;\r\n\r\n    public get user(): User {\r\n        return this._user;\r\n    }\r\n\r\n    constructor(\r\n        private dataStoreService: DataStoreService,\r\n        private tokenService: TokenService,\r\n        private configService: ConfigService\r\n    ) {}\r\n\r\n    public async login(mode: string, isoCode: string, username: string, password: string): Promise<void> {\r\n        const userToken = await this.tokenService.signin(mode, isoCode, username, password);\r\n\r\n        if (userToken && userToken.token && userToken.refresh) {\r\n            this._token = userToken.token;\r\n            this._refresh = userToken.refresh;\r\n\r\n            await this.setToken(userToken);\r\n\r\n            await this.afterLoginOrRefreshOrVerification();\r\n        }\r\n    }\r\n\r\n    public async logout(): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        await this.tokenService.revoke();\r\n        this.clearToken();\r\n    }\r\n\r\n    public async initialize(): Promise<void> {\r\n        this._configuration = this.configService.getConfiguration();\r\n        this._user = { roles: [], authenticated: false };\r\n\r\n        const userToken: any = await this.dataStoreService.get('user-token', false);\r\n        if (userToken && userToken.token && userToken.refresh) {\r\n            this._token = userToken.token;\r\n            this._refresh = userToken.refresh;\r\n\r\n            if (await this.verify()) {\r\n                await this.afterLoginOrRefreshOrVerification();\r\n            }\r\n        }\r\n    }\r\n\r\n    private async clearToken(): Promise<void> {\r\n        this._token = null;\r\n        this._refresh = null;\r\n        this._expires = null;\r\n        this._user = { roles: [], authenticated: false };\r\n\r\n        return await this.dataStoreService.push('user-token', null, false);\r\n    }\r\n\r\n    private async setToken(token: string): Promise<void> {\r\n        return await this.dataStoreService.push('user-token', token, false);\r\n    }\r\n\r\n    private async afterLoginOrRefreshOrVerification(): Promise<void> {\r\n        try {\r\n            await this.validateTokenValues();\r\n            await this.setTokenData();\r\n            await this.setRefreshTokenTimer();\r\n        } catch {\r\n            this.clearToken();\r\n        }\r\n    }\r\n\r\n    private async verify(): Promise<boolean> {\r\n        let valid = true;\r\n        try {\r\n            await this.tokenService.xsrf();\r\n            await this.tokenService.verify(this._token);\r\n        } catch {\r\n            try {\r\n                await this.refreshToken();\r\n            } catch {\r\n                valid = false;\r\n            }\r\n        }\r\n        if (!valid) {\r\n            await this.clearToken();\r\n        }\r\n        return valid;\r\n    }\r\n\r\n    public async refreshToken(): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        const token = await this.tokenService.refresh();\r\n\r\n        if (token && token.token && token.refresh) {\r\n            this._refresh = token.refresh;\r\n            this._token = token.token;\r\n\r\n            await this.setToken(token);\r\n        }\r\n    }\r\n\r\n    private async validateTokenValues(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                const tokenInfo = JSON.parse(atob(this._token.split('.')[1]));\r\n                if (\r\n                    tokenInfo.aud.includes(this._configuration.token.aud) &&\r\n                    tokenInfo.iss.includes(this._configuration.token.iss)\r\n                ) {\r\n                    const now = Date.now();\r\n                    if (Date.now() >= Number(tokenInfo.exp) * 1000) {\r\n                        reject();\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                reject();\r\n            } catch {\r\n                reject();\r\n            }\r\n        });\r\n    }\r\n\r\n    private async setTokenData(): Promise<void> {\r\n        const tokenInfo = JSON.parse(atob(this._token.split('.')[1]));\r\n\r\n        this._user = {\r\n            authenticated: true,\r\n            country: tokenInfo.country,\r\n            emailId: tokenInfo.emailId,\r\n            roles: tokenInfo.roles,\r\n            firstName: tokenInfo.firstName,\r\n            lastName: tokenInfo.lastName,\r\n        };\r\n\r\n        this._expires = Number(tokenInfo.exp);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private async setRefreshTokenTimer(): Promise<void> {\r\n        let value = (Number(this._expires) - Number(this._configuration.token.offset)) * 1000;\r\n        from([0])\r\n            .pipe(delay(new Date(value)), first())\r\n            .subscribe(async (_) => {\r\n                AuthState.Refreshing = true;\r\n                await this.refreshToken();\r\n                await this.afterLoginOrRefreshOrVerification();\r\n            });\r\n        AuthState.Refreshing = false;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "user": {
                    "name": "user",
                    "getSignature": {
                        "name": "user",
                        "type": "",
                        "returnType": "User",
                        "line": 22
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "AuthState",
            "id": "injectable-AuthState-6d734124b1fba1cd0a0b257e46a8e806",
            "file": "projects/common/src/lib/services/auth.state.ts",
            "properties": [
                {
                    "name": "_refreshing",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        115
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthState {\r\n    private static _refreshing: boolean = false;\r\n\r\n    public static get Refreshing(): boolean {\r\n        return AuthState._refreshing;\r\n    }\r\n\r\n    public static set Refreshing(value: boolean) {\r\n        AuthState._refreshing = value;\r\n    }\r\n}\r\n",
            "accessors": {
                "Refreshing": {
                    "name": "Refreshing",
                    "setSignature": {
                        "name": "Refreshing",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "Refreshing",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 9
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BrowserWindowRef",
            "id": "injectable-BrowserWindowRef-07008a4b6f531106636863a47de02806",
            "file": "projects/common/src/lib/services/window.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID, Injectable } from '@angular/core';\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n    get nativeWindow(): Window | Object {\r\n        throw new Error('Not implemented.');\r\n    }\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\n@Injectable()\r\nexport class BrowserWindowRef extends WindowRef {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get nativeWindow(): Window | Object {\r\n        return window;\r\n    }\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\r\n    if (isPlatformBrowser(platformId)) {\r\n        return browserWindowRef.nativeWindow;\r\n    }\r\n    return new Object();\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n    provide: WindowRef,\r\n    useClass: BrowserWindowRef,\r\n};\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n    provide: WINDOW,\r\n    useFactory: windowFactory,\r\n    deps: [WindowRef, PLATFORM_ID],\r\n};\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "accessors": {
                "nativeWindow": {
                    "name": "nativeWindow",
                    "getSignature": {
                        "name": "nativeWindow",
                        "type": "",
                        "returnType": "Window | Object",
                        "line": 21
                    }
                }
            },
            "extends": "WindowRef",
            "type": "injectable"
        },
        {
            "name": "CheckoutStateService",
            "id": "injectable-CheckoutStateService-5cdb61b7ed74cbcc76ee6db133a54472",
            "file": "projects/checkout/src/lib/services/checkout-state.service.ts",
            "properties": [
                {
                    "name": "_addresses",
                    "defaultValue": "[]",
                    "type": "Array<Address>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_selectedAddressIndex",
                    "defaultValue": "-1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_selectedSlot",
                    "type": "AvailableSlot",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_shoppingCart",
                    "type": "ShoppingCart",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "addressStateChange",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedDeliveryOption",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAddress",
                    "args": [
                        {
                            "name": "address",
                            "type": "Address"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "Address",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearShoppingCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "clearState",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "removeAddress",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveState",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setSelectedAddress",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setSelectedAddressIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Address, AvailableSlot, ShoppingCartStateService, ShoppingCart, DataStoreService } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CheckoutStateService {\r\n    private _addresses: Array<Address> = [];\r\n    private _selectedAddressIndex: number = -1;\r\n    private _selectedSlot: AvailableSlot;\r\n    private _shoppingCart: ShoppingCart;\r\n\r\n    public selectedDeliveryOption: string;\r\n    public addressStateChange: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n    constructor (\r\n        private shoppingCartStateService: ShoppingCartStateService,\r\n        private dataStoreService: DataStoreService\r\n    ) {\r\n    }\r\n\r\n    get addresses(): Array<Address> {\r\n        return this._addresses;\r\n    }\r\n\r\n    get hasAddresses(): boolean {\r\n        return this._addresses && this._addresses.length > 0;\r\n    }\r\n\r\n    get selectedAddress(): Address {\r\n        return this._selectedAddressIndex !== -1 ? this._addresses[this._selectedAddressIndex] : null;\r\n    }\r\n\r\n    get currentOrderValue(): number {\r\n        return 0;\r\n    }\r\n\r\n    get items(): Array<{title: string, quantity: number, totalPrice: string, price: string, country: string, imageSrc: string}> {\r\n        const shoppingCart = this._shoppingCart;\r\n\r\n        if (shoppingCart && shoppingCart.items) {\r\n            return shoppingCart.items.map(item => {\r\n                let src = '';\r\n                const image = item.images.find(i => Number(i.size) === 150);\r\n                if (image) {\r\n                    src = image.src;\r\n                }\r\n\r\n                return { \r\n                    title: item.description,\r\n                    quantity: item.quantity,\r\n                    totalPrice: (item.quantity * item.pricing.retail).toFixed(2),\r\n                    price: item.pricing.retail.toFixed(2),\r\n                    country: item.country,\r\n                    imageSrc: src\r\n                };\r\n            });\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get selectedSlot(): AvailableSlot {\r\n        return this._selectedSlot;\r\n    }\r\n\r\n    set selectedSlot(slot: AvailableSlot) {\r\n        this._selectedSlot = slot;\r\n    }\r\n\r\n    async setSelectedAddress(): Promise<void> {\r\n        const defaultAddressIndex = this._addresses.findIndex((a) => a.isDefaultAddress === true);\r\n        this._selectedAddressIndex = defaultAddressIndex === -1 ? 0 : defaultAddressIndex;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async saveState(): Promise<void> {\r\n        await this.dataStoreService.push('checkout-state', { \r\n            addresses: this._addresses,\r\n            selectedAddressIndex: this._selectedAddressIndex,\r\n            selectedSlot: this._selectedSlot,\r\n            shoppingCart: this.shoppingCartStateService.shoppingCart\r\n        });\r\n    }\r\n\r\n    async clearState(): Promise<void> {\r\n        await this.dataStoreService.push('checkout-state', null);\r\n    }\r\n\r\n    async setState(): Promise<void> {\r\n        const state = await this.dataStoreService.get('checkout-state');\r\n\r\n        if (state) {\r\n            this._addresses = state.addresses;\r\n            this._selectedAddressIndex = state.selectedAddressIndex;\r\n            this._selectedSlot = state.selectedSlot;\r\n            this._shoppingCart = state.shoppingCart;\r\n        }\r\n    }\r\n\r\n    setSelectedAddressIndex(index: number): void {\r\n        this._selectedAddressIndex = index;\r\n    }\r\n\r\n    removeAddress(id: string): void {\r\n        const index = this._addresses.findIndex((a) => a._id === id);\r\n\r\n        this._addresses.splice(index, 1);\r\n    }\r\n\r\n    addAddress(address: Address): number {\r\n        let index: number = -1;\r\n\r\n        if (!!address._id) {\r\n            index = this._addresses.findIndex((a) => a._id === address._id);\r\n        }\r\n\r\n        if (index === -1) {\r\n            if (address.isDefaultAddress === true) {\r\n                this._addresses.splice(0, 0, address);\r\n                index = 0;\r\n            } else {\r\n                this._addresses.push(address);\r\n                index = this._addresses.length - 1;\r\n            }\r\n        }\r\n\r\n        if (this._addresses.length === 1) {\r\n            this._addresses[0].isDefaultAddress = true;\r\n        } else if (address.isDefaultAddress === true) {\r\n            this._addresses.forEach((a, i) => {\r\n                if (i !== 0) {\r\n                    a.isDefaultAddress = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    clearShoppingCart(): void {\r\n        this.shoppingCartStateService.reset();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "shoppingCartStateService",
                        "type": "ShoppingCartStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "shoppingCartStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "addresses": {
                    "name": "addresses",
                    "getSignature": {
                        "name": "addresses",
                        "type": "",
                        "returnType": "Array<Address>",
                        "line": 23
                    }
                },
                "hasAddresses": {
                    "name": "hasAddresses",
                    "getSignature": {
                        "name": "hasAddresses",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 27
                    }
                },
                "selectedAddress": {
                    "name": "selectedAddress",
                    "getSignature": {
                        "name": "selectedAddress",
                        "type": "",
                        "returnType": "Address",
                        "line": 31
                    }
                },
                "currentOrderValue": {
                    "name": "currentOrderValue",
                    "getSignature": {
                        "name": "currentOrderValue",
                        "type": "number",
                        "returnType": "number",
                        "line": 35
                    }
                },
                "items": {
                    "name": "items",
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "Array<literal type>",
                        "line": 39
                    }
                },
                "selectedSlot": {
                    "name": "selectedSlot",
                    "setSignature": {
                        "name": "selectedSlot",
                        "type": "void",
                        "args": [
                            {
                                "name": "slot",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "slot",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedSlot",
                        "type": "",
                        "returnType": "AvailableSlot",
                        "line": 64
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-dcd5f8079ec1cc6895c3e637be4ad8eb",
            "file": "projects/common/src/lib/services/config.service.ts",
            "properties": [
                {
                    "name": "config",
                    "type": "IConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getConfiguration",
                    "args": [],
                    "optional": false,
                    "returnType": "IConfiguration",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { IConfiguration } from '../types/configuration';\r\nimport { first, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    private config: IConfiguration;\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    public async load(url: string): Promise<any> {\r\n        const cacheBustDate = new Date();\r\n        url += '?' + cacheBustDate.getUTCMilliseconds();\r\n\r\n        return new Promise<void>((resolve) => {\r\n            this.http\r\n                .get(url)\r\n                .pipe(\r\n                    switchMap((config: any) => {\r\n                        this.config = config as any;\r\n                        return this.http.get(`${(this.config.isDcokerDeployed ? this.config.apiEndpoint : this.config.nonDockerApiEndpoint)}/session/user/get`);\r\n                    }),\r\n                    first()\r\n                )\r\n                .subscribe((_) => resolve());\r\n        });\r\n    }\r\n\r\n    public getConfiguration(): IConfiguration {\r\n        return this.config;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CookieService",
            "id": "injectable-CookieService-197a4878b58b3eb3ca0b359f89fb15bd",
            "file": "projects/common/src/lib/services/cookie.service.ts",
            "properties": [
                {
                    "name": "documentIsAccessible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "domain",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "optional": true
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "domain",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sameSite",
                            "type": "\"Lax\" | \"None\" | \"Strict\"",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secure",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exists",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCookieRegExp",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "RegExp",
                    "typeParameters": [],
                    "line": 100,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "safeDecodeCookie",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CookieService {\r\n    private readonly documentIsAccessible: boolean;\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any,\r\n        @Inject(PLATFORM_ID) platformId: any\r\n    ) {\r\n        this.documentIsAccessible = isPlatformBrowser(platformId);\r\n    }\r\n\r\n    public exists(name: string): boolean {\r\n        if (!this.documentIsAccessible) {\r\n            return false;\r\n        }\r\n\r\n        name = encodeURIComponent(name);\r\n        const regExp: RegExp = this.getCookieRegExp(name);\r\n\r\n        return regExp.test(this.document.cookie);\r\n    }\r\n\r\n    public get(name: string): string {\r\n        if (this.exists(name)) {\r\n            name = encodeURIComponent(name);\r\n\r\n            const regExp: RegExp = this.getCookieRegExp(name);\r\n            const result: RegExpExecArray = regExp.exec(this.document.cookie);\r\n\r\n            if (result && result.length > 0) {\r\n                return this.safeDecodeCookie(result[1]);\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    public set(\r\n        name: string,\r\n        value: string,\r\n        options?: {\r\n            expires?: number | Date,\r\n            path?: string,\r\n            domain?: string,\r\n            secure?: boolean,\r\n            sameSite?: 'Lax' | 'None' | 'Strict'\r\n        }\r\n    ): void {\r\n        if (!this.documentIsAccessible) {\r\n            return;\r\n        }\r\n        const func = (key: string, value: string | boolean): string => {\r\n            if (value) {\r\n                return `${key}=${value.toString()};`\r\n            }\r\n\r\n            return '';\r\n        }\r\n\r\n        let cookieString: string = `${encodeURIComponent(name)}=${encodeURIComponent(value)};`;\r\n        options = options || {};\r\n\r\n        if (options.expires) {\r\n            if (typeof options.expires === 'number') {\r\n                const expires: Date = new Date(Date.now() + options.expires * 1000 * 60 * 60 * 24);\r\n                cookieString += func('expires', expires.toUTCString());\r\n            } else {\r\n                cookieString += func('expires', options.expires.toUTCString());\r\n            }\r\n        }\r\n\r\n        if (options.secure === false && options.sameSite === 'None') {\r\n            options.secure = true;\r\n        }\r\n\r\n        cookieString += `${func('path', options.path)}${func('domain', options.domain)}${(options.secure ? 'secure;' : '')}${func('sameSite', (options.sameSite || 'Lax'))}`;\r\n\r\n        this.document.cookie = cookieString;\r\n    }\r\n\r\n    public delete(\r\n        name: string,\r\n        path?: string,\r\n        domain?: string,\r\n        sameSite?: 'Lax' | 'None' | 'Strict',\r\n        secure?: boolean\r\n    ): void {\r\n        if (!this.documentIsAccessible || !this.exists(name)) {\r\n            return;\r\n        }\r\n\r\n        this.set(name, '', { expires: new Date('Thu 01 Jan 1970 00:00:01 GMT'), path, secure, sameSite, domain});\r\n    }\r\n\r\n    private getCookieRegExp(name: string): RegExp {\r\n        const escapedName: string = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\r\n    \r\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\r\n    }\r\n\r\n    private safeDecodeCookie(data: string): string {\r\n        try {\r\n            return decodeURIComponent(data);\r\n        } catch {\r\n            return data;\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "platformId",
                        "type": "any"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomerService",
            "id": "injectable-CustomerService-320d0ee2647ee7a244ba9911cad0e0bd",
            "file": "projects/customer/src/lib/services/customer.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "model",
                            "type": "ChangePasswordModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "ChangePasswordModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeUserProfile",
                    "args": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty"
                        },
                        {
                            "name": "value",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkUserNameNotTaken",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewAccount",
                    "args": [
                        {
                            "name": "newCustomer",
                            "type": "INewCustomer"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newCustomer",
                            "type": "INewCustomer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccountInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "getPasswordRecoveryInfo",
                    "args": [
                        {
                            "name": "mode",
                            "type": "string"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "userName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tempProfileChange",
                    "args": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty"
                        },
                        {
                            "name": "value",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { HttpService, ConfigService } from '@common/src/public-api';\r\nimport { ChangePasswordModel, INewCustomer } from '../models';\r\nimport { ProfileChangeProperty } from '../../../../typings/custom';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CustomerService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async checkUserNameNotTaken(username: string): Promise<void> {\r\n        await this.httpClient\r\n            .post(`${this.baseUrl}/user/validateusername`, {\r\n                username: username,\r\n            })\r\n            .toPromise();\r\n    }\r\n\r\n    public async createNewAccount(newCustomer: INewCustomer): Promise<any> {\r\n        return await this.httpClient.post(`${this.baseUrl}/user/createnewaccount`, newCustomer).toPromise();\r\n    }\r\n\r\n    public async getPasswordRecoveryInfo(mode: string, isoCode: string, userName: string): Promise<any> {\r\n        return await this.httpClient.post(`${this.baseUrl}/user/recovery`, { mode, isoCode, userName }).toPromise();\r\n    }\r\n\r\n    public async changePassword(model: ChangePasswordModel): Promise<any> {\r\n        return await this.httpClient\r\n            .post(`${this.baseUrl}/user/changepassword`, {\r\n                password: model.password,\r\n                confirmPassword: model.confirmPassword,\r\n            })\r\n            .toPromise();\r\n    }\r\n\r\n    public async getAccountInfo(): Promise<any> {\r\n        return await this.httpClient.get(`${this.baseUrl}/user`).toPromise();\r\n    }\r\n\r\n    public async changeUserProfile(type: ProfileChangeProperty, value: string|number): Promise<any> {\r\n        return this.httpClient.patch(`${this.baseUrl}/user/profile/${type}`, {\r\n            value\r\n        }).toPromise();\r\n    }\r\n\r\n    public async tempProfileChange(type: ProfileChangeProperty, value: string|number): Promise<any> {\r\n        return this.httpClient.patch(`${this.baseUrl}/user/temp/profile/${type}`, {\r\n            value\r\n        }).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "DataStoreService",
            "id": "injectable-DataStoreService-0d9d0ca8d155c5e5a8638a8a6e31623c",
            "file": "projects/common/src/lib/services/data-store.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "useSessionStorage",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useSessionStorage",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataStore",
                    "args": [
                        {
                            "name": "useSessionStorage",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "useSessionStorage",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "push",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "data",
                            "type": "any"
                        },
                        {
                            "name": "useSessionStorage",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "useSessionStorage",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { WINDOW } from './window.service';\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DataStoreService {\r\n    constructor(@Inject(WINDOW) private window: any) {}\r\n\r\n    public push(key: string, data: any, useSessionStorage: boolean = true): Promise<void> {\r\n        return new Promise((resolve, _) => {\r\n            const dataStore = this.getDataStore(useSessionStorage);\r\n            if (data !== null && data !== undefined) {\r\n                dataStore[key] = data;\r\n            } else {\r\n                delete dataStore[key];\r\n            }\r\n            if (this.window.sessionStorage) {\r\n                this.window[(useSessionStorage ? 'sessionStorage' : 'localStorage')]\r\n                    .setItem('data-store', JSON.stringify(dataStore));\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    public async get(key: string, useSessionStorage: boolean = true): Promise<any> {\r\n        return new Promise((resolve, _) => {\r\n            const dataStore = this.getDataStore(useSessionStorage);\r\n            resolve(dataStore[key]);\r\n        });\r\n    }\r\n\r\n    private getDataStore(useSessionStorage: boolean = true): any {\r\n        let dataStore = {};\r\n        if ((useSessionStorage && this.window.sessionStorage) || (!useSessionStorage && this.window.localStorage)) {\r\n            const localData = this.window[(useSessionStorage ? 'sessionStorage' : 'localStorage')].getItem('data-store');\r\n            if (localData) {\r\n                dataStore = JSON.parse(localData);\r\n            }\r\n        }\r\n\r\n        return dataStore;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DeliveryOptionsService",
            "id": "injectable-DeliveryOptionsService-6617a1c07ec23abba4272b83f6cc5f85",
            "file": "projects/common/src/lib/services/delivery-options.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deliveryOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DeliveryOptionsService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async deliveryOptions(): Promise<any> {\r\n        return await this.executeGet('delivery_options', `${this.baseUrl}/delivery/options`).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "DeliverySlotsService",
            "id": "injectable-DeliverySlotsService-b2c0029c06d1dbf0d35de1ff296a5b0f",
            "file": "projects/common/src/lib/services/delivery-slots.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getPanchshilDeliverySlots",
                    "args": [
                        {
                            "name": "from",
                            "type": "Date"
                        },
                        {
                            "name": "to",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getVehicleDeliverySlots",
                    "args": [
                        {
                            "name": "from",
                            "type": "Date"
                        },
                        {
                            "name": "to",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reserve",
                    "args": [
                        {
                            "name": "availableSlot",
                            "type": "AvailableSlot"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "availableSlot",
                            "type": "AvailableSlot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\nimport { AvailableSlot } from '../types/available-slot';\r\nimport { DeliverySlotType } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DeliverySlotsService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public getPanchshilDeliverySlots(from: Date, to: Date): Promise<any> {\r\n        const key = `get_panchshil_delivery_slot`;\r\n        return this.executeGet(key, `${this.baseUrl}/delivery/slots/panchshil/${from}/${to}`).toPromise();\r\n    }\r\n\r\n    public getVehicleDeliverySlots(from: Date, to: Date): Promise<any> {\r\n        const key = `get_vehicle_delivery_slot`;\r\n        return this.executeGet(\r\n            key,\r\n            `${this.baseUrl}/delivery/slots/vehicle/${from.getTime()}/${to.getTime()}`\r\n        ).toPromise();\r\n    }\r\n\r\n    public async reserve(availableSlot: AvailableSlot): Promise<any> {\r\n        const key = `reserve_delivery_slot`;\r\n        return await this.executePost(key, `${this.baseUrl}/delivery/slots/reserve`, {\r\n            key: availableSlot._id,\r\n            deliverySlotType: availableSlot.deliverySlotType,\r\n        }).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "DetailService",
            "id": "injectable-DetailService-7057fb259641f2da4f0c4a6b52aa031e",
            "file": "projects/content/src/lib/services/detail.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPackSizes",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService, HttpService, LikeDislikeVote } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DetailService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public get(id: string): Observable<any> {\r\n        return this.executeGet(`product_${id}`, `${this.baseUrl}/product/${id}`);\r\n    }\r\n\r\n    public getPackSizes(id: string): Observable<any> {\r\n        return this.executeGet(`product_${id}`, `${this.baseUrl}/product/id/${id}/sizes`);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "FileService",
            "id": "injectable-FileService-2a6431857ebe7aaa64ff77a7a0854254",
            "file": "projects/common/src/lib/services/file.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "convertDataUrlToBlob",
                    "args": [
                        {
                            "name": "dataUrl",
                            "type": ""
                        },
                        {
                            "name": "type",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Blob",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataUrl",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        },
                        {
                            "name": "fileType",
                            "type": "FileType"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileType",
                            "type": "FileType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFile",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "action",
                            "type": "\"view\" | \"download\""
                        },
                        {
                            "name": "fileType",
                            "type": "FileType"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "\"view\" | \"download\"",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileType",
                            "type": "FileType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "uploadType",
                            "type": "string"
                        },
                        {
                            "name": "productID",
                            "type": "string"
                        },
                        {
                            "name": "reviewID",
                            "type": "string"
                        },
                        {
                            "name": "filename",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "uploadType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reviewID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "uploadType",
                            "type": "string"
                        },
                        {
                            "name": "productID",
                            "type": "string"
                        },
                        {
                            "name": "reviewID",
                            "type": "string"
                        },
                        {
                            "name": "dataURL",
                            "type": "string"
                        },
                        {
                            "name": "fileType",
                            "type": "string"
                        },
                        {
                            "name": "filename",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "uploadType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reviewID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataURL",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewFile",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        },
                        {
                            "name": "fileType",
                            "type": "FileType"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileType",
                            "type": "FileType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Inject, Injectable, PLATFORM_ID } from \"@angular/core\";\r\nimport { TransferState } from \"@angular/platform-browser\";\r\nimport { ImageResult } from \"ngx-image2dataurl\";\r\nimport { EMPTY, Observable } from \"rxjs\";\r\nimport { FileType } from \"../types/file-type\";\r\nimport * as fileSaver from 'file-saver';\r\n\r\nimport { ConfigService } from \"./config.service\";\r\nimport { HttpService } from \"./http.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FileService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n    \r\n    public upload(uploadType: string, productID: string, reviewID: string, dataURL: string, fileType: string, filename: string): Observable<any> {\r\n        const url = `${this.baseUrl}/file/${uploadType}/${productID}/review/${reviewID}/upload`;\r\n        const blob = this.convertDataUrlToBlob(dataURL, fileType);\r\n        const options = {\r\n            headers: new HttpHeaders({\r\n                'Content-Type': blob.type,\r\n                'Content-Disposition': `attachment; filename=${filename}`\r\n            })\r\n        }\r\n        return this.httpClient.post(url, blob, options);\r\n    }\r\n\r\n    public remove(uploadType: string, productID: string, reviewID: string, filename: string): Observable<any> {\r\n        const url = `${this.baseUrl}/file/${uploadType}/${productID}/review/${reviewID}/${filename}`;\r\n        return this.httpClient.delete(url);\r\n    }\r\n\r\n    public convertDataUrlToBlob(dataUrl, type): Blob {\r\n        const binary = atob(dataUrl.split(',')[1]);\r\n        const array = [];\r\n        for (let index = 0; index < binary.length; index++) {\r\n            array.push(binary.charCodeAt(index));\r\n        }\r\n        return new Blob([new Uint8Array(array)], { type });\r\n    }\r\n\r\n    public downloadFile(orderID: string, fileType: FileType): Observable<any> {     \r\n       return this.getFile(`${this.baseUrl}/file/order/${orderID}/type/${fileType}`, 'download', fileType);\r\n    }\r\n\r\n    public viewFile(orderID: string, fileType: FileType): Observable<any> {     \r\n        return this.getFile(`${this.baseUrl}/file/order/${orderID}/type/${fileType}`, 'view', fileType);\r\n     }\r\n\r\n    private getFile(url: string, action: 'view'|'download', fileType: FileType): Observable<any> {\r\n        this.httpClient.get(url, { responseType: 'arraybuffer', headers: { 'content-type': 'application/pdf' } })\r\n        .subscribe(\r\n            response => { \r\n                const blob = new Blob([response], {type: 'application/pdf' });               \r\n                if (action === 'view') {\r\n                    const url = window.URL.createObjectURL(blob);\r\n                    window.open(url);\r\n                } else {\r\n                    fileSaver.saveAs(blob, `${fileType}.pdf`);\r\n                }               \r\n            }\r\n        );\r\n       return EMPTY;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "FooterService",
            "id": "injectable-FooterService-fedc4b771882cfb8e1350832053aabf2",
            "file": "projects/footer/src/lib/footer.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService, HttpService } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class FooterService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public get(): Observable<any> {\r\n        return this.executeGet('footer', `${this.baseUrl}/footer`);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "GlobalisationService",
            "id": "injectable-GlobalisationService-42298a9bcbe5c1cded625a0855582dac",
            "file": "projects/common/src/lib/services/globalisation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "section",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "section",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class GlobalisationService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public get(section: string): Observable<any> {\r\n        const language = this.configuration && this.configuration.language || 'en';\r\n        \r\n        if (!this.configuration.useLocalResourcePointEndpoint) {\r\n            return this.executeGet(\r\n                `assets_resources_${section}`,\r\n                `${this.configuration.resourceEndpoint}/resource/${section}`\r\n            );\r\n        } else  {\r\n            return this.executeGet(\r\n                `assets_resources_${section}`,\r\n                `${this.configuration.localResourcePointEndpoint}/${language}/${section}.json`\r\n            );\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "HamburgerMenuStateService",
            "id": "injectable-HamburgerMenuStateService-ad0c54eefecfd6da078960a9bae0a8e8",
            "file": "projects/menu/src/lib/services/hamburger-menu-state.service.ts",
            "properties": [
                {
                    "name": "showChildMenu",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showMenu",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class HamburgerMenuStateService {\r\n    constructor() {}\r\n\r\n    public showMenu: boolean = false;\r\n    public showChildMenu: boolean = false;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "HistoryService",
            "id": "injectable-HistoryService-f575fe5626b8f4b1ae9cc5b4b8e7d36e",
            "file": "projects/common/src/lib/services/history.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "hasItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "pop",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "push",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { RouteKeys } from \"../constants/route.keys\";\r\nimport { HistoryItem } from \"../types/history-item\";\r\nimport { DataStoreService } from \"./data-store.service\";\r\nimport { MenuStateService } from \"./menu-state.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class HistoryService {\r\n    constructor (\r\n        private dataStoreService: DataStoreService,\r\n        private menuStateService: MenuStateService\r\n    ) { }\r\n\r\n    public async pop(): Promise<string> {\r\n        const history = await this.dataStoreService.get('history');\r\n\r\n        if (Array.isArray(history) && history.length > 0) {\r\n            const item = history.pop();            \r\n            await this.dataStoreService.push('history', history);\r\n\r\n            if (Array.isArray(item.storeData) && item.storeData.length > 0) {\r\n                for (let i = 0; i < item.storeData.length; i++) {\r\n                    await this.dataStoreService.push(item.storeData[i].Key, item.storeData[i].Value);\r\n\r\n                    if (item.storeData[i].Key === 'menu-state') {\r\n                        const menuState = item.storeData[i].Value;\r\n                        \r\n                        if (menuState) {\r\n                            this.menuStateService.changeShowMainMenu(menuState.showMainMenu);\r\n                            this.menuStateService.changeMainMenuKey(menuState.mainMenuKey);\r\n                            this.menuStateService.changeSubMenuKey(menuState.subMenuKey);\r\n                            this.menuStateService.changeShowSubMenu(menuState.showSubMenu);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            return item.url;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public async push(item: HistoryItem): Promise<void> {\r\n        let history: Array<HistoryItem> = await this.dataStoreService.get('history');\r\n\r\n        if (!history) {\r\n            history = new Array<HistoryItem>();\r\n        }\r\n        \r\n        history.push(item);\r\n\r\n        await this.dataStoreService.push('history', history);\r\n    }\r\n\r\n    public async clear(): Promise<void> {\r\n        await this.dataStoreService.push('history', null);\r\n    }\r\n\r\n    public async hasItems(): Promise<boolean> {\r\n        const history = await this.dataStoreService.get('history');\r\n        return Array.isArray(history) && history.length > 0;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HomePageService",
            "id": "injectable-HomePageService-a665e60b4df2303e60867b539b95a3ec",
            "file": "projects/content/src/lib/services/homePage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService, HttpService } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class HomePageService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public get(key: string): Observable<any> {\r\n        return this.executeGet(`home_${key}`, `${this.baseUrl}/home/${key}`);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "InfiniteScrollService",
            "id": "injectable-InfiniteScrollService-f03103a19da51a515f4254cf0115c2ec",
            "file": "projects/common/src/lib/services/infinite-scroll.service.ts",
            "properties": [
                {
                    "name": "_scrollPercent",
                    "defaultValue": "80",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isScrollExpectedPercent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isUserScrollingDown",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onScroll",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollSubject",
                    "defaultValue": "new Subject()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { filter, map, pairwise } from 'rxjs/operators';\r\nimport { WINDOW } from './window.service';\r\n\r\ninterface Position {\r\n    scrollHeight: number,\r\n    scrollTop:    number,\r\n    clientHeight: number\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class InfiniteScrollService {\r\n    private _scrollPercent: number = 80;\r\n    private scrollSubject: Subject<any> = new Subject();\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any,\r\n        @Inject(WINDOW) private window: Window\r\n    ) {\r\n        this.window.addEventListener('scroll', this.onScroll, true);\r\n    }\r\n\r\n    private onScroll = (event: UIEvent): void => this.scrollSubject.next(event.target);\r\n\r\n    private isUserScrollingDown = (positions: Array<Position>) => positions[0].scrollTop < positions[1].scrollTop;\r\n\r\n    private isScrollExpectedPercent = (position:Position, percent:number) => {\r\n        return (position.scrollTop / position.scrollHeight) > (percent/100);\r\n    }\r\n     \r\n    public get onScrolledDown(): Observable<[Position, Position]> {\r\n        return this.scrollSubject\r\n            .asObservable()\r\n            .pipe(\r\n                map(() => {\r\n                    return <Position>{\r\n                        scrollHeight: this.document.documentElement.scrollHeight,\r\n                        scrollTop: this.document.documentElement.scrollTop || this.document.body.scrollTop,\r\n                        clientHeight: this.document.documentElement.clientHeight\r\n                    }\r\n                })\r\n            ).pipe(pairwise())\r\n            .pipe(filter(positions => {\r\n                const scrollingDown = this.isUserScrollingDown(positions);\r\n                const expectedPercent = this.isScrollExpectedPercent(positions[1], this._scrollPercent);\r\n                return scrollingDown && expectedPercent; \r\n            }));\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "onScrolledDown": {
                    "name": "onScrolledDown",
                    "getSignature": {
                        "name": "onScrolledDown",
                        "type": "",
                        "returnType": "Observable<>",
                        "line": 35
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "LightboxService",
            "id": "injectable-LightboxService-933e699bbfc218e95a30398a88eacbc9",
            "file": "projects/common/src/lib/services/lightbox.service.ts",
            "properties": [
                {
                    "name": "lightBoxes",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "lightbox",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lightbox",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import  { Injectable } from'@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LightboxService {\r\n    private lightBoxes: Array<any> = [];\r\n\r\n    public add (lightbox: any): void {\r\n        this.lightBoxes.push(lightbox);\r\n    }\r\n\r\n    public remove (id: string): void {\r\n        this.lightBoxes = this.lightBoxes.filter(l => l.id !== id);\r\n    }\r\n\r\n    open(id: string): void {\r\n        const lightbox = this.lightBoxes.find(l => l.id === id);\r\n\r\n        if (lightbox) {\r\n            lightbox.open();\r\n        }\r\n    }\r\n\r\n    close(id: string): void {\r\n        const lightbox = this.lightBoxes.find(l => l.id === id);\r\n\r\n        if (lightbox) {\r\n            lightbox.close();\r\n        }\r\n    }\r\n}",
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-9a17e1b2a4ede7114b00e1d964d95972",
            "file": "projects/login/src/lib/services/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "signin",
                    "args": [
                        {
                            "name": "mode",
                            "type": "string"
                        },
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateUsername",
                    "args": [
                        {
                            "name": "mode",
                            "type": "string"
                        },
                        {
                            "name": "userName",
                            "type": "string"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { AuthService, HttpService, ConfigService } from '@common/src/public-api';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoginService extends HttpService {\r\n    constructor(\r\n        private authService: AuthService,\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async validateUsername(mode: string, userName: string, isoCode: string): Promise<any> {\r\n        return await this.httpClient\r\n            .post(`${this.baseUrl}/user/validateusername`, {\r\n                mode,\r\n                isoCode,\r\n                userName,\r\n            })\r\n            .pipe(first())\r\n            .toPromise();\r\n    }\r\n\r\n    public async signin(mode: string, username: string, isoCode: string, password: string): Promise<void> {\r\n        await this.authService.login(mode, isoCode, username, password);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "LoyaltyPointService",
            "id": "injectable-LoyaltyPointService-d3c99efa654fdacdcf478449f6c44d3a",
            "file": "projects/checkout/src/lib/services/loyalty-point.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "availablePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService, HttpService } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoyaltyPointService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async availablePoints(): Promise<any> {\r\n        return await this.executeGet('checkout_available_loyalty_points', `${this.baseUrl}/loyalty/point/available`).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-0b50c0843b3e57474e51a2a5e7760d42",
            "file": "projects/menu/src/lib/services/menu.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getBurgerMenu",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDevice",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getMainMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getProductTypeSidebar",
                    "args": [
                        {
                            "name": "keyAsBase64",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "keyAsBase64",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSidebar",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubMenu",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\nimport { DeviceDetectorService } from 'ngx-device-detector';\r\n\r\nimport { ConfigService, HttpService } from '@common/src/public-api';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class MenuService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState,\r\n        private deviceDetectorService: DeviceDetectorService\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public getMainMenu(): Observable<any> {\r\n        return this.executeGet(\r\n            `menu_mainmenu_${this.getDevice()}`,\r\n            `${this.baseUrl}/menu/mainmenu/${this.getDevice()}`\r\n        );\r\n    }\r\n\r\n    public getBurgerMenu(key: string): Observable<any> {\r\n        return this.executeGet(\r\n            `menu_burgermenu_${this.getDevice()}`,\r\n            `${this.baseUrl}/menu/burger menu/${this.getDevice()}`\r\n        );\r\n    }\r\n\r\n    public getSubMenu(key: string): Observable<any> {\r\n        return this.executeGet(\r\n            `menu_${key}_submenu_${this.getDevice()}`,\r\n            `${this.baseUrl}/menu/${key}/submenu/${this.getDevice()}`\r\n        );\r\n    }\r\n\r\n    public getSidebar(key: string): Observable<any> {\r\n        return this.executeGet(\r\n            `menu_${key}_submenu_sidebar_${this.getDevice()}`,\r\n            `${this.baseUrl}/menu/${key}/submenu/sidebar/${this.getDevice()}`\r\n        );\r\n    }\r\n\r\n    public getProductTypeSidebar(keyAsBase64: string): Observable<any> {\r\n        return this.executeGet(`menu_${keyAsBase64}`, `${this.baseUrl}/menu/${keyAsBase64}`);\r\n    }\r\n\r\n    private getDevice(): string {\r\n        return this.deviceDetectorService.isMobile()\r\n            ? 'Mobile'\r\n            : this.deviceDetectorService.isTablet()\r\n            ? 'Tablet'\r\n            : 'Desktop';\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    },
                    {
                        "name": "deviceDetectorService",
                        "type": "DeviceDetectorService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceDetectorService",
                        "type": "DeviceDetectorService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "MenuStateService",
            "id": "injectable-MenuStateService-11d9158f354a078aee8b8225cdbcb46e",
            "file": "projects/common/src/lib/services/menu-state.service.ts",
            "properties": [
                {
                    "name": "_mainMenuKey",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showMainMenu",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showSideBar",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showSubMenu",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_sideMenuFilters",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<SearchMap>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_subMenuKey",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mainMenuKey",
                    "defaultValue": "this._mainMenuKey.asObservable()",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showMainMenu",
                    "defaultValue": "this._showMainMenu.asObservable()",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showSideBar",
                    "defaultValue": "this._showSideBar.asObservable()",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showSubMenu",
                    "defaultValue": "this._showSubMenu.asObservable()",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sideMenuFilters",
                    "defaultValue": "this._sideMenuFilters.asObservable()",
                    "type": "Observable<SearchMap>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subMenuKey",
                    "defaultValue": "this._subMenuKey.asObservable()",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeMainMenuKey",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeShowMainMenu",
                    "args": [
                        {
                            "name": "data",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeShowSideBar",
                    "args": [
                        {
                            "name": "data",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeShowSubMenu",
                    "args": [
                        {
                            "name": "data",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSideMenuFilters",
                    "args": [
                        {
                            "name": "data",
                            "type": "SearchMap"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SearchMap",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSubMenuKey",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearMenuState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getCurrentMenuState",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getMainMenuKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getShowMainMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getShowSubMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getSubMenuKey",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hydrateMenuState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hydrateSidebarMenuFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "storeMenuState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nimport { SearchMap } from '@common/src/public-api';\r\nimport { DataStoreService } from './data-store.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class MenuStateService {\r\n    private _mainMenuKey: BehaviorSubject<string> = new BehaviorSubject(null);\r\n    private _subMenuKey: BehaviorSubject<string> = new BehaviorSubject(null);\r\n    private _showSideBar: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n    private _sideMenuFilters: BehaviorSubject<SearchMap> = new BehaviorSubject(null);\r\n    private _showMainMenu: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n    private _showSubMenu: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    constructor(private dataStoreService: DataStoreService) {\r\n    }\r\n\r\n    public mainMenuKey: Observable<string> = this._mainMenuKey.asObservable();\r\n    public subMenuKey: Observable<string> = this._subMenuKey.asObservable();\r\n    public showSideBar: Observable<boolean> = this._showSideBar.asObservable();\r\n    public sideMenuFilters: Observable<SearchMap> = this._sideMenuFilters.asObservable();\r\n    public showMainMenu: Observable<boolean> = this._showMainMenu.asObservable();\r\n    public showSubMenu: Observable<boolean> = this._showSubMenu.asObservable();\r\n\r\n    public changeShowSideBar(data: boolean): void {\r\n        this._showSideBar.next(data);        \r\n    }\r\n\r\n    public changeSideMenuFilters(data: SearchMap): void {\r\n        this._sideMenuFilters.next(data);\r\n        this.dataStoreService.push('sidebar-search-map', data).then(_ => _);\r\n    }\r\n\r\n    public changeShowMainMenu(data: boolean): void {\r\n        this._showMainMenu.next(data);\r\n        this.storeMenuState();\r\n    }\r\n\r\n    public changeShowSubMenu(data: boolean): void {\r\n        this._showSubMenu.next(data);\r\n        this.storeMenuState();\r\n    }\r\n\r\n    public changeMainMenuKey(data: string): void {\r\n        this._mainMenuKey.next(data);\r\n        this.storeMenuState();\r\n    }\r\n\r\n    public changeSubMenuKey(data: string): void {\r\n        this._subMenuKey.next(data);\r\n        this.storeMenuState();\r\n    }\r\n\r\n    public getSubMenuKey(): string {\r\n        return this._subMenuKey.getValue();\r\n    }\r\n\r\n    public getMainMenuKey(): string {\r\n        return this._mainMenuKey.getValue();\r\n    }\r\n\r\n    public getShowSubMenu(): boolean {\r\n        return this._showMainMenu.getValue();\r\n    }\r\n\r\n    public getShowMainMenu(): boolean {\r\n        return this._showMainMenu.getValue();\r\n    }\r\n\r\n    public storeMenuState(): void {\r\n        const ms = {\r\n            showMainMenu: this._showMainMenu.getValue(),\r\n            showSubMenu: this._showSubMenu.getValue(),\r\n            mainMenuKey: this._mainMenuKey.getValue(),\r\n            subMenuKey: this._subMenuKey.getValue()\r\n        };\r\n\r\n        this.dataStoreService.push('menu-state', ms).then(_ => _);\r\n    }\r\n\r\n    public getCurrentMenuState(): any {\r\n        return {\r\n            showMainMenu: this._showMainMenu.getValue(),\r\n            showSubMenu: this._showSubMenu.getValue(),\r\n            mainMenuKey: this._mainMenuKey.getValue(),\r\n            subMenuKey: this._subMenuKey.getValue()\r\n        };\r\n    }\r\n\r\n    public clearMenuState(): void {\r\n        this.changeSubMenuKey(null);\r\n        this.changeMainMenuKey(null);\r\n        this.changeShowMainMenu(null);\r\n        this.changeShowSubMenu(null);\r\n    }\r\n\r\n    public hydrateMenuState(): void {\r\n        this.dataStoreService.get('menu-state').then((s: any) => {\r\n            this.changeMainMenuKey(s.mainMenuKey);\r\n            this.changeSubMenuKey(s.subMenuKey);\r\n            this.changeShowMainMenu(s.showMainMenu);\r\n            this.changeShowSubMenu(s.showSubMenu);\r\n        })\r\n    }\r\n\r\n    public hydrateSidebarMenuFilters(): void {\r\n        this.dataStoreService.get('sidebar-search-map').then(f => this.changeSideMenuFilters(f));\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-524110652aed557db919e1dbc458d6f0",
            "file": "projects/common/src/lib/services/navigation.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 143,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "navigateForCartClick",
                    "args": [
                        {
                            "name": "query",
                            "type": "any"
                        },
                        {
                            "name": "currentPage",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateForCategory",
                    "args": [
                        {
                            "name": "query",
                            "type": "any"
                        },
                        {
                            "name": "category",
                            "type": "string"
                        },
                        {
                            "name": "currentPage",
                            "type": "string"
                        },
                        {
                            "name": "addToHistory",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addToHistory",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateForListItem",
                    "args": [
                        {
                            "name": "query",
                            "type": "any"
                        },
                        {
                            "name": "currentPage",
                            "type": "string"
                        },
                        {
                            "name": "itemId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateForSubcategory",
                    "args": [
                        {
                            "name": "query",
                            "type": "any"
                        },
                        {
                            "name": "subMenuKey",
                            "type": "string"
                        },
                        {
                            "name": "mainMenuKey",
                            "type": "string",
                            "defaultValue": "null"
                        },
                        {
                            "name": "addToHistory",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subMenuKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mainMenuKey",
                            "type": "string",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addToHistory",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateForUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "defaultValue": "''"
                        },
                        {
                            "name": "addtoHistory",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "removeFromHistory",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addtoHistory",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "removeFromHistory",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateHomeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "resetMenuState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { RouteKeys } from \"../constants/route.keys\";\r\nimport { DataStoreService } from \"./data-store.service\";\r\nimport { HistoryService } from \"./history.service\";\r\nimport { MenuStateService } from \"./menu-state.service\";\r\nimport { SearchStateService } from \"./search-state.service\";\r\nimport { WINDOW } from \"./window.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NavigationService {\r\n    constructor(\r\n        private menuStateService: MenuStateService,\r\n        private dataStoreService: DataStoreService,\r\n        private searchStateService: SearchStateService,\r\n        private historyService: HistoryService,\r\n        private router: Router,\r\n        @Inject(WINDOW) private window: any,\r\n    ) {\r\n    }\r\n\r\n    public async navigateForCategory(query: any, category: string, currentPage: string, addToHistory: boolean = true): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n        const data = JSON.parse(query);\r\n\r\n        const currentMenuState = this.menuStateService.getCurrentMenuState();\r\n        \r\n        this.menuStateService.changeShowMainMenu(!this.isMobileOrTablet);\r\n        this.menuStateService.changeShowSubMenu(true);\r\n        this.menuStateService.changeMainMenuKey(category);\r\n        this.menuStateService.changeSubMenuKey(null);\r\n        this.menuStateService.changeSideMenuFilters(null);\r\n\r\n        await this.dataStoreService.push('sidebar-query', data);\r\n\r\n        if (addToHistory === true) {\r\n            await this.historyService.push({ url: currentPage, storeData: [ { Key: 'sidebar-query', Value: data }, { Key: 'menu-state', Value: currentMenuState}] });\r\n        }\r\n\r\n        this.router.navigateByUrl(`/${data.lob}/list/${btoa(query)}`, { skipLocationChange: false, replaceUrl: true});\r\n    }\r\n\r\n    public async navigateForSubcategory(query: any, subMenuKey: string, mainMenuKey: string = null, addToHistory: boolean = false, currentPage: string = null): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n\r\n        const data = JSON.parse(query);\r\n        const currentMenuState = this.menuStateService.getCurrentMenuState();\r\n\r\n        this.menuStateService.changeSubMenuKey(subMenuKey);\r\n        this.menuStateService.changeShowMainMenu(!this.isMobileOrTablet);\r\n        this.menuStateService.changeMainMenuKey((mainMenuKey ? mainMenuKey : this.menuStateService.getMainMenuKey()));\r\n        this.menuStateService.changeShowSubMenu(true);\r\n        this.menuStateService.changeSideMenuFilters(null);\r\n\r\n        await this.dataStoreService.push('sidebar-query', data);\r\n\r\n        if (addToHistory === true) {\r\n            await this.historyService.push({ url: currentPage, storeData: [ { Key: 'sidebar-query', Value: data }, { Key: 'menu-state', Value: currentMenuState}] });\r\n        }\r\n\r\n        this.router.navigateByUrl(`/${data.lob}/list/${btoa(query)}`, { skipLocationChange: false, replaceUrl: true});\r\n    }\r\n\r\n    public async navigateForListItem(query: any, currentPage: string, itemId: string): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n\r\n        const data = JSON.parse(query);\r\n        const currentMenuState = this.menuStateService.getCurrentMenuState();\r\n\r\n        this.menuStateService.changeSideMenuFilters(null);\r\n        \r\n        await this.historyService.push({ url: currentPage, storeData: [ { Key: 'sidebar-query', Value: data }, { Key: 'menu-state', Value: currentMenuState}] });       \r\n\r\n        this.router.navigateByUrl(`/${data.lob}/detail/${itemId}`, { skipLocationChange: false, replaceUrl: true});\r\n    }\r\n\r\n    public async navigateHomeClick(): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n\r\n        this.menuStateService.clearMenuState();\r\n        this.menuStateService.changeSideMenuFilters(null);\r\n        await this.historyService.clear();\r\n\r\n        this.menuStateService.changeSubMenuKey(null);\r\n        this.menuStateService.changeMainMenuKey(null);\r\n        this.menuStateService.changeShowMainMenu(true);\r\n        this.menuStateService.changeShowSubMenu(false);\r\n        this.router.navigateByUrl(RouteKeys.Home);\r\n    }\r\n\r\n    public async navigateForCartClick(query: any, currentPage: string): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n\r\n        const data = JSON.parse(query);\r\n        const currentMenuState = this.menuStateService.getCurrentMenuState();\r\n        \r\n        this.menuStateService.changeShowMainMenu(true);\r\n        this.menuStateService.changeShowSubMenu(false);\r\n        this.menuStateService.changeMainMenuKey(null);\r\n        this.menuStateService.changeSideMenuFilters(null);\r\n\r\n        await this.historyService.push({ url: currentPage, storeData: [ { Key: 'sidebar-query', Value: data }, { Key: 'menu-state', Value: currentMenuState}] });\r\n\r\n        this.router.navigateByUrl(RouteKeys.ShoppingCart, { skipLocationChange: false, replaceUrl: true});\r\n    }\r\n\r\n    public async clear(): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n\r\n        this.menuStateService.clearMenuState();\r\n        this.menuStateService.changeSideMenuFilters(null);\r\n\r\n        await this.dataStoreService.push('sidebar-query', null);\r\n        await this.historyService.clear();        \r\n    }\r\n\r\n    public async navigateForUrl(\r\n        url: string,\r\n        currentPage: string = '',\r\n        addtoHistory: boolean = false,\r\n        removeFromHistory = false\r\n    ): Promise<void> {\r\n        if (removeFromHistory) {\r\n            this.historyService.pop();\r\n        }\r\n        if (addtoHistory) {\r\n            await this.historyService.push({ url: currentPage });\r\n        }\r\n        this.router.navigateByUrl(url, { skipLocationChange: false, replaceUrl: true});\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public resetMenuState(): void {\r\n        this.menuStateService.changeShowMainMenu(true);\r\n        this.menuStateService.changeMainMenuKey(null);\r\n        this.menuStateService.changeSubMenuKey(null);\r\n        this.menuStateService.changeShowSubMenu(false);\r\n    }\r\n\r\n    public async back() : Promise<void> {\r\n        const url = await this.historyService.pop();\r\n\r\n        await this.router.navigateByUrl(url, { skipLocationChange: false, replaceUrl: true});\r\n    }\r\n\r\n    private get isMobileOrTablet(): boolean {\r\n        const mediaQuery = this.window && this.window.matchMedia && this.window.matchMedia('(max-width: 767px)');\r\n        return mediaQuery && mediaQuery.matches;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService"
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isMobileOrTablet": {
                    "name": "isMobileOrTablet",
                    "getSignature": {
                        "name": "isMobileOrTablet",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 149
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-dec744967cd3ac6f33696ec6bf41790a",
            "file": "projects/common/src/lib/services/notification.service.ts",
            "properties": [
                {
                    "name": "defaultTimeout",
                    "defaultValue": "3000",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "messages",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ensureMessagesLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ThisReceiver } from \"@angular/compiler\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { DataStoreService } from \"./data-store.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n    private readonly defaultTimeout: number = 3000;\r\n    private messages: Array<{key: string, body: string, title: string, type: string, timeout: number }>;\r\n    private loaded: boolean = false;\r\n\r\n    constructor (\r\n        private toastr: ToastrService,\r\n        private dataStoreService: DataStoreService\r\n    ) {\r\n    }\r\n\r\n    public async showMessage(key: string): Promise<void> {\r\n        await this.ensureMessagesLoaded();        \r\n        const message = this.messages.find(m => m.key.toLowerCase() === key.toLowerCase());        \r\n        if (message) {\r\n            this.toastr.show(\r\n                message.body,\r\n                message.key,\r\n                { timeOut: message.timeout || this.defaultTimeout },\r\n                `toast-${message.type.toLowerCase()}`\r\n            );\r\n        }\r\n    }\r\n\r\n    private async ensureMessagesLoaded(): Promise<void> {\r\n        if (!this.loaded) {\r\n            this.messages = await this.dataStoreService.get('notification-messages');\r\n            this.loaded = true;\r\n        }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "OrderFilterService",
            "id": "injectable-OrderFilterService-569feca02edbf2df1443c5d30dd90d98",
            "file": "projects/customer/src/lib/services/order-filter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilterDates",
                    "args": [
                        {
                            "name": "today",
                            "type": "Date"
                        },
                        {
                            "name": "offset",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "today",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderFilterService {\r\n    public getFilter(filter: string): { from: number, to: number } {\r\n        const today = new Date(Date.now());\r\n        let dates: any = {};\r\n\r\n        switch(filter) {\r\n            case 'last 30 days':\r\n                dates['to'] = new Date(new Date(Date.now()).toDateString());\r\n                dates['from'] = new Date(today.setMonth(today.getMonth() - 1));\r\n                break;\r\n            case 'past 3 months':\r\n                dates = this.getFilterDates(today, 3);\r\n                break;\r\n            case 'past 6 months':\r\n                dates = this.getFilterDates(today, 6);\r\n                break;\r\n            default:\r\n                const d = this.getFilterDates(today, 7);\r\n                dates['to'] = new Date(d.from.getFullYear(), d.from.getMonth(), new Date(d.from.getFullYear(), d.from.getMonth() + 1, 0).getDate());\r\n                break;\r\n        }\r\n        \r\n        return { \r\n            from: (dates.from ? new Date(dates.from.getFullYear(), dates.from.getMonth(), dates.from.getDate(), 0, 0, 0).getTime() : null),\r\n            to: (dates.to ? new Date(dates.to.getFullYear(), dates.to.getMonth(), dates.to.getDate(), 23, 59, 59).getTime() : null)\r\n        };\r\n    }\r\n\r\n    private getFilterDates(today: Date, offset: number): { from: Date, to: Date } {\r\n        const t = new Date(today);\r\n        const f = new Date(today.setMonth(today.getMonth() - (offset - 1)));\r\n\r\n        return {\r\n            to: new Date(t.getFullYear(), t.getMonth(), new Date(t.getFullYear(), t.getMonth() + 1, 0).getDate()),\r\n            from: new Date(f.getFullYear(), f.getMonth(), 1)\r\n        };\r\n    }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "OrderService",
            "id": "injectable-OrderService-8aa20d12d5126638f7f6ffdc2e814188",
            "file": "projects/common/src/lib/services/order.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelOrder",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderProducts",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductForOrder",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        },
                        {
                            "name": "productID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "pn",
                            "type": "number"
                        },
                        {
                            "name": "from",
                            "type": "number"
                        },
                        {
                            "name": "to",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<any>>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "pn",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, PLATFORM_ID } from \"@angular/core\";\r\nimport { TransferState } from \"@angular/platform-browser\";\r\nimport { Observable } from \"rxjs\";\r\nimport { OrderStatus } from \"../types/order-status\";\r\nimport { ConfigService } from \"./config.service\";\r\nimport { HttpService } from \"./http.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OrderService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public search(pn: number, from: number, to: number): Observable<Array<any>> {\r\n        const query = btoa(JSON.stringify({ from, to }));\r\n\r\n        return this.executeGet('customer-orders', `${this.baseUrl}/order/search/${pn}/${query}`);\r\n    }\r\n\r\n    public get(orderID: string): Observable<any> {\r\n        return this.executeGet(`customer-order-${orderID}`, `${this.baseUrl}/order/${orderID}`);\r\n    }\r\n\r\n    public getProductForOrder(orderID: string, productID: string): Observable<any> {\r\n        return this.executeGet(`order-product-${orderID}-${productID}`, `${this.baseUrl}/order/${orderID}/product/${productID}`);\r\n    }\r\n\r\n    public getOrderProducts(orderID: string): Observable<any> {\r\n        return this.executeGet(`order-products-${orderID}`, `${this.baseUrl}/order/${orderID}/products`);\r\n    }\r\n\r\n    public cancelOrder(orderID: string): Observable<any> {\r\n        return this.httpClient.patch(`${this.baseUrl}/order/${orderID}`, {status: OrderStatus.Cancelled.toString()});\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "PaymentService",
            "id": "injectable-PaymentService-6e7a40bf8f8668429cf9cb46da10cfe1",
            "file": "projects/checkout/src/lib/services/payment.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "initiatePayment",
                    "args": [
                        {
                            "name": "addressID",
                            "type": "string"
                        },
                        {
                            "name": "amount",
                            "type": "number"
                        },
                        {
                            "name": "pointsToRedeem",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "promotions",
                            "type": "Array<string>",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "addressID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pointsToRedeem",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "promotions",
                            "type": "Array<string>",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "paymentResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService, HttpService } from '@common/src/public-api';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PaymentService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async initiatePayment(addressID: string, amount: number, pointsToRedeem: number = 0, promotions: Array<string> = []): Promise<any> {\r\n        return await this.executePost('checkout_initiate_payment', `${this.baseUrl}/payment/initiate`, {\r\n            addressID, amount, pointsToRedeem, promotions\r\n        }).toPromise();\r\n    }\r\n\r\n    public paymentResponse(response: any): Observable<any> {\r\n        return this.executePost('checkout_payment_response', `${this.baseUrl}/payment/response`, { response });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "ProductReviewService",
            "id": "injectable-ProductReviewService-3bd42d0ac3ecc181d20b9917d8887683",
            "file": "projects/common/src/lib/services/product-review.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getOrderProductReview",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        },
                        {
                            "name": "productID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderReview",
                    "args": [
                        {
                            "name": "orderID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "orderID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReviews",
                    "args": [
                        {
                            "name": "productID",
                            "type": "string"
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "defaultValue": "1"
                        },
                        {
                            "name": "reviewLimit",
                            "type": "number",
                            "defaultValue": "10"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reviewLimit",
                            "type": "number",
                            "defaultValue": "10",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveReview",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Review>",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateReviewVote",
                    "args": [
                        {
                            "name": "reviewId",
                            "type": "string"
                        },
                        {
                            "name": "vote",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "reviewId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vote",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\nimport { Review } from '../types/review';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ProductReviewService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public getReviews(productID: string, pageNumber: number = 1, reviewLimit: number = 10): Observable<any> {\r\n        return this.executeGet(`product_reviews_${productID}`, `${this.baseUrl}/productreview/${productID}/${pageNumber}/${reviewLimit}`);\r\n    }\r\n\r\n    public updateReviewVote(reviewId: string, vote: { likeVote: boolean, dislikeVote: boolean }): Observable<any> {\r\n        return this.httpClient.patch(`${this.baseUrl}/productreview/${reviewId}`, { vote });\r\n    }\r\n\r\n    public getOrderProductReview(orderID: string, productID: string): Observable<any> {\r\n        return this.executeGet(`order_product_review_${orderID}_${productID}`, `${this.baseUrl}/productreview/order/${orderID}/product/${productID}`);\r\n    }\r\n\r\n    public getOrderReview(orderID: string): Observable<any> {\r\n        return this.executeGet(`order_review_${orderID}`, `${this.baseUrl}/productreview/order/${orderID}`);\r\n    }\r\n\r\n    public saveReview(review: Review): Observable<Review> {\r\n        return this.executePost(`order-product-review-${review.orderID}-${review.productID}`, `${this.baseUrl}/productreview`, { review });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "RecaptchaService",
            "id": "injectable-RecaptchaService-9cd3d6dfae3fa23c2dd937e06a901da4",
            "file": "projects/common/src/lib/services/recaptcha.service.ts",
            "properties": [
                {
                    "name": "recaptchaKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "recaptchaUse",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeRecaptcha",
                    "args": [
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<literal type>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { DataStoreService } from './data-store.service';\r\nimport { VerificationService } from './verification.service';\r\nimport { ConfigService } from './config.service';\r\nimport { TokenService } from './token.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class RecaptchaService {\r\n    private recaptchaKey: string;\r\n    private recaptchaUse: boolean;\r\n\r\n    constructor(\r\n        private dataStoreService: DataStoreService,\r\n        private verificationService: VerificationService,\r\n        private tokenService: TokenService,\r\n        configService: ConfigService\r\n    ) {\r\n        this.recaptchaKey = configService.getConfiguration().recaptchaSiteKey;\r\n        this.recaptchaUse = configService.getConfiguration().recaptchaUse;\r\n    }\r\n\r\n    public async execute(\r\n        action: string\r\n    ): Promise<{ state: 'RecaptchaVerificationSuccess' | 'RecaptchaVerificationFailure' }> {\r\n        if (this.recaptchaUse) {\r\n            await this.dataStoreService.push('recaptcha-token', null);\r\n            return await this.executeRecaptcha(action);\r\n        }\r\n\r\n        return await Promise.resolve({ state: 'RecaptchaVerificationSuccess' });\r\n    }\r\n\r\n    private async executeRecaptcha(\r\n        action: string\r\n    ): Promise<{ state: 'RecaptchaVerificationSuccess' | 'RecaptchaVerificationFailure' }> {\r\n        return new Promise((resolve, reject) => {\r\n            // @ts-ignore\r\n            greptcha.ready(() => {\r\n                // @ts-ignore\r\n                grecaptcha.execute(this.recaptchaKey, { action }).then(async (token: any) => {\r\n                    try {\r\n                        await this.dataStoreService.push('recaptcha-token', token);\r\n                        await this.tokenService.xsrf();\r\n                        const state = await this.verificationService.verifyReCaptcha();\r\n                        resolve(state);\r\n                    } catch (e) {\r\n                        reject({ state: 'RecaptchaVerificationFailure' });\r\n                    }\r\n                }, reject);\r\n            });\r\n        });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SearchService",
            "id": "injectable-SearchService-5b005e3bf286db92f9098f245b74bf86",
            "file": "projects/common/src/lib/services/search.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "quickSearch",
                    "args": [
                        {
                            "name": "term",
                            "type": "string"
                        },
                        {
                            "name": "pn",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pn",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "query",
                            "type": "any"
                        },
                        {
                            "name": "pn",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pn",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SearchService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public quickSearch(term: string, pn: number = 1): Observable<any> {\r\n        return this.executeGet(`product_search_${term}_${pn}`, `${this.baseUrl}/product/search/${term}/${pn}`);\r\n    }\r\n\r\n    public search(query: any, pn: number = 1): Observable<any> {\r\n        const key = `product_search_map_${pn}_${query}`;\r\n        return this.executeGet(key, `${this.baseUrl}/product/search/map/${pn}/${query}`);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "SearchStateService",
            "id": "injectable-SearchStateService-0733a06a791b1143731bf46789defd53",
            "file": "projects/common/src/lib/services/search-state.service.ts",
            "properties": [
                {
                    "name": "clearQuickSearch$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SearchStateService {\r\n    public clearQuickSearch$: Subject<void>  = new Subject();\r\n}",
            "type": "injectable"
        },
        {
            "name": "ShoppingCartService",
            "id": "injectable-ShoppingCartService-5ef1064267d14c51850cf2525c8f909f",
            "file": "projects/common/src/lib/services/shopping-cart.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getShoppingCartForSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ShoppingCart>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "cart",
                            "type": "ShoppingCart"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "cart",
                            "type": "ShoppingCart",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\nimport { ShoppingCart } from '../types/shopping-cart';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ShoppingCartService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public getShoppingCartForSession(): Observable<ShoppingCart> {\r\n        return this.executePost('shopping_cart_session', `${this.baseUrl}/shopping/cart/session`, {});\r\n    }\r\n\r\n    public update(cart: ShoppingCart): Observable<void> {\r\n        return this.executePost('shopping_cart_update', `${this.baseUrl}/shopping/cart/update`, { cart });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "ShoppingCartStateService",
            "id": "injectable-ShoppingCartStateService-1e2014ec9a4a48c27982087f666b64cf",
            "file": "projects/common/src/lib/services/shopping-cart-state.service.ts",
            "properties": [
                {
                    "name": "_shoppingCart",
                    "type": "ShoppingCart",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_totalQuantity",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cartStateChange",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItemToBasket",
                    "args": [
                        {
                            "name": "item",
                            "type": "Product"
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItemFromBasket",
                    "args": [
                        {
                            "name": "item",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGroupBasketItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "retrieveCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setTotalQuantity",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItemInBasket",
                    "args": [
                        {
                            "name": "item",
                            "type": "Product"
                        },
                        {
                            "name": "quantity",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { from, Observable, ReplaySubject, BehaviorSubject } from 'rxjs';\r\nimport { reduce, groupBy, mergeMap, toArray, delay, first, switchMap } from 'rxjs/operators';\r\n\r\nimport { ShoppingCartItem } from '../types/shopping-cart-item';\r\nimport { Product } from '../types/product';\r\nimport { ShoppingCart } from '../types/shopping-cart';\r\nimport { ShoppingCartService } from './shopping-cart.service';\r\nimport { TokenService } from './token.service';\r\nimport { NotificationService } from './notification.service';\r\nimport { NotificationMessageKeys } from '../constants/notification.message.keys';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ShoppingCartStateService {\r\n    private _shoppingCart: ShoppingCart;\r\n    private _totalQuantity = 0;\r\n\r\n    constructor(\r\n        private shoppingCartService: ShoppingCartService,\r\n        private tokenService: TokenService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        this.retrieveCart();\r\n    }\r\n\r\n    public cartStateChange: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n\r\n    public addItemToBasket(item: Product, quantity: number = 1): void {\r\n        if (this._shoppingCart.items.length > 0) {\r\n            const basketItem = this._shoppingCart.items.find((i) => i._id === item._id);\r\n\r\n            if (basketItem) {\r\n                basketItem.quantity += quantity;\r\n            } else {\r\n                this._shoppingCart.items.push({ ...item, quantity });\r\n            }\r\n        } else {\r\n            this._shoppingCart.items.push({ ...item, quantity });\r\n        }\r\n        this.update('add');\r\n    }\r\n\r\n    public updateItemInBasket(item: Product, quantity: number): void {\r\n        if (this._shoppingCart.items.length > 0) {\r\n            const basketItem = this._shoppingCart.items.find((i) => i._id === item._id);\r\n\r\n            if (basketItem) {\r\n                basketItem.quantity = quantity;\r\n            }\r\n\r\n            this.update('update');\r\n        }\r\n    }\r\n\r\n    public deleteItemFromBasket(item: Product): void {\r\n        if (this._shoppingCart.items.length > 0) {\r\n            const basketItem = this._shoppingCart.items.find((i) => i._id === item._id);\r\n\r\n            if (basketItem) {\r\n                this._shoppingCart.items.splice(this._shoppingCart.items.indexOf(basketItem), 1);\r\n            }\r\n\r\n            this.update('delete');\r\n        }\r\n    }\r\n\r\n    public get totalQuantity(): number {\r\n        return this._totalQuantity;\r\n    }\r\n\r\n    public get shoppingCart(): ShoppingCart {\r\n        return this._shoppingCart;\r\n    }\r\n\r\n    public get groupBasketItems(): Observable<Array<ShoppingCartItem>> {\r\n        return this.getGroupBasketItems();\r\n    }\r\n\r\n    public reset(): void {\r\n        this._shoppingCart = null;\r\n        this.retrieveCart();\r\n    }\r\n\r\n    private setTotalQuantity(): void {\r\n        from(this._shoppingCart.items)\r\n            .pipe(reduce((acc, cur) => acc + cur.quantity, 0))\r\n            .subscribe((total) => {\r\n                this._totalQuantity = total;\r\n            });\r\n    }\r\n\r\n    private getGroupBasketItems(): Observable<any> {\r\n        const sortedItems = this._shoppingCart.items.sort((a, b) => (a.lob > b.lob ? 1 : a.lob < b.lob ? -1 : 0));\r\n        const source = from(sortedItems);\r\n\r\n        return source.pipe(\r\n            groupBy(\r\n                (i) => i.lob,\r\n                null,\r\n                null,\r\n                () => new ReplaySubject()\r\n            ),\r\n            mergeMap((g) => g.pipe(toArray()))\r\n        );\r\n    }\r\n\r\n    private update(action?: string): void {\r\n        this.shoppingCartService.update(this._shoppingCart)\r\n            .pipe(\r\n                first()\r\n            )\r\n            .subscribe((_) => {\r\n                this.setTotalQuantity();\r\n                this.cartStateChange.next(true);                \r\n                switch (action) {\r\n                    case 'add':\r\n                        this.notificationService.showMessage(NotificationMessageKeys.ShoppingCartAdd);\r\n                        break;\r\n                    case 'delete':\r\n                        this.notificationService.showMessage(NotificationMessageKeys.ShoppingCartUpdate);\r\n                        break;\r\n                    case 'update':\r\n                        this.notificationService.showMessage(NotificationMessageKeys.ShoppingCartDelete);\r\n                        break;\r\n                }\r\n                \r\n            });\r\n    }\r\n\r\n    private retrieveCart(): void {\r\n        from([0])\r\n            .pipe(\r\n                delay(1000),\r\n                switchMap((_) => this.tokenService.xsrf()),\r\n                switchMap((_) => this.shoppingCartService.getShoppingCartForSession()),\r\n                first()\r\n            )\r\n            .subscribe((cart) => {\r\n                this._shoppingCart = cart;\r\n                this.setTotalQuantity();\r\n                this.cartStateChange.next(true);                \r\n            });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "shoppingCartService",
                        "type": "ShoppingCartService"
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "shoppingCartService",
                        "type": "ShoppingCartService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenService",
                        "type": "TokenService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "totalQuantity": {
                    "name": "totalQuantity",
                    "getSignature": {
                        "name": "totalQuantity",
                        "type": "number",
                        "returnType": "number",
                        "line": 67
                    }
                },
                "shoppingCart": {
                    "name": "shoppingCart",
                    "getSignature": {
                        "name": "shoppingCart",
                        "type": "",
                        "returnType": "ShoppingCart",
                        "line": 71
                    }
                },
                "groupBasketItems": {
                    "name": "groupBasketItems",
                    "getSignature": {
                        "name": "groupBasketItems",
                        "type": "",
                        "returnType": "Observable<Array<ShoppingCartItem>>",
                        "line": 75
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-3f4cfb0806d23afdd81c344b63b1307e",
            "file": "projects/common/src/lib/services/token.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "revoke",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "signin",
                    "args": [
                        {
                            "name": "mode",
                            "type": "string"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verify",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "xsrf",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TokenService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async verify(token: string): Promise<any> {\r\n        return await this.httpClient.post(`${this.baseUrl}/auth/token/verify`, { token: token }).toPromise();\r\n    }\r\n\r\n    public async refresh(): Promise<any> {\r\n        return await this.httpClient.post(`${this.baseUrl}/auth/token/refresh`, {}).toPromise();\r\n    }\r\n\r\n    public async revoke(): Promise<any> {\r\n        return await this.httpClient.post(`${this.baseUrl}/auth/token/revoke`, {}).toPromise();\r\n    }\r\n\r\n    public async signin(mode: string, isoCode: string, username: string, password: string): Promise<any> {\r\n        const base64Auth = btoa(`${mode}:${isoCode}:${username}:${password}`);\r\n        const headers = { Authorization: `Basic ${base64Auth}` };\r\n\r\n        return await this.httpClient\r\n            .post(\r\n                `${this.baseUrl}/auth/signin`,\r\n                {},\r\n                {\r\n                    headers: new HttpHeaders(headers),\r\n                }\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    public async xsrf(): Promise<void> {\r\n        await this.httpClient.get(`${this.baseUrl}/auth/token/xsrf`, {}).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        },
        {
            "name": "VerificationService",
            "id": "injectable-VerificationService-99b7c1334368247b43b62e8378d9e539",
            "file": "projects/common/src/lib/services/verification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "profileChangeOtp",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"Mobile\" | \"Email\""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"Mobile\" | \"Email\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendEmail",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendEmailOtp",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "newEmailID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newEmailID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resendMobileOtp",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "mobile",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mobile",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendEmail",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendOtp",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "mobile",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mobile",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyEmail",
                    "args": [
                        {
                            "name": "hash",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyEmailOtp",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "otp",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyMobileOtp",
                    "args": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType"
                        },
                        {
                            "name": "isoCode",
                            "type": "string"
                        },
                        {
                            "name": "mobile",
                            "type": "string"
                        },
                        {
                            "name": "otp",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "verificationType",
                            "type": "VerificationType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isoCode",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mobile",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyProfileChangeOtp",
                    "args": [
                        {
                            "name": "otp",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "\"Mobile\" | \"Email\"",
                            "defaultValue": "'Mobile'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 98,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "otp",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"Mobile\" | \"Email\"",
                            "defaultValue": "'Mobile'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyReCaptcha",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HttpService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { HttpService } from './http.service';\r\nimport { VerificationType } from '../types/verification-type';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class VerificationService extends HttpService {\r\n    constructor(\r\n        httpClient: HttpClient,\r\n        configService: ConfigService,\r\n        @Inject(PLATFORM_ID) platformId,\r\n        transferState: TransferState\r\n    ) {\r\n        super(httpClient, platformId, transferState, configService);\r\n    }\r\n\r\n    public async verifyMobileOtp(\r\n        verificationType: VerificationType,\r\n        isoCode: string,\r\n        mobile: string,\r\n        otp: string\r\n    ): Promise<void> {\r\n        return await this.executePost('verify_otp_mobile', `${this.baseUrl}/verify/mobile/otp`, {\r\n            verificationType,\r\n            isoCode,\r\n            mobile,\r\n            code: otp,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async verifyEmailOtp(\r\n        verificationType: VerificationType,\r\n        email: string,\r\n        otp: string\r\n    ): Promise<void> {\r\n        return await this.executePost('verify_otp_email', `${this.baseUrl}/verify/email/otp`, {\r\n            verificationType,\r\n            email,\r\n            code: otp,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async resendMobileOtp(verificationType: VerificationType, isoCode: string, mobile: string): Promise<void> {\r\n        return await this.executePost('verify_mobile_resend_otp', `${this.baseUrl}/verify/mobile/resend/otp`, {\r\n            verificationType,\r\n            isoCode,\r\n            mobile,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async resendEmailOtp(verificationType: VerificationType, email: string, newEmailID: string): Promise<void> {\r\n        return await this.executePost('verify_email_resend_otp', `${this.baseUrl}/verify/email/resend/otp`, {\r\n            verificationType,\r\n            email,\r\n            newEmailID\r\n        }).toPromise();\r\n    }\r\n\r\n    public async sendOtp(verificationType: VerificationType, isoCode: string, mobile: string): Promise<void> {\r\n        return await this.executePost('verify_send_otp', `${this.baseUrl}/verify/send/otp`, {\r\n            verificationType,\r\n            isoCode,\r\n            mobile,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async verifyEmail(hash: string): Promise<any> {\r\n        return await this.executePost('verify_email', `${this.baseUrl}/verify/email`, { key: hash }).toPromise();\r\n    }\r\n\r\n    public async resendEmail(verificationType: VerificationType, email: string): Promise<void> {\r\n        return await this.executePost('verify_resend_email', `${this.baseUrl}/verify/resend/email`, {\r\n            verificationType,\r\n            email,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async sendEmail(verificationType: VerificationType, email: string): Promise<void> {\r\n        return await this.executePost('verify_send_email', `${this.baseUrl}/verify/send/email`, {\r\n            verificationType,\r\n            email,\r\n        }).toPromise();\r\n    }\r\n\r\n    public async verifyReCaptcha(): Promise<any> {\r\n        return await this.executePost('verify_recaptcha', `${this.baseUrl}/verify/recaptcha`, {}).toPromise();\r\n    }\r\n\r\n    public async profileChangeOtp(type: 'Mobile' | 'Email'): Promise<void> {\r\n        await this.httpClient.post(`${this.baseUrl}/verify/send/profile/${type}`, {}).toPromise();\r\n    }\r\n\r\n    public async verifyProfileChangeOtp(otp: string, type: 'Mobile' | 'Email' = 'Mobile'): Promise<void> {\r\n        await this.httpClient.post(`${this.baseUrl}/verify/otp/profile/${otp}/${type}`, {}).toPromise();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "platformId",
                        "type": ""
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HttpService",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "BaseAccountComponent",
            "id": "class-BaseAccountComponent-8806e040b11feb27fc8435aa8a3ba117",
            "file": "projects/customer/src/lib/components/account/base-account.component.ts",
            "type": "class",
            "sourceCode": "import { Router } from \"@angular/router\";\r\nimport { BaseComponent, DataStoreService, HistoryService, MenuStateService, RouteKeys } from \"@common/src/public-api\";\r\n\r\nexport class BaseAccountComponent extends BaseComponent {\r\n    constructor (\r\n        private historyService: HistoryService,\r\n        router: Router,\r\n        window: Window,\r\n        menuStateService?: MenuStateService,\r\n        dataStoreService?: DataStoreService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService)\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.historyService.clear();\r\n        const bc = this.breadcrumbs;\r\n\r\n        if (bc && bc.length > 0) {\r\n            for (let i = 0; i < bc.length; i++) {\r\n                if (bc[i].key) {\r\n                    this.historyService.push({ url: RouteKeys[bc[i].key] });\r\n                }\r\n            }\r\n        }\r\n\r\n        await Promise.resolve();\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "optional": true
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "BaseComponent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CookieKeys",
            "id": "class-CookieKeys-be8b0e3617dca0507fa6bbac501e97a7",
            "file": "projects/common/src/lib/constants/cookie.keys.ts",
            "type": "class",
            "sourceCode": "export class CookieKeys {\r\n    public static get LocationCookie(): string {\r\n        return 'loc';\r\n    }\r\n}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "LocationCookie": {
                    "name": "LocationCookie",
                    "getSignature": {
                        "name": "LocationCookie",
                        "type": "string",
                        "returnType": "string",
                        "line": 2
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpService",
            "id": "class-HttpService-3f83b4290d8211893bc7efa34cd877a9",
            "file": "projects/common/src/lib/services/http.service.ts",
            "type": "class",
            "sourceCode": "import { makeStateKey, TransferState } from '@angular/platform-browser';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, delay } from 'rxjs/operators';\r\n\r\nimport { ConfigService } from './config.service';\r\nimport { AuthState } from './auth.state';\r\nimport { IConfiguration } from '../types/configuration';\r\n\r\nexport abstract class HttpService {\r\n    constructor(\r\n        protected httpClient: HttpClient,\r\n        private platformId: any,\r\n        private transferState: TransferState,\r\n        private configService: ConfigService\r\n    ) {}\r\n\r\n    executeGet(transferStateKey: string, url: string): Observable<any> {\r\n        return this.execute(transferStateKey, () => this.httpClient.get(url).pipe(delay(this.delayTime)));\r\n    }\r\n\r\n    executePost(transferStateKey: string, url: string, postData: any, options?: any): Observable<any> {\r\n        return this.execute(transferStateKey, \r\n            () => this.httpClient.post(url, postData, options).pipe(delay(this.delayTime)));\r\n    }\r\n\r\n    protected get configuration(): IConfiguration {\r\n        return this.configService.getConfiguration();\r\n    }\r\n\r\n    protected get baseUrl(): string {\r\n        return (this.configuration.isDcokerDeployed ? this.configuration.apiEndpoint : this.configuration.nonDockerApiEndpoint);\r\n    }\r\n\r\n    protected get delayTime(): number {\r\n        return AuthState.Refreshing ? 500 : 0;\r\n    }\r\n\r\n    private execute(transferStateKey: string, func: () => Observable<any>): Observable<any> {\r\n        const STATE_KEY = makeStateKey<any>(transferStateKey);\r\n\r\n        if (this.transferState.hasKey(STATE_KEY)) {\r\n            const data = this.transferState.get<any>(STATE_KEY, null);\r\n\r\n            this.transferState.remove(STATE_KEY);\r\n\r\n            return of(data);\r\n        } else {\r\n            return func().pipe(\r\n                tap((data) => {\r\n                    if (isPlatformServer(this.platformId)) {\r\n                        this.transferState.set(STATE_KEY, data);\r\n                    }\r\n                })\r\n            );\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "platformId",
                        "type": "any"
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transferState",
                        "type": "TransferState",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "func",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeGet",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executePost",
                    "args": [
                        {
                            "name": "transferStateKey",
                            "type": "string"
                        },
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "postData",
                            "type": "any"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "transferStateKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "configuration": {
                    "name": "configuration",
                    "getSignature": {
                        "name": "configuration",
                        "type": "",
                        "returnType": "IConfiguration",
                        "line": 28
                    }
                },
                "baseUrl": {
                    "name": "baseUrl",
                    "getSignature": {
                        "name": "baseUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                },
                "delayTime": {
                    "name": "delayTime",
                    "getSignature": {
                        "name": "delayTime",
                        "type": "number",
                        "returnType": "number",
                        "line": 36
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NotificationMessageKeys",
            "id": "class-NotificationMessageKeys-9d34b6aff0524fadfe4ba0a522377328",
            "file": "projects/common/src/lib/constants/notification.message.keys.ts",
            "type": "class",
            "sourceCode": "export class NotificationMessageKeys {\r\n    public static get GenericError(): string {\r\n        return 'genericError';\r\n    }\r\n\r\n    public static get OtpResend(): string {\r\n        return 'otpResend';\r\n    }\r\n\r\n    public static get Unauthorized(): string {\r\n        return 'unauthorized';\r\n    }\r\n\r\n    public static get ShoppingCartAdd(): string {\r\n        return 'shoppingCartAdd';\r\n    }\r\n\r\n    public static get ShoppingCartDelete(): string {\r\n        return 'shoppingCartDelete';\r\n    }\r\n\r\n    public static get ShoppingCartUpdate(): string {\r\n        return 'shoppingCartUpdate';\r\n    }\r\n\r\n    public static get AddressDeleted(): string {\r\n        return 'addressdelete';\r\n    }\r\n\r\n    public static get OrderCancellationError(): string {\r\n        return 'orderCancellationError'\r\n    }\r\n}",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "GenericError": {
                    "name": "GenericError",
                    "getSignature": {
                        "name": "GenericError",
                        "type": "string",
                        "returnType": "string",
                        "line": 2
                    }
                },
                "OtpResend": {
                    "name": "OtpResend",
                    "getSignature": {
                        "name": "OtpResend",
                        "type": "string",
                        "returnType": "string",
                        "line": 6
                    }
                },
                "Unauthorized": {
                    "name": "Unauthorized",
                    "getSignature": {
                        "name": "Unauthorized",
                        "type": "string",
                        "returnType": "string",
                        "line": 10
                    }
                },
                "ShoppingCartAdd": {
                    "name": "ShoppingCartAdd",
                    "getSignature": {
                        "name": "ShoppingCartAdd",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                },
                "ShoppingCartDelete": {
                    "name": "ShoppingCartDelete",
                    "getSignature": {
                        "name": "ShoppingCartDelete",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                },
                "ShoppingCartUpdate": {
                    "name": "ShoppingCartUpdate",
                    "getSignature": {
                        "name": "ShoppingCartUpdate",
                        "type": "string",
                        "returnType": "string",
                        "line": 22
                    }
                },
                "AddressDeleted": {
                    "name": "AddressDeleted",
                    "getSignature": {
                        "name": "AddressDeleted",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                },
                "OrderCancellationError": {
                    "name": "OrderCancellationError",
                    "getSignature": {
                        "name": "OrderCancellationError",
                        "type": "string",
                        "returnType": "string",
                        "line": 30
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResourceKeys",
            "id": "class-ResourceKeys-a6ca6a3cd7e7982bc49d66fc01e31637",
            "file": "projects/common/src/lib/constants/resource.keys.ts",
            "type": "class",
            "sourceCode": "import { ReturnStatement } from \"@angular/compiler\";\r\n\r\nexport class ResourceKeys {\r\n    public static get SignIn(): string {\r\n        return 'login';\r\n    }\r\n\r\n    public static get Checkout(): string {\r\n        return 'checkout';\r\n    }\r\n\r\n    public static get NewCustomer(): string {\r\n        return 'new-customer';\r\n    }\r\n\r\n    public static get OtpVerification(): string {\r\n        return 'otp-verify';\r\n    }\r\n\r\n    public static get EmailVerification(): string {\r\n        return 'email-verify';\r\n    }\r\n\r\n    public static get ForgotPassword(): string {\r\n        return 'forgot-password';\r\n    }\r\n\r\n    public static get PasswordReset(): string {\r\n        return 'password-reset';\r\n    }\r\n\r\n    public static get Content(): string {\r\n        return 'content';\r\n    }\r\n\r\n    public static get ShoppingCart(): string {\r\n        return 'shopping-cart';\r\n    }\r\n\r\n    public static get Notifications(): string {\r\n        return 'notifications';\r\n    }\r\n\r\n    public static get PaymentSuccess(): string {\r\n        return \"payment-success\";\r\n    }\r\n\r\n    public static get PaymentFailure(): string {\r\n        return \"payment-failure\";\r\n    }\r\n\r\n    public static get Header(): string {\r\n        return 'header';\r\n    }\r\n\r\n    public static get Account(): string {\r\n        return 'account';\r\n    }\r\n\r\n    public static get AccountOrders(): string {\r\n        return 'orders';\r\n    }\r\n\r\n    public static get AccountOrderDetail(): string {\r\n        return 'order-detail';\r\n    }\r\n\r\n    public static get BurgerMenu(): string {\r\n        return 'burger-menu';\r\n    }\r\n\r\n    public static get ViewReview(): string {\r\n        return 'view-review';\r\n    }\r\n\r\n    public static get AddEditReview(): string {\r\n        return 'add-edit-review';\r\n    }\r\n\r\n    public static get MultiItemReview(): string {\r\n        return 'multi-item-review';\r\n    }\r\n\r\n    public static get AccountProfile(): string {\r\n        return \"account-profile\";\r\n    }\r\n\r\n    public static get AccountAddresses(): string {\r\n        return \"account-address\";\r\n    }\r\n\r\n    public static get AccountAddressAdd(): string {\r\n        return \"account-address-add\"\r\n    }\r\n}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "SignIn": {
                    "name": "SignIn",
                    "getSignature": {
                        "name": "SignIn",
                        "type": "string",
                        "returnType": "string",
                        "line": 4
                    }
                },
                "Checkout": {
                    "name": "Checkout",
                    "getSignature": {
                        "name": "Checkout",
                        "type": "string",
                        "returnType": "string",
                        "line": 8
                    }
                },
                "NewCustomer": {
                    "name": "NewCustomer",
                    "getSignature": {
                        "name": "NewCustomer",
                        "type": "string",
                        "returnType": "string",
                        "line": 12
                    }
                },
                "OtpVerification": {
                    "name": "OtpVerification",
                    "getSignature": {
                        "name": "OtpVerification",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                },
                "EmailVerification": {
                    "name": "EmailVerification",
                    "getSignature": {
                        "name": "EmailVerification",
                        "type": "string",
                        "returnType": "string",
                        "line": 20
                    }
                },
                "ForgotPassword": {
                    "name": "ForgotPassword",
                    "getSignature": {
                        "name": "ForgotPassword",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                },
                "PasswordReset": {
                    "name": "PasswordReset",
                    "getSignature": {
                        "name": "PasswordReset",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                },
                "Content": {
                    "name": "Content",
                    "getSignature": {
                        "name": "Content",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                },
                "ShoppingCart": {
                    "name": "ShoppingCart",
                    "getSignature": {
                        "name": "ShoppingCart",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                },
                "Notifications": {
                    "name": "Notifications",
                    "getSignature": {
                        "name": "Notifications",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "PaymentSuccess": {
                    "name": "PaymentSuccess",
                    "getSignature": {
                        "name": "PaymentSuccess",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                },
                "PaymentFailure": {
                    "name": "PaymentFailure",
                    "getSignature": {
                        "name": "PaymentFailure",
                        "type": "string",
                        "returnType": "string",
                        "line": 48
                    }
                },
                "Header": {
                    "name": "Header",
                    "getSignature": {
                        "name": "Header",
                        "type": "string",
                        "returnType": "string",
                        "line": 52
                    }
                },
                "Account": {
                    "name": "Account",
                    "getSignature": {
                        "name": "Account",
                        "type": "string",
                        "returnType": "string",
                        "line": 56
                    }
                },
                "AccountOrders": {
                    "name": "AccountOrders",
                    "getSignature": {
                        "name": "AccountOrders",
                        "type": "string",
                        "returnType": "string",
                        "line": 60
                    }
                },
                "AccountOrderDetail": {
                    "name": "AccountOrderDetail",
                    "getSignature": {
                        "name": "AccountOrderDetail",
                        "type": "string",
                        "returnType": "string",
                        "line": 64
                    }
                },
                "BurgerMenu": {
                    "name": "BurgerMenu",
                    "getSignature": {
                        "name": "BurgerMenu",
                        "type": "string",
                        "returnType": "string",
                        "line": 68
                    }
                },
                "ViewReview": {
                    "name": "ViewReview",
                    "getSignature": {
                        "name": "ViewReview",
                        "type": "string",
                        "returnType": "string",
                        "line": 72
                    }
                },
                "AddEditReview": {
                    "name": "AddEditReview",
                    "getSignature": {
                        "name": "AddEditReview",
                        "type": "string",
                        "returnType": "string",
                        "line": 76
                    }
                },
                "MultiItemReview": {
                    "name": "MultiItemReview",
                    "getSignature": {
                        "name": "MultiItemReview",
                        "type": "string",
                        "returnType": "string",
                        "line": 80
                    }
                },
                "AccountProfile": {
                    "name": "AccountProfile",
                    "getSignature": {
                        "name": "AccountProfile",
                        "type": "string",
                        "returnType": "string",
                        "line": 84
                    }
                },
                "AccountAddresses": {
                    "name": "AccountAddresses",
                    "getSignature": {
                        "name": "AccountAddresses",
                        "type": "string",
                        "returnType": "string",
                        "line": 88
                    }
                },
                "AccountAddressAdd": {
                    "name": "AccountAddressAdd",
                    "getSignature": {
                        "name": "AccountAddressAdd",
                        "type": "string",
                        "returnType": "string",
                        "line": 92
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Result",
            "id": "class-Result-3efc906005b1ca5e4ac47001a5cf49e1",
            "file": "projects/search/src/lib/types/result.ts",
            "type": "class",
            "sourceCode": "export class Result<T> {\r\n    items: Array<T>;\r\n    count: number\r\n}\r\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "items",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RetryInterceptor",
            "id": "class-RetryInterceptor-39ad3de89c9bda9c6829c2e806a73f0b",
            "file": "projects/common/src/lib/interceptors/retry.interceptor.ts",
            "type": "class",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { shareReplay } from \"rxjs/operators\";\r\n\r\nimport { retry } from '../functions/retry';\r\n\r\nexport class RetryInterceptor implements HttpInterceptor {\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(req).pipe(retry(500), shareReplay());\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>"
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpInterceptor"
            ]
        },
        {
            "name": "RouteKeys",
            "id": "class-RouteKeys-f43ef96b2248784a41e864a8c83080b8",
            "file": "projects/common/src/lib/constants/route.keys.ts",
            "type": "class",
            "sourceCode": "export class RouteKeys {\r\n    public static get CheckoutDeliveryOptions(): string {\r\n        return '../checkout/delivery/options';\r\n    }\r\n\r\n    public static get CheckoutDeliverySlots(): string {\r\n        return '../checkout/delivery/slots';\r\n    }\r\n\r\n    public static get CheckoutAddressAdd(): string {\r\n        return '../checkout/address/add';\r\n    }\r\n\r\n    public static get CheckoutPreview(): string {\r\n        return '../checkout/preview';\r\n    }\r\n\r\n    public static get Signin(): string {\r\n        return '/signin';\r\n    }\r\n\r\n    public static get Home(): string {\r\n        return '../home';\r\n    }\r\n\r\n    public static get Checkout(): string {\r\n        return 'checkout';\r\n    }\r\n\r\n    public static get ShoppingCart(): string {\r\n        return '/shoppingcart';\r\n    }\r\n\r\n    public static get Register(): string {\r\n        return '../customer/register';\r\n    }\r\n\r\n    public static get PaymentSuccess(): string {\r\n        return '../checkout/payment/success';\r\n    }\r\n\r\n    public static get PaymentFailure(): string {\r\n        return '../checkout/payment/failure';\r\n    }\r\n\r\n    public static get PaymentCancel(): string {\r\n        return '../checkout/payment/cancel';\r\n    }\r\n\r\n    public static get ErrorFatal(): string {\r\n        return '/error/fatal';\r\n    }\r\n\r\n    public static get ErrorPayment(): string {\r\n        return '/error/payment';\r\n    }\r\n\r\n    public static get VerifyOtp(): string {\r\n        return '/customer/verifyotp';\r\n    }\r\n\r\n    public static get ForgotPassword(): string {\r\n        return '/customer/forgotpassword';\r\n    }\r\n\r\n    public static get PasswordReset(): string {\r\n        return '/customer/passwordreset';\r\n    }\r\n\r\n    public static get ProductDetail(): string {\r\n        return '/pantry/detail/';\r\n    }\r\n\r\n    public static get Pantry(): string {\r\n        return '/pantry';\r\n    }\r\n\r\n    public static get ProductList(): string {\r\n        return '/pantry/list/';\r\n    }\r\n\r\n    public static get NotSupportedOrientation(): string {\r\n        return '/notsupportedorientation';\r\n    }\r\n\r\n    public static get AccountHome(): string {\r\n        return '/account/home';\r\n    }\r\n\r\n    public static get AccountOrders(): string {\r\n        return '/account/orders';\r\n    }\r\n\r\n    public static get AccountProfile(): string {\r\n        return '/account/profile';\r\n    }\r\n\r\n    public static get AccountOrderDetail(): string {\r\n        return '/account/order/';\r\n    }\r\n\r\n    public static get AccountLoyaltyPoints(): string {\r\n        return '/account/loyaltypoints';\r\n    }\r\n\r\n    public static get AccountProfileAccess(): string {\r\n        return '/account/profile/access'\r\n    }\r\n\r\n    public static get AccountAddresses(): string {\r\n        return '/account/addresses'\r\n    }\r\n}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "CheckoutDeliveryOptions": {
                    "name": "CheckoutDeliveryOptions",
                    "getSignature": {
                        "name": "CheckoutDeliveryOptions",
                        "type": "string",
                        "returnType": "string",
                        "line": 2
                    }
                },
                "CheckoutDeliverySlots": {
                    "name": "CheckoutDeliverySlots",
                    "getSignature": {
                        "name": "CheckoutDeliverySlots",
                        "type": "string",
                        "returnType": "string",
                        "line": 6
                    }
                },
                "CheckoutAddressAdd": {
                    "name": "CheckoutAddressAdd",
                    "getSignature": {
                        "name": "CheckoutAddressAdd",
                        "type": "string",
                        "returnType": "string",
                        "line": 10
                    }
                },
                "CheckoutPreview": {
                    "name": "CheckoutPreview",
                    "getSignature": {
                        "name": "CheckoutPreview",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                },
                "Signin": {
                    "name": "Signin",
                    "getSignature": {
                        "name": "Signin",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                },
                "Home": {
                    "name": "Home",
                    "getSignature": {
                        "name": "Home",
                        "type": "string",
                        "returnType": "string",
                        "line": 22
                    }
                },
                "Checkout": {
                    "name": "Checkout",
                    "getSignature": {
                        "name": "Checkout",
                        "type": "string",
                        "returnType": "string",
                        "line": 26
                    }
                },
                "ShoppingCart": {
                    "name": "ShoppingCart",
                    "getSignature": {
                        "name": "ShoppingCart",
                        "type": "string",
                        "returnType": "string",
                        "line": 30
                    }
                },
                "Register": {
                    "name": "Register",
                    "getSignature": {
                        "name": "Register",
                        "type": "string",
                        "returnType": "string",
                        "line": 34
                    }
                },
                "PaymentSuccess": {
                    "name": "PaymentSuccess",
                    "getSignature": {
                        "name": "PaymentSuccess",
                        "type": "string",
                        "returnType": "string",
                        "line": 38
                    }
                },
                "PaymentFailure": {
                    "name": "PaymentFailure",
                    "getSignature": {
                        "name": "PaymentFailure",
                        "type": "string",
                        "returnType": "string",
                        "line": 42
                    }
                },
                "PaymentCancel": {
                    "name": "PaymentCancel",
                    "getSignature": {
                        "name": "PaymentCancel",
                        "type": "string",
                        "returnType": "string",
                        "line": 46
                    }
                },
                "ErrorFatal": {
                    "name": "ErrorFatal",
                    "getSignature": {
                        "name": "ErrorFatal",
                        "type": "string",
                        "returnType": "string",
                        "line": 50
                    }
                },
                "ErrorPayment": {
                    "name": "ErrorPayment",
                    "getSignature": {
                        "name": "ErrorPayment",
                        "type": "string",
                        "returnType": "string",
                        "line": 54
                    }
                },
                "VerifyOtp": {
                    "name": "VerifyOtp",
                    "getSignature": {
                        "name": "VerifyOtp",
                        "type": "string",
                        "returnType": "string",
                        "line": 58
                    }
                },
                "ForgotPassword": {
                    "name": "ForgotPassword",
                    "getSignature": {
                        "name": "ForgotPassword",
                        "type": "string",
                        "returnType": "string",
                        "line": 62
                    }
                },
                "PasswordReset": {
                    "name": "PasswordReset",
                    "getSignature": {
                        "name": "PasswordReset",
                        "type": "string",
                        "returnType": "string",
                        "line": 66
                    }
                },
                "ProductDetail": {
                    "name": "ProductDetail",
                    "getSignature": {
                        "name": "ProductDetail",
                        "type": "string",
                        "returnType": "string",
                        "line": 70
                    }
                },
                "Pantry": {
                    "name": "Pantry",
                    "getSignature": {
                        "name": "Pantry",
                        "type": "string",
                        "returnType": "string",
                        "line": 74
                    }
                },
                "ProductList": {
                    "name": "ProductList",
                    "getSignature": {
                        "name": "ProductList",
                        "type": "string",
                        "returnType": "string",
                        "line": 78
                    }
                },
                "NotSupportedOrientation": {
                    "name": "NotSupportedOrientation",
                    "getSignature": {
                        "name": "NotSupportedOrientation",
                        "type": "string",
                        "returnType": "string",
                        "line": 82
                    }
                },
                "AccountHome": {
                    "name": "AccountHome",
                    "getSignature": {
                        "name": "AccountHome",
                        "type": "string",
                        "returnType": "string",
                        "line": 86
                    }
                },
                "AccountOrders": {
                    "name": "AccountOrders",
                    "getSignature": {
                        "name": "AccountOrders",
                        "type": "string",
                        "returnType": "string",
                        "line": 90
                    }
                },
                "AccountProfile": {
                    "name": "AccountProfile",
                    "getSignature": {
                        "name": "AccountProfile",
                        "type": "string",
                        "returnType": "string",
                        "line": 94
                    }
                },
                "AccountOrderDetail": {
                    "name": "AccountOrderDetail",
                    "getSignature": {
                        "name": "AccountOrderDetail",
                        "type": "string",
                        "returnType": "string",
                        "line": 98
                    }
                },
                "AccountLoyaltyPoints": {
                    "name": "AccountLoyaltyPoints",
                    "getSignature": {
                        "name": "AccountLoyaltyPoints",
                        "type": "string",
                        "returnType": "string",
                        "line": 102
                    }
                },
                "AccountProfileAccess": {
                    "name": "AccountProfileAccess",
                    "getSignature": {
                        "name": "AccountProfileAccess",
                        "type": "string",
                        "returnType": "string",
                        "line": 106
                    }
                },
                "AccountAddresses": {
                    "name": "AccountAddresses",
                    "getSignature": {
                        "name": "AccountAddresses",
                        "type": "string",
                        "returnType": "string",
                        "line": 110
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServiceLocator",
            "id": "class-ServiceLocator-14714d8dc5455f0d62598c6fdd6325f6",
            "file": "projects/common/src/lib/service.locator.ts",
            "type": "class",
            "sourceCode": "import { Injector } from '@angular/core';\r\n\r\nexport class ServiceLocator {\r\n    private static _injector: Injector;\r\n\r\n    public static set Injector(injector: Injector) {\r\n        if (!ServiceLocator._injector) {\r\n            ServiceLocator._injector = injector;\r\n        }\r\n    }\r\n\r\n    public static get Injector(): Injector {\r\n        return ServiceLocator._injector;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "_injector",
                    "type": "Injector",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        112,
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "Injector": {
                    "name": "Injector",
                    "setSignature": {
                        "name": "Injector",
                        "type": "void",
                        "args": [
                            {
                                "name": "injector",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 6,
                        "jsdoctags": [
                            {
                                "name": "injector",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "Injector",
                        "type": "",
                        "returnType": "Injector",
                        "line": 12
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WindowRef",
            "id": "class-WindowRef-07008a4b6f531106636863a47de02806",
            "file": "projects/common/src/lib/services/window.service.ts",
            "type": "class",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID, Injectable } from '@angular/core';\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken');\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n    get nativeWindow(): Window | Object {\r\n        throw new Error('Not implemented.');\r\n    }\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\n@Injectable()\r\nexport class BrowserWindowRef extends WindowRef {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    get nativeWindow(): Window | Object {\r\n        return window;\r\n    }\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\r\n    if (isPlatformBrowser(platformId)) {\r\n        return browserWindowRef.nativeWindow;\r\n    }\r\n    return new Object();\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n    provide: WindowRef,\r\n    useClass: BrowserWindowRef,\r\n};\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n    provide: WINDOW,\r\n    useFactory: windowFactory,\r\n    deps: [WindowRef, PLATFORM_ID],\r\n};\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "nativeWindow": {
                    "name": "nativeWindow",
                    "getSignature": {
                        "name": "nativeWindow",
                        "type": "",
                        "returnType": "Window | Object",
                        "line": 9
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AutoCompleteContentDirective",
            "id": "directive-AutoCompleteContentDirective-c6e5e5c990c5cabf6998895b6a562145",
            "file": "projects/common/src/lib/directives/auto-complete-content.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Inject, Input, TemplateRef } from '@angular/core';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\n\r\nimport { BaseComponent } from '../component/base.component';\r\nimport { AutoCompleteComponent } from '../component/common/input/auto-complete/auto-complete.component';\r\nimport { WINDOW } from '../services/window.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Directive({\r\n    selector: '[uiAutoCompleteContent]',\r\n})\r\nexport class AutoCompleteContentDirective extends BaseComponent {\r\n    @Input() autoCompleteComponent: AutoCompleteComponent;\r\n    private overlayRef: OverlayRef;\r\n\r\n    constructor (\r\n        public tpl: TemplateRef<any>,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n}",
            "selector": "[uiAutoCompleteContent]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "autoCompleteComponent",
                    "line": 13,
                    "type": "AutoCompleteComponent"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "tpl",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tpl",
                        "type": "TemplateRef<any>"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "tpl",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "AutoCompleteDirective",
            "id": "directive-AutoCompleteDirective-7c6ca9c8a07f88a24d445b09eb5ebef4",
            "file": "projects/common/src/lib/directives/auto-complete.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Inject, Input, ViewContainerRef } from '@angular/core';\r\nimport { ConnectionPositionPair, Overlay, OverlayOutsideClickDispatcher, OverlayRef } from '@angular/cdk/overlay';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { AbstractControl, NgControl } from '@angular/forms';\r\nimport { fromEvent } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\n\r\nimport { BaseComponent } from '../component/base.component';\r\nimport { AutoCompleteComponent } from '../component/common/input/auto-complete/auto-complete.component';\r\nimport { WINDOW } from '../services/window.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Directive({\r\n    selector: '[uiAutoComplete]',\r\n})\r\nexport class AutoCompleteDirective extends BaseComponent {\r\n    @Input() autoComplete: AutoCompleteComponent;\r\n    private overlayRef: OverlayRef;\r\n\r\n    constructor(\r\n        private host: ElementRef<HTMLInputElement>,\r\n        private ngControl: NgControl,\r\n        private vcr: ViewContainerRef,\r\n        private overlay: Overlay,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        fromEvent(this.origin, 'focus')\r\n            .pipe(takeUntil(this.$destroy))\r\n            .subscribe(() => {\r\n                this.openDropdown();\r\n                this.autoComplete.optionsClick()\r\n                    .pipe(takeUntil(this.overlayRef.detachments()))\r\n                    .subscribe((value: string) => {\r\n                        this.control.setValue(value);\r\n                        this.close()\r\n                    })\r\n            })\r\n    }\r\n\r\n    get control(): AbstractControl {\r\n        return this.ngControl.control;\r\n    }\r\n\r\n    get origin(): HTMLInputElement {\r\n        return this.host.nativeElement;\r\n    }\r\n\r\n    openDropdown(): void {\r\n        this.overlayRef = this.overlay.create({\r\n            width: this.origin.offsetWidth,\r\n            maxHeight: 40*3,\r\n            backdropClass: '',\r\n            scrollStrategy: this.overlay.scrollStrategies.reposition(),\r\n            positionStrategy: this.getOverlayPosition()\r\n        });\r\n\r\n        const template = new TemplatePortal(this.autoComplete.rootTemplate, this.vcr);\r\n        this.overlayRef.attach(template);\r\n        overlayClickOutside(this.overlayRef, this.origin).subscribe(() => this.close());\r\n    }\r\n\r\n    private close(): void {\r\n        this.overlayRef.detach();\r\n        this.overlayRef = null;\r\n    }\r\n\r\n    private getOverlayPosition(): any {\r\n        const positions = [\r\n            new ConnectionPositionPair(\r\n                { originX: 'start', originY: 'bottom' },\r\n                { overlayX: 'start', overlayY: 'top' }\r\n            )\r\n        ];\r\n\r\n        return this.overlay\r\n            .position()\r\n            .flexibleConnectedTo(this.origin)\r\n            .withPositions(positions)\r\n            .withFlexibleDimensions(false)\r\n            .withPush(false);\r\n    }\r\n}\r\n\r\nexport function overlayClickOutside(overlayRef: OverlayRef, origin: HTMLElement): any {\r\n    return fromEvent<MouseEvent>(document, 'click')\r\n        .pipe(\r\n            filter(event => {\r\n                const clickTarget = event.target as HTMLElement;\r\n                const notOrigin = clickTarget !== origin;\r\n                const notOverlay = !!overlayRef && (overlayRef.overlayElement.contains(clickTarget) === false);\r\n                return notOrigin && notOverlay;\r\n            }),\r\n            takeUntil(overlayRef.detachments())\r\n        );\r\n}",
            "selector": "[uiAutoComplete]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "autoComplete",
                    "line": 17,
                    "type": "AutoCompleteComponent"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "openDropdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef<HTMLInputElement>"
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "host",
                        "type": "ElementRef<HTMLInputElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 45
                    }
                },
                "origin": {
                    "name": "origin",
                    "getSignature": {
                        "name": "origin",
                        "type": "",
                        "returnType": "HTMLInputElement",
                        "line": 49
                    }
                }
            }
        },
        {
            "name": "CarouselItemDirective",
            "id": "directive-CarouselItemDirective-f6a2e0f021c710fc40554bb7f7a5fd7f",
            "file": "projects/common/src/lib/directives/carousel-item.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: '[uiCarouselItem]'\r\n})\r\nexport class CarouselItemDirective {\r\n    constructor (\r\n        public tmpl: TemplateRef<any>\r\n    ) {}\r\n}\r\n",
            "selector": "[uiCarouselItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "tmpl",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tmpl",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "tmpl",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CarouselItemElement",
            "id": "directive-CarouselItemElement-05335a3b54dabb69bff3093c1f65ac40",
            "file": "projects/common/src/lib/component/carousel/carousel.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, style } from \"@angular/animations\";\r\nimport { AfterViewInit, Component, ContentChildren, Directive, ElementRef, HostBinding, HostListener, Inject, Input, QueryList, ViewChild, ViewChildren } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { interval } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { CarouselItemDirective } from \"../../directives/carousel-item.directive\";\r\nimport { WINDOW } from \"../../services/window.service\";\r\nimport { BaseComponent } from \"../base.component\";\r\n\r\n@Directive({\r\n    selector: '.carousel-item'\r\n})\r\nexport class CarouselItemElement {\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-carousel-component',\r\n    exportAs: 'carousel',\r\n    templateUrl: './carousel.component.html',\r\n    styleUrls: ['./carousel.component.scss']\r\n})\r\nexport class CarouselComponent extends BaseComponent implements AfterViewInit {\r\n    private player : AnimationPlayer;\r\n    private itemWidth: number;\r\n    private moveFromLastToFirst: boolean = false;\r\n\r\n    @ContentChildren(CarouselItemDirective) items: QueryList<CarouselItemDirective>;\r\n    @ViewChildren(CarouselItemElement, { read: ElementRef }) private itemElements: QueryList<ElementRef>;\r\n    @ViewChild('carousel') private carousel: ElementRef;\r\n    @Input() timing: string = '500ms ease-in';\r\n    @Input() showControls: boolean = true;\r\n    @Input() enableTimer: boolean = true;\r\n    @Input() setWidth: boolean = true;\r\n\r\n    carouselWrapperStyle = {};\r\n    currentSlide: number = 0;\r\n\r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        private animationBuilder: AnimationBuilder\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        if (this.setWidth) {\r\n            this.setItemWidth();\r\n        }\r\n        \r\n        interval(5000).pipe(takeUntil(this.$destroy)).subscribe(async _ => {\r\n            if (this.currentSlide >= this.items.length - 1) {\r\n                this.currentSlide = -1;\r\n                this.moveFromLastToFirst = true;\r\n            }\r\n            this.next();\r\n        });\r\n        \r\n        Promise.resolve();\r\n    }\r\n\r\n    public next(): void {\r\n        if (this.currentSlide + 1 === this.items.length) {\r\n            return;\r\n        }\r\n        this.currentSlide = (this.currentSlide + 1) % this.items.length;\r\n        this.play();\r\n    }\r\n\r\n    public previous(): void {\r\n        if (this.currentSlide === 0) {\r\n            return;\r\n        }\r\n        this.currentSlide = ((this.currentSlide - 1) + this.items.length) % this.items.length;\r\n        this.play();\r\n    }\r\n\r\n    private buildAnimation(offset: number): AnimationFactory {\r\n        const timing = (this.moveFromLastToFirst ? '1ms ease-in' : this.timing);\r\n        this.moveFromLastToFirst = false;\r\n\r\n        return this.animationBuilder.build([\r\n            animate(timing, style({ transform : `translateX(-${offset}px)`}))\r\n        ]);\r\n    }\r\n\r\n    private play(): void {\r\n        const offset = this.currentSlide * this.itemWidth;\r\n        if (!isNaN(offset)) {\r\n            const animation: AnimationFactory = this.buildAnimation(offset);\r\n            this.player = animation.create(this.carousel.nativeElement);\r\n            this.player.play();\r\n        }        \r\n    }\r\n\r\n    private setItemWidth(): void {\r\n        this.itemWidth = this.itemElements.first.nativeElement.getBoundingClientRect().width;\r\n        this.carouselWrapperStyle = {\r\n            width: `${this.itemWidth}px`\r\n        }\r\n    }\r\n}",
            "selector": ".carousel-item",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "CheckAllInputsValidDirective",
            "id": "directive-CheckAllInputsValidDirective-ffa4b735188ddaddfe83ae349e77eca5",
            "file": "projects/common/src/lib/directives/check-all-inputs-valid.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, AfterViewInit, Inject } from '@angular/core';\r\nimport { BaseComponent } from '../component/base.component';\r\nimport { Subject, timer } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { WINDOW } from '../services/window.service';\r\n\r\n@Directive({\r\n    selector: '[uiCheckAllInputsValid]',\r\n})\r\nexport class CheckAllInputsValidDirective extends BaseComponent implements AfterViewInit {\r\n    private controls: Array<HTMLElement> = [];\r\n    private changes: any;\r\n    validationStateChange: Subject<boolean> = new Subject<boolean>();\r\n\r\n    constructor(\r\n        private el: ElementRef,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        await this.buildControlList(this.el.nativeElement);\r\n        this.changes = timer(250, 1000);\r\n        this.changes.pipe(takeUntil(this.$destroy)).subscribe((v) => {\r\n            this.validationStateChange.next(\r\n                this.controls.findIndex((c) => c.className.indexOf('ng-invalid') >= 0) === -1\r\n            );\r\n        });\r\n    }\r\n\r\n    private async buildControlList(nativeElement: HTMLElement): Promise<void> {\r\n        if (!(nativeElement instanceof HTMLSelectElement) && nativeElement && nativeElement.hasChildNodes()) {\r\n            for (let i = 0; i < nativeElement.children.length; i++) {\r\n                if (nativeElement.children[i] instanceof HTMLElement) {\r\n                    await this.buildControlList(<HTMLElement>nativeElement.children[i]);\r\n                }\r\n            }\r\n        } else {\r\n            if (nativeElement.hasAttribute('uicheckisvalid')) {\r\n                this.controls.push(nativeElement);\r\n            }\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n",
            "selector": "[uiCheckAllInputsValid]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "changes",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "controls",
                    "defaultValue": "[]",
                    "type": "Array<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "validationStateChange",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "buildControlList",
                    "args": [
                        {
                            "name": "nativeElement",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nativeElement",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CheckIsValidDirective",
            "id": "directive-CheckIsValidDirective-1c760302525cb10fe9cc01b8bdf88a55",
            "file": "projects/common/src/lib/directives/check-is-valid.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uiCheckIsValid]',\r\n})\r\nexport class CheckIsValidDirective {\r\n    constructor(private el: ElementRef) {}\r\n\r\n    public isValid(): boolean {\r\n        return this.el.nativeElement.className.indexOf('ng-invalid') >= 0;\r\n    }\r\n}\r\n",
            "selector": "[uiCheckIsValid]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DeviceInfoDirective",
            "id": "directive-DeviceInfoDirective-566d39a03254beac790af16d7043aad2",
            "file": "projects/common/src/lib/directives/device-info.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core';\r\nimport { DeviceDetectorService } from 'ngx-device-detector';\r\n\r\n@Directive({\r\n    selector: '[uiDeviceInfo]',\r\n})\r\nexport class DeviceInfoDirective {\r\n    constructor(el: ElementRef, private deviceDetectorService: DeviceDetectorService) {\r\n        const nativeElement: HTMLElement = el.nativeElement;\r\n        const deviceInfo = deviceDetectorService.getDeviceInfo();\r\n\r\n        nativeElement.setAttribute('data-device', this.getDevice());\r\n        nativeElement.setAttribute('data-browser', deviceInfo.browser);\r\n        nativeElement.setAttribute('data-browser-version', deviceInfo.browser_version);\r\n    }\r\n\r\n    private getDevice(): string {\r\n        return this.deviceDetectorService.isMobile()\r\n            ? 'Mobile'\r\n            : this.deviceDetectorService.isTablet()\r\n            ? 'Tablet'\r\n            : 'Desktop';\r\n    }\r\n}\r\n",
            "selector": "[uiDeviceInfo]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDevice",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "deviceDetectorService",
                        "type": "DeviceDetectorService"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceDetectorService",
                        "type": "DeviceDetectorService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "EqualValidator",
            "id": "directive-EqualValidator-fce562f1ecf8fed7d2c448efb5be3826",
            "file": "projects/common/src/lib/directives/validate-equal.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, forwardRef, Attribute, Inject } from '@angular/core';\r\nimport { NG_VALIDATORS, AbstractControl, Validator, ValidationErrors } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[validateEqual]',\r\n    providers: [\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => EqualValidator),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class EqualValidator implements Validator {\r\n    constructor(@Attribute('validateEqual') public validateEqual: string, @Inject(DOCUMENT) private document: any) {}\r\n\r\n    validate(control: AbstractControl): ValidationErrors {\r\n        const validateEqualControl: HTMLElement = this.document.querySelector('input[validateequalcontrol]');\r\n\r\n        if (validateEqualControl) {\r\n            const controlName = validateEqualControl.getAttribute('validateequalcontrol');\r\n            try {\r\n                const otherControl = this.document.getElementsByName(controlName)[1];\r\n\r\n                if (otherControl && otherControl.value !== control.value) {\r\n                    return {\r\n                        validateEqual: control.value,\r\n                    };\r\n                }\r\n            } catch {}\r\n        }\r\n        return null;\r\n    }\r\n\r\n    registerOnValidatorChange?(fn: () => void): void {}\r\n}\r\n",
            "selector": "[validateEqual]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true,\n}"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "validateEqual",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Attribute",
                            "stringifiedArguments": "'validateEqual'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "Validator"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "validateEqual",
                        "type": "string"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "validateEqual",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "OutsideClickDirective",
            "id": "directive-OutsideClickDirective-694d1c6e3d36ee3e5f363caf9ec7d839",
            "file": "projects/common/src/lib/directives/outside-click.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, EventEmitter, Inject, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { from } from 'rxjs';\r\nimport { delay, first } from 'rxjs/operators';\r\n\r\n@Directive({\r\n    selector: '[outsideClick]',\r\n})\r\nexport class OutsideClickDirective implements OnInit, OnDestroy {\r\n    private _initialising: boolean;\r\n    private evt =  (e: Event) => this.onDocumentClick(e);\r\n\r\n    constructor(@Inject(DOCUMENT) private document: any, private element: ElementRef) {}\r\n\r\n    @Output() outsideClick: EventEmitter<Event> = new EventEmitter<Event>();\r\n\r\n    ngOnInit() {\r\n        this._initialising = true;\r\n        this.document.body.addEventListener('click', this.evt);\r\n        from([0]).pipe(delay(250), first()).subscribe(() => {\r\n            this._initialising = false; \r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.document.body.removeEventListener('click', this.evt);\r\n    }\r\n\r\n    private onDocumentClick(e: Event): void {\r\n        if (this._initialising || (<HTMLElement>e.target).nodeName.toLowerCase() === 'i') return;\r\n        \r\n        if (!this.element.nativeElement.contains(e.target)) {\r\n            this.outsideClick.emit(e);\r\n            // this.document.body.removeEventListener('click', this.evt);\r\n        }\r\n    }\r\n}\r\n",
            "selector": "[outsideClick]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "outsideClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 15,
                    "type": "EventEmitter<Event>"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_initialising",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "evt",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RecaptchaDirective",
            "id": "directive-RecaptchaDirective-a8ec4163a16c8804efbdc49170f85020",
            "file": "projects/common/src/lib/directives/recaptcha.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Input, OnInit, Output, EventEmitter, AfterViewInit, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { BaseComponent } from '../component/base.component';\r\nimport { ConfigService } from '../services/config.service';\r\nimport { RecaptchaService } from '../services/recaptcha.service';\r\nimport { Router } from '@angular/router';\r\nimport { WINDOW } from '../services/window.service';\r\n\r\n@Directive({\r\n    selector: '[uiRecaptcha]',\r\n})\r\nexport class RecaptchaDirective extends BaseComponent implements OnInit, AfterViewInit {\r\n    @Output() execute = new EventEmitter<any>();\r\n    @Output() recaptchaVerificationFailure = new EventEmitter<void>();\r\n    @Input() action: string;\r\n    @Input() enabled: boolean;\r\n    @Input() valid: boolean = true;\r\n\r\n    private recaptchaKey: string;\r\n    private recaptchaUrl: string;\r\n    private recaptchaUse: boolean;\r\n    private clickEvent = new Subject();\r\n\r\n    constructor(\r\n        @Inject(DOCUMENT) private document: any,\r\n        private recaptchaService: RecaptchaService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        configService: ConfigService\r\n    ) {\r\n        super(router, window);\r\n        this.recaptchaKey = configService.getConfiguration().recaptchaSiteKey;\r\n        this.recaptchaUrl = configService.getConfiguration().recaptchaSiteUrl;\r\n        this.recaptchaUse = configService.getConfiguration().recaptchaUse;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.enabled = true;\r\n        this.clickEvent.pipe(takeUntil(this.$destroy)).subscribe((e) => this.execute.emit(e));\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        await this.addScript();\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    async onClick($event: any): Promise<void> {\r\n        $event.preventDefault();\r\n\r\n        if (this.valid) {\r\n            if (this.recaptchaUse && this.enabled) {\r\n                await this.verify($event);\r\n            } else {\r\n                await this.verificationSuccess($event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async verify($event): Promise<void> {\r\n        try {\r\n            const captchaState = await this.recaptchaService.execute(this.action);\r\n\r\n            if (captchaState.state === 'RecaptchaVerificationSuccess') {\r\n                await this.verificationSuccess($event);\r\n            } else {\r\n                // TODO: define user friendly process\r\n                // this.recaptchaVerificationFailure.emit();\r\n                await this.verificationSuccess($event);\r\n            }\r\n        } catch (e) {\r\n            // TODO: define user friendly process\r\n            // this.recaptchaVerificationFailure.emit();\r\n            await this.verificationSuccess($event);\r\n        }\r\n    }\r\n\r\n    private async verificationSuccess($event: any): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        this.clickEvent.next($event);\r\n    }\r\n\r\n    private async addScript(): Promise<void> {\r\n        return new Promise((resolve, _) => {\r\n            if (this.recaptchaUse) {\r\n                const url = this.recaptchaUrl;\r\n                const scripts = this.document.body.getElementsByTagName('script');\r\n                let found = false;\r\n\r\n                for (var i = 0; i < scripts.length; i++) {\r\n                    if (scripts[i].src.includes(url)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!found) {\r\n                    const script = this.document.createElement('script');\r\n                    script.src = `${url}?render=${this.recaptchaKey}`;\r\n                    this.document.body.appendChild(script);\r\n                }\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n",
            "selector": "[uiRecaptcha]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "action",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "enabled",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "valid",
                    "defaultValue": "true",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "execute",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "recaptchaVerificationFailure",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 50
                }
            ],
            "propertiesClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "recaptchaKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "recaptchaUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "recaptchaUse",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addScript",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "verificationSuccess",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verify",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "recaptchaService",
                        "type": "RecaptchaService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recaptchaService",
                        "type": "RecaptchaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccountAddressComponent",
            "id": "component-AccountAddressComponent-7b47c96540334ab7ce56ccef2998b2ca",
            "file": "projects/customer/src/lib/components/account/addresses/child-components/address/account-address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-account-address",
            "styleUrls": [
                "./account-address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-address.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 29,
                    "type": "any"
                },
                {
                    "name": "states",
                    "line": 30,
                    "type": "Array<ILookup>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "address",
                    "defaultValue": "{}",
                    "type": "Address",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "checkAllInputs",
                    "type": "CheckAllInputsValidDirective",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CheckAllInputsValidDirective"
                        }
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "failure",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onAddressChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "Address"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Address",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, AfterViewInit, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseAccountComponent } from '../../../base-account.component';\r\n\r\nimport {\r\n    BaseComponent,\r\n    ILookup,\r\n    Address,\r\n    IInputValue,\r\n    CheckAllInputsValidDirective,\r\n    DataStoreService,\r\n    HttpStatusCode,\r\n    RouteKeys,\r\n    WINDOW,\r\n    AddressService,\r\n    AuthService,\r\n    HistoryService\r\n} from '@common/src/public-api';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n    selector: 'ui-account-address',\r\n    templateUrl: './account-address.component.html',\r\n    styleUrls: ['./account-address.component.scss'],\r\n})\r\nexport class AccountAddressComponent extends BaseComponent implements AfterViewInit {\r\n    @ViewChild(CheckAllInputsValidDirective) checkAllInputs: CheckAllInputsValidDirective;\r\n    @Input() metadata: any;   \r\n    @Input() states: Array<ILookup>;   \r\n\r\n    address: Address = {};\r\n    _id: string;\r\n    isValid: boolean;\r\n  \r\n    failure: boolean;\r\n    errors: Array<string> = [];\r\n\r\n\r\n    constructor(\r\n        private addressService: AddressService,\r\n        private activatedRoute: ActivatedRoute,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata.AccountAddressAdd;\r\n        this.states = this.activatedRoute.snapshot.data.states;\r\n\r\n        const id = this.activatedRoute.snapshot.params['id'];\r\n        if (id) {        \r\n            this.address =  await this.addressService.getById(id);\r\n        }\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n         this.checkAllInputs.validationStateChange.pipe(takeUntil(this.$destroy)).subscribe((state) => {\r\n            this.isValid = state;\r\n        });  \r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async onSubmitClick(): Promise<void> {\r\n        try {\r\n            this.address._id = (await this.addressService.save(this.address))._id;\r\n           \r\n            this.router.navigate([RouteKeys.AccountAddresses]);\r\n        } catch (e) {\r\n            if (e.status === HttpStatusCode.BadRequest) {\r\n                this.errors = e.error;\r\n            } else if (e.status === HttpStatusCode.Unauthorized) {\r\n                await this.dataStoreService.push('redirect-url', '/checkout/address/add');\r\n                this.router.navigateByUrl('/signin');\r\n            } else {\r\n                this.router.navigateByUrl(RouteKeys.ErrorFatal);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAddressChange(value: Address): void {\r\n        this.address = Object.assign(this.address, value);\r\n    }\r\n\r\n    onValueChange(inputValue: IInputValue): void {\r\n        this.address[inputValue.name] = inputValue.value;\r\n    } \r\n    \r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: 1fr;\r\n    row-gap: 20px;\r\n\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.1em;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .section-container {\r\n        margin-top: 20px;\r\n\r\n        .section-title {\r\n            margin: 10px 0;\r\n            margin-bottom: 5px;\r\n            color: #555;\r\n            font-size: 0.9em;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .text {\r\n            color: #777;\r\n            font-size: 0.85em;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./account-address.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "addressService",
                        "type": "AddressService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "addressService",
                        "type": "AddressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n   <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n\r\n<div uiCheckAllInputsValid class=\"container\">\r\n    <div class=\"title\">{{metadata && metadata.address && metadata.address.section }}</div>\r\n    <div class=\"section-container\">\r\n        <ui-address-entry\r\n            [address]=\"address\"\r\n            [metadata]=\"metadata.address\"\r\n            [states]=\"states\"\r\n            (addressChange)=\"onAddressChange($event)\"\r\n        ></ui-address-entry>\r\n    </div>  \r\n    <ng-container *ngIf=\"metadata && metadata.address &&  metadata.address.additionalDeliveryInstructions\">\r\n        <ng-container *ngTemplateOutlet=\"additionalInstructionsTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.address.accessCode && metadata.address.accessCode\">\r\n        <ng-container *ngTemplateOutlet=\"accessCodeTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.address &&  metadata.address.setDefaultAddress\">\r\n        <ng-container *ngTemplateOutlet=\"defaultAddressTemplate\"></ng-container>\r\n    </ng-container>\r\n    <div class=\"section-container\">\r\n        <button\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.address &&  metadata.address.continue && metadata.address.continue.action\"\r\n            class=\"btn btn-primary\"\r\n            [disabled]=\"!isValid\"\r\n            [valid]=\"isValid\"\r\n            (execute)=\"onSubmitClick()\"\r\n        >\r\n            {{ metadata && metadata.address &&  metadata.address.continue && metadata.address.continue.label }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #additionalInstructionsTemplate>\r\n    <div class=\"section-container\">\r\n        <div class=\"section-title\">\r\n            {{ metadata && metadata.address &&  metadata.address.additionalDeliveryInstructions.label }}\r\n        </div>\r\n        <div class=\"text\">{{ metadata && metadata.address &&  metadata.address.additionalDeliveryInstructions.text }}</div>\r\n        <ui-textarea-component\r\n            name=\"instructions\"\r\n            [metadata]=\"metadata.address.additionalDeliveryInstructions.instructions\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-textarea-component>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #accessCodeTemplate>\r\n    <div class=\"section-container\">\r\n        <div class=\"section-title\">{{ metadata.address.accessCode.label }}</div>\r\n        <ui-textbox-component\r\n            name=\"code\"\r\n            [metadata]=\"metadata.address.accessCode.code\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-textbox-component>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #defaultAddressTemplate>\r\n    <div class=\"section-container\">\r\n        <ui-checkbox-component\r\n            [metadata]=\"metadata.address.setDefaultAddress\"\r\n            name=\"isDefaultAddress\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-checkbox-component>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-fa6032e29660163927e1e59d60333af3",
            "file": "projects/customer/src/lib/components/account/account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-account-component",
            "styleUrls": [
                "./account.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\n\r\nimport { BaseComponent, MenuStateService, WINDOW } from '@common/src/public-api';\r\nimport { interval } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: 'ui-account-component',\r\n    templateUrl: './account.component.html',\r\n    styleUrls: ['./account.component.scss']\r\n})\r\nexport class AccountComponent extends BaseComponent {\r\n    constructor (\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        menuStateService: MenuStateService\r\n    ) {\r\n        super(router, window, menuStateService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        interval(100).pipe(takeUntil(this.$destroy)).subscribe(async _ => {\r\n            this.menuStateService.changeShowMainMenu(!this.isMobile);\r\n            this.menuStateService.changeShowSubMenu(this.menuStateService.getShowMainMenu());\r\n        });   \r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"account\">\r\n    <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "AddressComponent",
            "id": "component-AddressComponent-41a029327691d26885ee2241946a352f",
            "file": "projects/checkout/src/lib/components/child-components/address/address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-address",
            "styleUrls": [
                "./address.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addresses",
                    "line": 27,
                    "type": "Array<Address>"
                },
                {
                    "name": "metadata",
                    "line": 26,
                    "type": "any"
                },
                {
                    "name": "states",
                    "line": 28,
                    "type": "Array<ILookup>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acceptance",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "address",
                    "defaultValue": "{}",
                    "type": "Address",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "backLink",
                    "defaultValue": "'../../address/select'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "checkAllInputs",
                    "type": "CheckAllInputsValidDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CheckAllInputsValidDirective"
                        }
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "failure",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showBack",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onAddressChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "Address"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Address",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, AfterViewInit, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport {\r\n    BaseComponent,\r\n    ILookup,\r\n    Address,\r\n    IInputValue,\r\n    CheckAllInputsValidDirective,\r\n    DataStoreService,\r\n    HttpStatusCode,\r\n    RouteKeys,\r\n    WINDOW,\r\n    AddressService\r\n} from '@common/src/public-api';\r\nimport { CheckoutStateService } from '../../../services/checkout-state.service';\r\n\r\n@Component({\r\n    selector: 'ui-address',\r\n    templateUrl: './address.component.html',\r\n    styleUrls: ['./address.component.scss'],\r\n})\r\nexport class AddressComponent extends BaseComponent implements AfterViewInit {\r\n    @ViewChild(CheckAllInputsValidDirective) checkAllInputs: CheckAllInputsValidDirective;\r\n    @Input() metadata: any;\r\n    @Input() addresses: Array<Address>;\r\n    @Input() states: Array<ILookup>;\r\n\r\n    address: Address = {};\r\n    isValid: boolean;\r\n    showBack: boolean = false;\r\n    backLink: string = '../../address/select';\r\n    acceptance: any;\r\n    failure: boolean;\r\n    errors: Array<string> = [];\r\n\r\n    constructor(\r\n        private checkoutStateService: CheckoutStateService,\r\n        private addressService: AddressService,\r\n        private activatedRoute: ActivatedRoute,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['Checkout'].address;\r\n        this.acceptance = this.activatedRoute.snapshot.data.metadata['Checkout'].acceptance;\r\n        this.states = this.activatedRoute.snapshot.data.states;\r\n        this.showBack = this.checkoutStateService.hasAddresses;\r\n\r\n        const id = this.activatedRoute.snapshot.params['id'];\r\n        if (id) {\r\n            this.address = this.checkoutStateService.addresses.find((a) => a._id === id);\r\n            this.backLink = `../${this.backLink}`;\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.checkAllInputs.validationStateChange.pipe(takeUntil(this.$destroy)).subscribe((state) => {\r\n            this.isValid = state;\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async onSubmitClick(): Promise<void> {\r\n        try {\r\n            this.address._id = (await this.addressService.save(this.address))._id;\r\n            this.checkoutStateService.setSelectedAddressIndex(this.checkoutStateService.addAddress(this.address));\r\n            this.router.navigate([RouteKeys.CheckoutDeliverySlots]);\r\n        } catch (e) {\r\n            if (e.status === HttpStatusCode.BadRequest) {\r\n                this.errors = e.error;\r\n            } else if (e.status === HttpStatusCode.Unauthorized) {\r\n                await this.dataStoreService.push('redirect-url', '/checkout/address/add');\r\n                this.router.navigateByUrl('/signin');\r\n            } else {\r\n                this.router.navigateByUrl(RouteKeys.ErrorFatal);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAddressChange(value: Address): void {\r\n        this.address = Object.assign(this.address, value);\r\n    }\r\n\r\n    onValueChange(inputValue: IInputValue): void {\r\n        this.address[inputValue.name] = inputValue.value;\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return this.errors.length > 0;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".address-container {\r\n    margin-bottom: 40px;\r\n\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.1em;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .section-container {\r\n        margin-top: 20px;\r\n\r\n        .section-title {\r\n            margin: 10px 0;\r\n            margin-bottom: 5px;\r\n            color: #555;\r\n            font-size: 0.9em;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .text {\r\n            color: #777;\r\n            font-size: 0.85em;\r\n        }\r\n    }\r\n\r\n    .acceptance {\r\n        margin-top: 20px;\r\n        font-size: 0.8em;\r\n        padding-top: 10px;\r\n        border-top: 3px solid #f1f1f1;\r\n    }\r\n}\r\n\r\n.go-back {\r\n    position: relative;\r\n\r\n    .btn {\r\n        background-color: whitesmoke;\r\n        margin-left: -20px;\r\n        width: calc(100% + 40px);\r\n        box-shadow: 0 0 10px #a1a1a1;\r\n    }\r\n\r\n    i {\r\n        position: absolute;\r\n        left: -20px;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n    }\r\n}\r\n",
                    "styleUrl": "./address.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService"
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 97
                    }
                }
            },
            "templateData": "<div class=\"go-back\" [hidden]=\"!showBack\">\r\n    <button class=\"btn btn-light btn-text-left\" [routerLink]=\"backLink\">\r\n        {{ metadata && metadata.back && metadata.back.label }}\r\n    </button>\r\n    <i class=\"material-icons\">chevron_left</i>\r\n</div>\r\n<div uiCheckAllInputsValid class=\"address-container\">\r\n    <div class=\"title\">{{metadata && metadata.address && metadata.address.section }}</div>\r\n\r\n    <div class=\"error\" [hidden]=\"!hasErrors\">\r\n        <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n        <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n    </div>\r\n\r\n    <div class=\"section-container\">\r\n        <ui-address-entry\r\n            [address]=\"address\"\r\n            [metadata]=\"metadata.address\"\r\n            [states]=\"states\"\r\n            (addressChange)=\"onAddressChange($event)\"\r\n        ></ui-address-entry>\r\n    </div>\r\n    <ng-container *ngIf=\"metadata && metadata.additionalDeliveryInstructions\">\r\n        <ng-container *ngTemplateOutlet=\"additionalInstructionsTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.accessCode\">\r\n        <ng-container *ngTemplateOutlet=\"accessCodeTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.setDefaultAddress\">\r\n        <ng-container *ngTemplateOutlet=\"defaultAddressTemplate\"></ng-container>\r\n    </ng-container>\r\n    <div class=\"section-container\">\r\n        <button\r\n            uiRecaptcha\r\n            [action]=\"metadata && metadata.continue && metadata.continue.action\"\r\n            class=\"btn btn-primary\"\r\n            [disabled]=\"!isValid\"\r\n            (execute)=\"onSubmitClick()\"\r\n        >\r\n            {{ metadata && metadata.continue && metadata.continue.label }}\r\n        </button>\r\n    </div>\r\n    <ng-container *ngIf=\"acceptance && acceptance.statement\">\r\n        <div class=\"acceptance\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: acceptance\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n\r\n<ng-template #additionalInstructionsTemplate>\r\n    <div class=\"section-container\">\r\n        <div class=\"section-title\">\r\n            {{ metadata.additionalDeliveryInstructions.label }}\r\n        </div>\r\n        <div class=\"text\">{{ metadata.additionalDeliveryInstructions.text }}</div>\r\n        <ui-textarea-component\r\n            name=\"instructions\"\r\n            [metadata]=\"metadata.additionalDeliveryInstructions.instructions\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-textarea-component>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #accessCodeTemplate>\r\n    <div class=\"section-container\">\r\n        <div class=\"section-title\">{{ metadata.accessCode.label }}</div>\r\n        <ui-textbox-component\r\n            name=\"code\"\r\n            [metadata]=\"metadata.accessCode.code\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-textbox-component>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #defaultAddressTemplate>\r\n    <div class=\"section-container\">\r\n        <ui-checkbox-component\r\n            [metadata]=\"metadata.setDefaultAddress\"\r\n            name=\"isDefaultAddress\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-checkbox-component>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "AddressDisplayComponent",
            "id": "component-AddressDisplayComponent-3f2e997dcecb8ea2723612aebe5c96d1",
            "file": "projects/common/src/lib/component/address/address-display/address-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-address-display",
            "styleUrls": [
                "./address-display.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "line": 13,
                    "type": "Address"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { WINDOW } from '@common/src/lib/services/window.service';\r\nimport { Address } from '@common/src/lib/types/address';\r\nimport { BaseComponent } from '../../base.component';\r\n\r\n@Component({\r\n    selector: 'ui-address-display',\r\n    templateUrl: './address-display.component.html',\r\n    styleUrls: ['./address-display.component.scss'],\r\n})\r\nexport class AddressDisplayComponent extends BaseComponent {\r\n    @Input() address: Address;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.address-container {\r\n    font-weight: normal;\r\n    color: $mobile-regular-color;\r\n    font-size: $font-size;\r\n\r\n    div {\r\n        line-height: 16px;\r\n\r\n        &.fullname {\r\n            margin-bottom: 3px;\r\n            font-size: 1.1em;\r\n        }\r\n\r\n        &:not(.fullname) {\r\n            text-transform: capitalize;\r\n            font-size: 1rem;\r\n            line-height: 1.2rem\r\n        }\r\n\r\n        &.country {\r\n            text-transform: initial;\r\n            font-size: 1.1em;\r\n            font-weight: 500;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./address-display.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"address-container\">\r\n    <div *ngIf=\"address && address.addressLine1\">{{ address.addressLine1 }}</div>\r\n    <div *ngIf=\"address && address.addressLine2\">{{ address.addressLine2 }}</div>\r\n    <div *ngIf=\"address && address.addressLine3\">{{ address.addressLine3 }}</div>\r\n    <div *ngIf=\"address && address.town\">{{ address.town }}</div>\r\n    <div *ngIf=\"address && address.state\">{{ address.state }}</div>\r\n    <div *ngIf=\"address && address.postcode\">{{ address.postcode }}</div>\r\n    <div *ngIf=\"address && address.country\" class=\"country\">{{ address.country }}</div>\r\n</div>\r\n"
        },
        {
            "name": "AddressEntryComponent",
            "id": "component-AddressEntryComponent-b07fb585ff6172870c0eaa58aadee89b",
            "file": "projects/common/src/lib/component/address/address-entry/address-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-address-entry",
            "styleUrls": [
                "./address-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "address",
                    "line": 22,
                    "type": ""
                },
                {
                    "name": "metadata",
                    "line": 21,
                    "type": "any"
                },
                {
                    "name": "states",
                    "line": 20,
                    "type": "Array<ILookup>"
                }
            ],
            "outputsClass": [
                {
                    "name": "addressChange",
                    "defaultValue": "new EventEmitter<Address>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_address",
                    "defaultValue": "{}",
                    "type": "Address",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_country",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "addressTypes",
                    "defaultValue": "[\r\n        { id: 'Home', value: 'Home (7am - 9pm)' },\r\n        /* { id: 'Work', value: 'Work/Office (10am - 5pm)' }, */\r\n    ]",
                    "type": "Array<ILookup>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "valueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\n\r\nimport { BaseComponent } from '../../base.component';\r\nimport { ILookup } from '../../../types/ILookup';\r\nimport { Address } from '../../../types/address';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { Router } from '@angular/router';\r\nimport { WINDOW } from '../../../services/window.service';\r\n\r\n@Component({\r\n    selector: 'ui-address-entry',\r\n    templateUrl: './address-entry.component.html',\r\n    styleUrls: ['./address-entry.component.scss'],\r\n})\r\nexport class AddressEntryComponent extends BaseComponent {\r\n    private _address: Address = {};\r\n    private _country: string;\r\n\r\n    @Output() addressChange = new EventEmitter<Address>();\r\n    @Input() states: Array<ILookup>;\r\n    @Input() metadata: any;\r\n    @Input() set address(value: Address) {\r\n        if (value) {\r\n            this._address = JSON.parse(JSON.stringify(value));\r\n        }\r\n    }\r\n    get address(): Address {\r\n        return this._address;\r\n    }\r\n\r\n    addressTypes: Array<ILookup> = [\r\n        { id: 'Home', value: 'Home (7am - 9pm)' },\r\n        /* { id: 'Work', value: 'Work/Office (10am - 5pm)' }, */\r\n    ];\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        configService: ConfigService,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n        this._country = configService.getConfiguration().country;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    valueChanged(): void {\r\n        this.address.country = this._country;\r\n        this.addressChange.emit(this.address);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.address-container {\r\n    width: auto;\r\n\r\n    .label {\r\n        font-weight: 500;\r\n        font-size: 0.9em;\r\n        color: $mobile-regular-color;\r\n    }\r\n\r\n    .btn {\r\n        margin-top: 20px;\r\n        font-size: $font-size;\r\n    }\r\n}\r\n",
                    "styleUrl": "./address-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "address": {
                    "name": "address",
                    "setSignature": {
                        "name": "address",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "address",
                        "type": "",
                        "returnType": "Address",
                        "line": 27
                    }
                }
            },
            "templateData": "<div class=\"address-container\">\r\n    <ng-container *ngIf=\"metadata && metadata.postcode\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"address.postcode = $event.value; valueChanged()\"\r\n            [value]=\"address.postcode\"\r\n            type=\"text\"\r\n            name=\"postcode\"\r\n            [metadata]=\"metadata && metadata.postcode\"\r\n        >\r\n        </ui-textbox-component>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.addressLine1\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"address.addressLine1 = $event.value; valueChanged()\"\r\n            [value]=\"address.addressLine1\"\r\n            type=\"text\"\r\n            name=\"address1\"\r\n            [metadata]=\"metadata && metadata.addressLine1\"\r\n        >\r\n        </ui-textbox-component>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.addressLine2\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"address.addressLine2 = $event.value; valueChanged()\"\r\n            [value]=\"address.addressLine2\"\r\n            type=\"text\"\r\n            name=\"address2\"\r\n            [metadata]=\"metadata && metadata.addressLine2\"\r\n        >\r\n        </ui-textbox-component>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.addressLine3\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"address.addressLine3 = $event.value; valueChanged()\"\r\n            [value]=\"address.addressLine3\"\r\n            type=\"text\"\r\n            name=\"address3\"\r\n            [metadata]=\"metadata && metadata.addressLine3\"\r\n        >\r\n        </ui-textbox-component>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.town\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"address.town = $event.value; valueChanged()\"\r\n            [value]=\"address.town\"\r\n            type=\"text\"\r\n            name=\"town\"\r\n            [metadata]=\"metadata && metadata.town\"\r\n        >\r\n        </ui-textbox-component>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.state\">\r\n        <ui-dropdown-component\r\n            (valueChange)=\"address.state = $event.value; valueChanged()\"\r\n            [value]=\"address.state\"\r\n            type=\"dropdown\"\r\n            name=\"state\"\r\n            [metadata]=\"metadata && metadata.state\"\r\n            [items]=\"states\"\r\n        >\r\n        </ui-dropdown-component>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"metadata && metadata.addressType\">\r\n        <ui-dropdown-component\r\n            (valueChange)=\"address.addressType = $event.value; valueChanged()\"\r\n            [value]=\"address.addressType\"\r\n            type=\"dropdown\"\r\n            name=\"addressTypes\"\r\n            [metadata]=\"metadata && metadata.addressType\"\r\n            [items]=\"addressTypes\"\r\n        >\r\n        </ui-dropdown-component>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "AddressHomeComponent",
            "id": "component-AddressHomeComponent-09276ca3c7f8a3e5a49c945ba1533611",
            "file": "projects/customer/src/lib/components/account/addresses/address-home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-address-home-component",
            "styleUrls": [
                "address-home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "address-home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addresses",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "defaultAddress",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "addAddressClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onDeleteClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeAddress",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        120
                    ],
                    "inheritance": {
                        "file": "BaseAccountComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { NotificationMessageKeys } from \"@common/src/lib/constants/notification.message.keys\";\r\nimport { AuthService, HistoryService, NavigationService, NotificationService, AddressService, RouteKeys, WINDOW } from \"@common/src/public-api\";\r\nimport { BaseAccountComponent } from \"../base-account.component\";\r\n\r\n@Component({\r\n    selector: 'ui-address-home-component',\r\n    templateUrl: 'address-home.component.html',\r\n    styleUrls: ['address-home.component.scss']\r\n})\r\nexport class AddressHomeComponent extends BaseAccountComponent {\r\n    metadata: any;\r\n    addresses: Array<any>;\r\n    defaultAddress: any;\r\n\r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        historyService: HistoryService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private authService: AuthService,\r\n        private navigationService: NavigationService,\r\n        private addressService: AddressService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        super (historyService, router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata.AccountAddresses;\r\n        this.addresses = this.activatedRoute.snapshot.data.profile;\r\n\r\n        await super.init();\r\n    } \r\n    \r\n    public get fullName(): string {\r\n        return `${this.authService.user.firstName} ${this.authService.user.lastName}`;\r\n    }\r\n\r\n    public addAddressClick(): void {\r\n        let url = 'account/addresses/add';\r\n        let currentUrl =  RouteKeys.AccountAddresses;\r\n\r\n        this.navigationService.navigateForUrl(url, currentUrl, true);\r\n    }\r\n\r\n    public async  onDeleteClick(id: string): Promise<void> {\r\n        try {\r\n            await this.addressService.delete(id);\r\n\r\n            this.removeAddress(id); \r\n            this.notificationService.showMessage(NotificationMessageKeys.AddressDeleted);\r\n          \r\n        } catch(e)  {\r\n            this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n        }   \r\n    }\r\n\r\n    public async onEditClick(id: string): Promise<void> {\r\n        try {\r\n            let url = 'account/addresses/edit/' + id;\r\n            let currentUrl =  RouteKeys.AccountAddresses;\r\n\r\n            this.navigationService.navigateForUrl(url, currentUrl, true);\r\n\r\n        } catch(e)  {\r\n            this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n        } \r\n    }\r\n\r\n    private removeAddress(id: string): void {\r\n        const index = this.addresses.findIndex((a) => a._id === id);\r\n\r\n        this.addresses.splice(index, 1);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: 1fr;\r\n    row-gap: 20px;\r\n\r\n    .header {\r\n        color: #333;\r\n        margin-top: 14px;\r\n        font-weight: 600;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .add-address {\r\n        margin-top: 1px;\r\n        position: relative;\r\n    \r\n        i {\r\n            position: absolute;\r\n            right: 14px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            font-size: 17pt;\r\n        }\r\n    }\r\n\r\n    .address-container {\r\n        display: grid;\r\n        row-gap: 20px;\r\n\r\n        &.mobile-container {\r\n            --wrapper-grid-template-columns: 1fr;\r\n            --wrapper-grid-auto-flow: row;\r\n            --buttons-margin-top: 20px;        \r\n        }\r\n    \r\n        &.desktop-container {\r\n            --wrapper-grid-template-columns: 2fr 1fr;\r\n            --wrapper-grid-auto-flow: column;\r\n            --buttons-margin-top: 20px;\r\n        }\r\n\r\n        .item-wrapper {\r\n            display: grid;\r\n            grid-template-columns: var(--wrapper-grid-template-columns);\r\n            grid-auto-flow: var(--wrapper-grid-auto-flow);\r\n            row-gap: 20px;\r\n            box-shadow: 0 4px 8px #e1e1e1;\r\n            border: 1px solid #e1e1e1;\r\n            padding: 20px;           \r\n\r\n            .buttons {\r\n                display: grid;\r\n                row-gap: 20px;\r\n            }\r\n\r\n            .address-wrapper {\r\n                display: grid;\r\n                grid-auto-flow: row;\r\n                row-gap: 5px;\r\n\r\n                .default-address {\r\n                    padding-bottom: 10px;\r\n                    font-weight: 600;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "address-home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseAccountComponent",
            "accessors": {
                "fullName": {
                    "name": "fullName",
                    "getSignature": {
                        "name": "fullName",
                        "type": "string",
                        "returnType": "string",
                        "line": 37
                    }
                }
            },
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n    <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <div class=\"header\">{{ metadata && metadata.header && metadata.header.label }}</div>\r\n    <div class=\"add-address\">\r\n        <button class=\"btn btn-light btn-text-left btn-light-bordered\" (click)=\"addAddressClick()\">\r\n            {{ metadata && metadata.add && metadata.add.label }}       \r\n        </button>\r\n        <i class=\"material-icons\">chevron_right</i>\r\n    </div>\r\n\r\n    <div class=\"address-container\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile }\">  \r\n        <ng-container *ngFor=\"let a of addresses\">\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {a:a}\"></ng-container> \r\n        </ng-container>\r\n    </div> \r\n</div>\r\n\r\n<ng-template #buttonsTemplate let-a=\"a\">\r\n    <button  uiRecaptcha\r\n    [action]=\"metadata && metadata.edit && metadata.edit.action\" \r\n    class=\"btn btn-primary btn-box-shadow\" (click)=\"onEditClick(a._id)\">\r\n        {{ metadata && metadata.edit && metadata.edit.label }}\r\n    </button>\r\n    <button  uiRecaptcha\r\n        [action]=\"metadata && metadata.delete && metadata.delete.action\" \r\n        class=\"btn btn-light btn-light-bordered btn-box-shadow\" (click)=\"onDeleteClick(a._id)\">\r\n        {{ metadata && metadata.delete && metadata.delete.label }}\r\n    </button>   \r\n</ng-template>\r\n\r\n<ng-template #itemTemplate let-a=\"a\">   \r\n        <div class=\"item-wrapper\">           \r\n            <div class=\"address-wrapper\">\r\n                <div *ngIf=\"a.isDefaultAddress\" class=\"default-address\">{{ metadata && metadata.default && metadata.default.label }}</div>\r\n                {{ fullName }}                \r\n                <ui-address-preview-component  [deliveryAddress]=\"a\"></ui-address-preview-component>\r\n            </div>\r\n            <div class=\"buttons\">\r\n                <ng-container *ngTemplateOutlet=\"buttonsTemplate; context:{a:a}\"></ng-container>\r\n            </div>  \r\n        </div>         \r\n</ng-template>"
        },
        {
            "name": "AddressPreviewComponent",
            "id": "component-AddressPreviewComponent-c2888d0b227d11aa64a20f755e9072a3",
            "file": "projects/common/src/lib/component/address/address-preview/address-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-address-preview-component",
            "styleUrls": [
                "./address-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "compact",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "deliveryAddress",
                    "line": 12,
                    "type": "any"
                },
                {
                    "name": "metadata",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { WINDOW } from \"@common/src/lib/services/window.service\";\r\nimport { BaseComponent } from \"../../base.component\";\r\n\r\n@Component({\r\n    selector: 'ui-address-preview-component',\r\n    templateUrl: './address-preview.component.html',\r\n    styleUrls: ['./address-preview.component.scss']\r\n})\r\nexport class AddressPreviewComponent extends BaseComponent {\r\n    @Input() deliveryAddress: any;\r\n    @Input() metadata: any;\r\n    @Input() compact: boolean = false;\r\n    \r\n    constructor (\r\n        router: Router,\r\n        @Inject(WINDOW) window: any\r\n    ) {\r\n        super(router, window);\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    .section-title {\r\n        font-size: 1.1em;\r\n        font-weight: bold;\r\n        margin-bottom: 7px;\r\n        color: $mobile-regular-color;        \r\n    }\r\n\r\n    .item {\r\n        font-size: 1rem;\r\n        line-height: 1.2rem;\r\n        color: #777;\r\n\r\n        &.address-item {\r\n            text-transform: capitalize;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./address-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div *ngIf=\"!compact\" class=\"container address\">\r\n    <div *ngIf=\"metadata\" class=\"section-title\">{{metadata.address && metadata.address.label}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.addressLine1\" class=\"item address-item\">{{deliveryAddress.addressLine1}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.addressLine2\" class=\"item address-item\">{{deliveryAddress.addressLine2}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.addressLine3\" class=\"item address-item\">{{deliveryAddress.addressLine3}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.town\" class=\"item address-item\">{{deliveryAddress.town}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.state\" class=\"item address-item\">{{deliveryAddress.state}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.postcode\" class=\"item address-item\">{{deliveryAddress.postcode}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.country\" class=\"item address-item\">{{deliveryAddress.country}}</div>\r\n</div>\r\n\r\n<div *ngIf=\"compact\"  class=\"container address\">\r\n    <div *ngIf=\"metadata\" class=\"section-title\">{{metadata.address && metadata.address.label}}</div>\r\n    <div *ngIf=\"deliveryAddress\" class=\"item address-item\">\r\n        {{deliveryAddress.addressLine1}}{{(deliveryAddress.addressLine2 ? ', ' + deliveryAddress.addressLine2 : '' )}}{{(deliveryAddress.addressLine3 ? ', ' + deliveryAddress.addressLine3 : '' )}}        \r\n    </div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.town\" class=\"item address-item\">{{deliveryAddress.town}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.state\" class=\"item address-item\">{{deliveryAddress.state}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.postcode\" class=\"item address-item\">{{deliveryAddress.postcode}}</div>\r\n    <div *ngIf=\"deliveryAddress && deliveryAddress.country\" class=\"item address-item\">{{deliveryAddress.country}}</div>\r\n</div>\r\n"
        },
        {
            "name": "AddressSelectComponent",
            "id": "component-AddressSelectComponent-45b99edfdca1d0e047740244394df177",
            "file": "projects/checkout/src/lib/components/child-components/address-select/address-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-address-select",
            "styleUrls": [
                "./address-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./address-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acceptance",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "addresses",
                    "type": "Array<Address>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getAddress",
                    "args": [
                        {
                            "name": "address",
                            "type": "Address"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "Address",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "isSelectedOrDefaultAddress",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeliverAddressClick",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Address, BaseComponent, RouteKeys, WINDOW, AddressService } from '@common/src/public-api';\r\nimport { CheckoutStateService } from '../../../services/checkout-state.service';\r\n\r\n@Component({\r\n    selector: 'ui-address-select',\r\n    templateUrl: './address-select.component.html',\r\n    styleUrls: ['./address-select.component.scss'],\r\n})\r\nexport class AddressSelectComponent extends BaseComponent {\r\n    addresses: Array<Address>;\r\n    metadata: any;\r\n    acceptance: any;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private checkoutStateService: CheckoutStateService,        \r\n        private addressService: AddressService,\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.addresses = this.checkoutStateService.addresses;\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['Checkout'].address;\r\n        this.acceptance = this.activatedRoute.snapshot.data.metadata['Checkout'].acceptance;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    isSelectedOrDefaultAddress(id: string): boolean {\r\n        const selectedAddress = this.checkoutStateService.selectedAddress;\r\n        if (selectedAddress) {\r\n            return selectedAddress._id === id;\r\n        }\r\n\r\n        return this.addresses.findIndex((a) => a.isDefaultAddress === true && id === a._id) !== -1;\r\n    }\r\n\r\n    onDeliverAddressClick(id: string): void {\r\n        this.checkoutStateService.setSelectedAddressIndex(this.addresses.findIndex((a) => a._id === id));\r\n        this.router.navigate([RouteKeys.CheckoutDeliverySlots]);\r\n    }\r\n\r\n    getAddress(address: Address): any {\r\n        return { address };\r\n    }\r\n\r\n    onValueChange(id: string): void {\r\n        this.checkoutStateService.setSelectedAddressIndex(this.addresses.findIndex((a) => a._id === id));\r\n    }\r\n\r\n    async onDeleteClick(id: string): Promise<void> {\r\n        await this.addressService.delete(id);\r\n\r\n        this.checkoutStateService.removeAddress(id);\r\n\r\n        if (!this.checkoutStateService.hasAddresses) {\r\n            this.router.navigate([RouteKeys.CheckoutAddressAdd]);\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.select-address-container {\r\n    margin-top: 1px;\r\n    padding: 10px 20px;\r\n    border: $border-light;\r\n\r\n    &:first-child {\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .address-selector {\r\n        display: grid;\r\n        grid-auto-flow: column;\r\n        grid-template-columns: 40px auto;\r\n        grid-column-gap: 20px;\r\n        justify-content: flex-start;\r\n        justify-items: center;\r\n    }\r\n\r\n    .btn {\r\n        margin-top: 10px;\r\n    }\r\n}\r\n\r\n.add-address {\r\n    margin-top: 1px;\r\n    position: relative;\r\n\r\n    i {\r\n        position: absolute;\r\n        right: 14px;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        font-size: 17pt;\r\n    }\r\n}\r\n\r\n.acceptance {\r\n    margin-top: 20px;\r\n    font-size: 0.8em;\r\n    padding-top: 10px;\r\n    border-top: 3px solid #f1f1f1;\r\n}\r\n",
                    "styleUrl": "./address-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService"
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<ng-container *ngIf=\"addresses\">\r\n    <ng-container *ngFor=\"let address of addresses; let i = index\">\r\n        <ng-container *ngIf=\"isSelectedOrDefaultAddress(address._id)\">\r\n            <ng-container *ngTemplateOutlet=\"selectedAddressTemplate; context: getAddress(address)\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!isSelectedOrDefaultAddress(address._id)\">\r\n            <ng-container *ngTemplateOutlet=\"selectAddressTemplate; context: getAddress(address)\"></ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n    <div class=\"add-address\">\r\n        <button class=\"btn btn-light btn-text-left btn-light-bordered\" routerLink=\"../../address/add\">\r\n            {{ metadata && metadata.add && metadata.add.label }}\r\n        </button>\r\n        <i class=\"material-icons\">chevron_right</i>\r\n    </div>\r\n    <ng-container *ngIf=\"acceptance && acceptance.statement\">\r\n        <div class=\"acceptance\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: acceptance\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n\r\n<ng-template #selectedAddressTemplate let-address=\"address\">\r\n    <div class=\"select-address-container\">\r\n        <div class=\"address-selector\">\r\n            <ui-radio-component\r\n                [value]=\"isSelectedOrDefaultAddress(address._id)\"\r\n                (valueChange)=\"onValueChange(address._id)\"\r\n            ></ui-radio-component>\r\n            <ui-address-display [address]=\"address\"></ui-address-display>\r\n        </div>\r\n        <button class=\"btn btn-primary\" (click)=\"onDeliverAddressClick(address._id)\">\r\n            {{ metadata && metadata.selectDeliveryAddress && metadata.selectDeliveryAddress.label }}\r\n        </button>\r\n        <button class=\"btn btn-light btn-small btn-light-bordered\" [routerLink]=\"['../../address/edit/', address._id]\">\r\n            {{ metadata && metadata.edit && metadata.edit.label }}\r\n        </button>\r\n        <ng-container *ngTemplateOutlet=\"deleteAddress; context: address\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #selectAddressTemplate let-address=\"address\">\r\n    <div class=\"select-address-container\">\r\n        <div class=\"address-selector\">\r\n            <ui-radio-component\r\n                [value]=\"isSelectedOrDefaultAddress(address._id)\"\r\n                (valueChange)=\"onValueChange(address._id)\"\r\n            ></ui-radio-component>\r\n            <ui-address-display [address]=\"address\"></ui-address-display>\r\n        </div>\r\n        <ng-container *ngTemplateOutlet=\"deleteAddress; context: address\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #deleteAddress let-id=\"_id\">\r\n    <button\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.delete && metadata.delete.action\"\r\n        class=\"btn btn-light btn-small btn-light-bordered\"\r\n        (execute)=\"onDeleteClick(id)\"\r\n    >\r\n        {{ metadata && metadata.delete && metadata.delete.label }}\r\n    </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "AddToBasketComponent",
            "id": "component-AddToBasketComponent-fa34ec19ca3c31a0d3a996edbd8e8cb3",
            "file": "projects/content/src/lib/components/add-to-shoppingcart/add-to-shoppingcart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-add-to-shoppingcart",
            "styleUrls": [
                "./add-to-shoppingcart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-to-shoppingcart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 11,
                    "type": "Product"
                },
                {
                    "name": "metadata",
                    "line": 13,
                    "type": "any"
                },
                {
                    "name": "quantity",
                    "line": 12,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "addToBasket",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addToBasketClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, Product, ShoppingCartStateService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-add-to-shoppingcart',\r\n    templateUrl: './add-to-shoppingcart.component.html',\r\n    styleUrls: ['./add-to-shoppingcart.component.scss'],\r\n})\r\nexport class AddToBasketComponent extends BaseComponent {\r\n    @Input() item: Product;\r\n    @Input() quantity: number;\r\n    @Input() metadata: any;\r\n    @Output() addToBasket = new EventEmitter<void>();\r\n\r\n    constructor(\r\n        private shoppingcartStateService: ShoppingCartStateService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    addToBasketClick() {\r\n        this.addToBasket.emit();\r\n        this.shoppingcartStateService.addItemToBasket(this.item, this.quantity);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.btn-basket {\r\n    height: 38px;\r\n    padding: 5px 10px;\r\n    margin-left: 5px;\r\n    background-color: $secondary-color;\r\n    color: $button-color;\r\n    border: 1px solid transparent;\r\n    font-size: $font-size;\r\n    cursor: pointer;\r\n}\r\n",
                    "styleUrl": "./add-to-shoppingcart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<button\r\n    uiRecaptcha\r\n    [action]=\"metadata && metadata.addToBasket && metadata.addToBasket.action\"\r\n    class=\"btn btn-basket\"\r\n    (execute)=\"addToBasketClick()\"\r\n>\r\n    {{ metadata && metadata.addToBasket && metadata.addToBasket.label }}\r\n</button>\r\n"
        },
        {
            "name": "AddToShoppingcartQuantityComponent",
            "id": "component-AddToShoppingcartQuantityComponent-f5e3b8a715cbf672e712732c7de154d2",
            "file": "projects/content/src/lib/components/add-to-shoppingcart-quantity/add-to-shoppingcart-quantity.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-add-to-shoppingcart-quantity",
            "styleUrls": [
                "./add-to-shoppingcart-quantity.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-to-shoppingcart-quantity.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 14,
                    "type": "ShoppingCartItem"
                },
                {
                    "name": "metadata",
                    "line": 15,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disable",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "ignoreMediaQueries",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onAddToBasket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { BaseComponent, ShoppingCartItem, WINDOW } from '@common/src/public-api';\r\nimport { from } from 'rxjs';\r\nimport { delay, first } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-add-to-shoppingcart-quantity',\r\n    templateUrl: './add-to-shoppingcart-quantity.component.html',\r\n    styleUrls: ['./add-to-shoppingcart-quantity.component.scss'],\r\n})\r\nexport class AddToShoppingcartQuantityComponent extends BaseComponent {\r\n    @Input() item: ShoppingCartItem;\r\n    @Input() metadata: any;\r\n    quantity = 1;\r\n    ignoreMediaQueries: true;\r\n    disable = false;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    onAddToBasket(): void {\r\n        this.disable = true;\r\n        from([0]).pipe(delay(this.metadata.enableDelay || 5000), first()).subscribe(_ => this.disable = false);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.add-to-basket-container {\r\n    background-color: $menu-color;\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: flex-end;\r\n    position: relative;\r\n    margin-bottom: 2px;\r\n    \r\n    ui-number-component {\r\n        width: 130px;\r\n    }\r\n\r\n    .overlay {\r\n        position: absolute;\r\n        width: calc(100% - 35px);\r\n        left: 20px;\r\n        top: 26px;\r\n        height: calc(100% - 45px);\r\n        z-index: 10;\r\n        opacity: 0.7;\r\n        background-color: $menu-color;        \r\n    }\r\n}\r\n",
                    "styleUrl": "./add-to-shoppingcart-quantity.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"add-to-basket-container\">\r\n    <ui-number-component\r\n        [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n        [metadata]=\"metadata\"\r\n        [value]=\"1\"\r\n        (valueChange)=\"quantity = $event.value\"\r\n        [metadata]=\"metadata\"\r\n    ></ui-number-component>\r\n    <ui-add-to-shoppingcart [metadata]=\"metadata\" [item]=\"item\" [quantity]=\"quantity\" (addToBasket)=\"onAddToBasket()\"></ui-add-to-shoppingcart>\r\n    <div [hidden]='!disable' class=\"overlay\"></div>\r\n</div>\r\n"
        },
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-506d04415ab68169c28759bb9c517765",
            "file": "projects/admin/src/lib/components/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-admin",
            "styleUrls": [
                "./admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onGenerateSlotsClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onGetPanchshilSlotsClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onGetVehicleSlotsClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, DeliverySlotsService, WINDOW } from '@common/src/public-api';\r\nimport { AdminService } from '../services/admin.service';\r\n\r\n@Component({\r\n    selector: 'ui-admin',\r\n    templateUrl: './admin.component.html',\r\n    styleUrls: ['./admin.component.scss'],\r\n})\r\nexport class AdminComponent extends BaseComponent {\r\n    constructor(\r\n        private adminService: AdminService,\r\n        private deliverySlotsService: DeliverySlotsService,\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {}\r\n\r\n    async onGenerateSlotsClick(): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        await this.adminService.generate();\r\n    }\r\n\r\n    async onGetPanchshilSlotsClick(): Promise<void> {\r\n        const fromDate = new Date(2022, 5, 15);\r\n        const toDate = new Date(2022, 6, 12);\r\n\r\n        await this.deliverySlotsService.getPanchshilDeliverySlots(fromDate, toDate);\r\n    }\r\n\r\n    async onGetVehicleSlotsClick(): Promise<void> {\r\n        const fromDate = new Date(2022, 5, 15);\r\n        const toDate = new Date(2022, 6, 12);\r\n\r\n        await this.deliverySlotsService.getVehicleDeliverySlots(fromDate, toDate);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    \r\n    margin-top: 40px;\r\n\r\n    button {\r\n        margin-bottom: 20px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "adminService",
                        "type": "AdminService"
                    },
                    {
                        "name": "deliverySlotsService",
                        "type": "DeliverySlotsService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "adminService",
                        "type": "AdminService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deliverySlotsService",
                        "type": "DeliverySlotsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"container\">\r\n    <button class=\"btn btn-primary\" (click)=\"onGenerateSlotsClick()\">Generate delivery slots</button>\r\n    <button class=\"btn btn-primary\" (click)=\"onGetPanchshilSlotsClick()\">Get panchshil delivery slots</button>\r\n    <button class=\"btn btn-primary\" (click)=\"onGetVehicleSlotsClick()\">Get vehicle delivery slots</button>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3386277cd7be16862939f5ad78e26d9c",
            "file": "projects/ui/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Home'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ConfigService, CookieService } from '@common/src/public-api';\r\n@Component({\r\n    selector: 'ui-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n    title = 'Home';\r\n\r\n    constructor (\r\n        private cookieService: CookieService,\r\n        private configService: ConfigService\r\n    ) {\r\n    }\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        const configuration = this.configService.getConfiguration();\r\n\r\n        if (this.cookieService.exists('lang')) {\r\n            const cookie = this.cookieService.get('lang');\r\n            const parts = cookie.split('|');\r\n            \r\n            configuration.selectedLanguage = parts[0];\r\n            configuration.language = parts[1];\r\n        } else {\r\n            configuration.selectedLanguage = configuration.defaultLanguage;\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ui-shell {\r\n    position: relative;\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ui-shell uiDeviceInfo></ui-shell>\r\n"
        },
        {
            "name": "AutoCompleteComponent",
            "id": "component-AutoCompleteComponent-62c7b6a6e683c60b26eab55f96c4377d",
            "file": "projects/common/src/lib/component/common/input/auto-complete/auto-complete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "uiAutoComplete",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-autocomplete",
            "styleUrls": [
                "./auto-complete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auto-complete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "type": "AutoCompleteContentDirective",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "AutoCompleteContentDirective"
                        }
                    ]
                },
                {
                    "name": "options",
                    "type": "QueryList<OptionComponent>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "OptionComponent"
                        }
                    ]
                },
                {
                    "name": "rootTemplate",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'root'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "optionsClick",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, ContentChildren, Inject, QueryList, TemplateRef, ViewChild } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { WINDOW } from \"@common/src/lib/services/window.service\";\r\nimport { mergeAll, switchMap } from 'rxjs/operators';\r\n\r\nimport { AutoCompleteContentDirective } from '../../../../directives/auto-complete-content.directive';\r\nimport { BaseComponent } from '../../../base.component';\r\nimport { OptionComponent } from './child-components/option/option.component';\r\n\r\n@Component({\r\n    selector: 'ui-autocomplete',\r\n    templateUrl: './auto-complete.component.html',\r\n    styleUrls: ['./auto-complete.component.scss'],\r\n    exportAs: 'uiAutoComplete'\r\n})\r\nexport class AutoCompleteComponent extends BaseComponent {\r\n    @ViewChild('root') rootTemplate: TemplateRef<any>;\r\n    @ContentChild(AutoCompleteContentDirective) content: AutoCompleteContentDirective;\r\n    @ContentChildren(OptionComponent) options: QueryList<OptionComponent>;\r\n\r\n    constructor (\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    optionsClick() {\r\n        return this.options.changes\r\n            .pipe(\r\n                switchMap((options: Array<any>) => {\r\n                    const click$ = options.map(option => option.click$);\r\n                    return mergeAll(...click$);\r\n                })\r\n            );\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auto-complete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<ng-template #root>\r\n    <div class=\"autocomplete\">\r\n        <ng-container *ngTemplateOutlet=\"content.tpl\"></ng-container>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "BackComponent",
            "id": "component-BackComponent-45dde7ab82fc836806d755e7590bd4a6",
            "file": "projects/common/src/lib/component/back/back.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-back-component",
            "styleUrls": [
                "./back.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "isVisible",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 18,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hasHistory",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onBackClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { interval } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { HistoryService } from \"../../services/history.service\";\r\nimport { BaseComponent } from \"../base.component\";\r\nimport { WINDOW } from '../../services/window.service';\r\nimport { Inject } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ui-back-component',\r\n    templateUrl: './back.component.html',\r\n    styleUrls: ['./back.component.scss']\r\n})\r\nexport class BackComponent extends BaseComponent {\r\n    hasHistory: boolean;\r\n\r\n    @Output() isVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    constructor (\r\n        private historyService: HistoryService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public async init(): Promise<void> {\r\n        interval(500).pipe(takeUntil(this.$destroy)).subscribe(async _ => {\r\n            this.hasHistory = await this.historyService.hasItems();\r\n            this.isVisible.emit(this.hasHistory);\r\n        });\r\n    }\r\n\r\n    public async onBackClick(): Promise<void> {\r\n        const url = await this.historyService.pop()        \r\n        this.router.navigateByUrl(url);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    width: 100vw;\r\n    height: 40px;\r\n    margin: 0;\r\n    background-color: $secondary-color;\r\n    border: 1px solid transparent;\r\n    position: relative;\r\n    padding-left: 20px;\r\n    \r\n    span,\r\n    i {\r\n        position: absolute;\r\n        left: 5px;\r\n        top: 50%;        \r\n        color: white;\r\n        font-weight: lighter;\r\n    }\r\n\r\n    i {\r\n        transform: translateY(-50%) rotate(-180deg);\r\n    }\r\n\r\n    span {\r\n        transform: translateY(-50%);\r\n        left: 35px;\r\n        font-weight: 600;\r\n    }\r\n}",
                    "styleUrl": "./back.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div *ngIf=\"hasHistory\" class=\"container\" (click)=\"onBackClick()\">\r\n    <i class=\"material-icons\">double_arrow</i>\r\n    <span>back</span>\r\n</div>"
        },
        {
            "name": "BreadCrumbComponent",
            "id": "component-BreadCrumbComponent-3b3348596fe1adf390bd71ee231d7a30",
            "file": "projects/common/src/lib/component/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-breadcrumb-component",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 14,
                    "type": "Array<literal type>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getUrl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBreadCrumbClick",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { RouteKeys } from \"../../constants/route.keys\";\r\nimport { NavigationService } from \"../../services/navigation.service\";\r\nimport { WINDOW } from \"../../services/window.service\";\r\nimport { BaseComponent } from \"../base.component\";\r\n\r\n@Component({\r\n    selector: 'ui-breadcrumb-component',\r\n    templateUrl: './breadcrumb.component.html',\r\n    styleUrls: ['./breadcrumb.component.scss']\r\n})\r\nexport class BreadCrumbComponent extends BaseComponent {\r\n    @Input() items: Array<{label: string, key: string}>;\r\n\r\n    constructor (\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public async onBreadCrumbClick(key: string): Promise<void> {\r\n        await this.navigationService.navigateForUrl(this.getUrl(key), null, null, true);\r\n    }\r\n\r\n    private getUrl(key: string): string {\r\n        return RouteKeys[key];\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    margin: 10px auto 30px auto;\r\n\r\n    ul {\r\n        display: flex;\r\n        flex-flow: row;\r\n\r\n        li {\r\n            position: relative;\r\n            padding: 5px;\r\n            font-weight: 500;\r\n\r\n            &:not(:first-child) {\r\n                padding-left: 30px;\r\n            }\r\n\r\n            &:first-child {\r\n                padding-left: 10px;\r\n            }\r\n\r\n            i {\r\n                position: absolute;                \r\n                left: 1px;\r\n                top: 2px;\r\n                color: #555;\r\n            }\r\n            \r\n            a {\r\n                color: #0000ff;\r\n            }\r\n            span {\r\n                color: $secondary-color;\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div *ngIf=\"items && items.length > 0\" class=\"container\">\r\n    <ul>\r\n        <li *ngFor=\"let i of items; let idx = index;\">\r\n            <i *ngIf=\"idx > 0\" class=\"material-icons\">chevron_right</i>\r\n            <a *ngIf=\"i.key\" (click)=\"onBreadCrumbClick(i.key)\">{{i.label}}</a>\r\n            <span *ngIf=\"!i.key\">{{i.label}}</span>\r\n        </li>\r\n    </ul>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CarouselComponent",
            "id": "component-CarouselComponent-05335a3b54dabb69bff3093c1f65ac40",
            "file": "projects/common/src/lib/component/carousel/carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "carousel",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-carousel-component",
            "styleUrls": [
                "./carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "enableTimer",
                    "defaultValue": "true",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "setWidth",
                    "defaultValue": "true",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "showControls",
                    "defaultValue": "true",
                    "line": 31,
                    "type": "boolean"
                },
                {
                    "name": "timing",
                    "defaultValue": "'500ms ease-in'",
                    "line": 30,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carousel",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel'"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "carouselWrapperStyle",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "currentSlide",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "itemElements",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "CarouselItemElement, {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "items",
                    "type": "QueryList<CarouselItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CarouselItemDirective"
                        }
                    ]
                },
                {
                    "name": "itemWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "moveFromLastToFirst",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "player",
                    "type": "AnimationPlayer",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildAnimation",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "AnimationFactory",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "play",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setItemWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, style } from \"@angular/animations\";\r\nimport { AfterViewInit, Component, ContentChildren, Directive, ElementRef, HostBinding, HostListener, Inject, Input, QueryList, ViewChild, ViewChildren } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { interval } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { CarouselItemDirective } from \"../../directives/carousel-item.directive\";\r\nimport { WINDOW } from \"../../services/window.service\";\r\nimport { BaseComponent } from \"../base.component\";\r\n\r\n@Directive({\r\n    selector: '.carousel-item'\r\n})\r\nexport class CarouselItemElement {\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-carousel-component',\r\n    exportAs: 'carousel',\r\n    templateUrl: './carousel.component.html',\r\n    styleUrls: ['./carousel.component.scss']\r\n})\r\nexport class CarouselComponent extends BaseComponent implements AfterViewInit {\r\n    private player : AnimationPlayer;\r\n    private itemWidth: number;\r\n    private moveFromLastToFirst: boolean = false;\r\n\r\n    @ContentChildren(CarouselItemDirective) items: QueryList<CarouselItemDirective>;\r\n    @ViewChildren(CarouselItemElement, { read: ElementRef }) private itemElements: QueryList<ElementRef>;\r\n    @ViewChild('carousel') private carousel: ElementRef;\r\n    @Input() timing: string = '500ms ease-in';\r\n    @Input() showControls: boolean = true;\r\n    @Input() enableTimer: boolean = true;\r\n    @Input() setWidth: boolean = true;\r\n\r\n    carouselWrapperStyle = {};\r\n    currentSlide: number = 0;\r\n\r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        private animationBuilder: AnimationBuilder\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        if (this.setWidth) {\r\n            this.setItemWidth();\r\n        }\r\n        \r\n        interval(5000).pipe(takeUntil(this.$destroy)).subscribe(async _ => {\r\n            if (this.currentSlide >= this.items.length - 1) {\r\n                this.currentSlide = -1;\r\n                this.moveFromLastToFirst = true;\r\n            }\r\n            this.next();\r\n        });\r\n        \r\n        Promise.resolve();\r\n    }\r\n\r\n    public next(): void {\r\n        if (this.currentSlide + 1 === this.items.length) {\r\n            return;\r\n        }\r\n        this.currentSlide = (this.currentSlide + 1) % this.items.length;\r\n        this.play();\r\n    }\r\n\r\n    public previous(): void {\r\n        if (this.currentSlide === 0) {\r\n            return;\r\n        }\r\n        this.currentSlide = ((this.currentSlide - 1) + this.items.length) % this.items.length;\r\n        this.play();\r\n    }\r\n\r\n    private buildAnimation(offset: number): AnimationFactory {\r\n        const timing = (this.moveFromLastToFirst ? '1ms ease-in' : this.timing);\r\n        this.moveFromLastToFirst = false;\r\n\r\n        return this.animationBuilder.build([\r\n            animate(timing, style({ transform : `translateX(-${offset}px)`}))\r\n        ]);\r\n    }\r\n\r\n    private play(): void {\r\n        const offset = this.currentSlide * this.itemWidth;\r\n        if (!isNaN(offset)) {\r\n            const animation: AnimationFactory = this.buildAnimation(offset);\r\n            this.player = animation.create(this.carousel.nativeElement);\r\n            this.player.play();\r\n        }        \r\n    }\r\n\r\n    private setItemWidth(): void {\r\n        this.itemWidth = this.itemElements.first.nativeElement.getBoundingClientRect().width;\r\n        this.carouselWrapperStyle = {\r\n            width: `${this.itemWidth}px`\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".carousel-wrapper {\r\n    overflow: hidden;\r\n    position: relative;\r\n\r\n    i {\r\n        position: absolute;\r\n        top: 50%;;\r\n        transform: translateY(-50%);\r\n        z-index: 1;\r\n        font-size: 40px;\r\n        color: #e1e1e1;\r\n        opacity: 0.3;\r\n\r\n        &:hover {\r\n            opacity: 1;\r\n        }\r\n\r\n        &.chevron-left {\r\n            left: -12px;\r\n        }\r\n\r\n        &.chevron-right {\r\n            right: -12px;\r\n        }\r\n    }\r\n    ul {\r\n        width: 100%;\r\n\r\n        &.carousel-inner {\r\n            display: flex;\r\n        }\r\n    }\r\n\r\n    .image-circles {\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        padding: 5px;\r\n        background-color: transparent;\r\n        display: flex;\r\n\r\n        span {\r\n            width: 20px;\r\n            height: 6px;\r\n            border: 0;\r\n            border-radius: 10px;\r\n            background-color: #555;\r\n            opacity: 1;\r\n            position: relative;\r\n            display: inline-block;\r\n\r\n            &:not(:first-child) {\r\n                margin-left: 5px;\r\n            }\r\n\r\n            span {\r\n                display: none;\r\n            }\r\n\r\n            .progress {\r\n                display: block;\r\n                background-color: #e1e1e1;\r\n                animation: progressBar 5s ease-in-out;\r\n                animation-fill-mode:both; \r\n                width: 20px;\r\n                height: 6px;\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n            }\r\n        }\r\n        \r\n        @keyframes progressBar {\r\n          0% { width: 0; }\r\n          100% { width: 100%; }\r\n        }\r\n    }\r\n}\r\n\r\n",
                    "styleUrl": "./carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "animationBuilder",
                        "type": "AnimationBuilder"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "animationBuilder",
                        "type": "AnimationBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<section class=\"carousel-wrapper\" [ngStyle]=\"carouselWrapperStyle\">\r\n    <i (click)=\"previous()\" class=\"material-icons chevron-left\">chevron_left</i>\r\n    <ul class=\"carousel-inner\" #carousel>\r\n        <li *ngFor=\"let item of items\" class=\"carousel-item\">\r\n            <ng-container *ngTemplateOutlet=\"item.tmpl\"></ng-container>\r\n        </li>\r\n    </ul>\r\n    <i (click)=\"next()\" class=\"material-icons chevron-right\">chevron_right</i>\r\n    <div *ngIf=\"enableTimer\" class=\"image-circles\">\r\n        <span *ngFor=\"let item of items; let idx = index;\">\r\n            <span [ngClass]=\"{ 'progress': idx === currentSlide }\"></span>\r\n        </span>\r\n    </div>\r\n</section>"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-f56329e0ffd952cb013e8894744c37ff",
            "file": "projects/common/src/lib/component/common/input/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-checkbox-component",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isValid",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onCheckboxClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\n\r\n@Component({\r\n    selector: 'ui-checkbox-component',\r\n    templateUrl: './checkbox.component.html',\r\n    styleUrls: ['./checkbox.component.scss'],\r\n})\r\nexport class CheckboxComponent extends BaseInputComponent {\r\n    isValid = true;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.data = false;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    onCheckboxClick(): void {\r\n        this.data = !this.data;\r\n\r\n        this.valueChange.emit({ name: this.name, value: this.data });\r\n    }\r\n\r\n    validate(): void {\r\n        if (this.metadata.validators && this.metadata.validators.required === '') {\r\n            this.isValid = this.data === true;\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n\r\n.checkbox {\r\n    label {\r\n        z-index: 1;\r\n    }\r\n\r\n    span.haserror {\r\n        border: 1px solid #d96060 !important;\r\n        background-color: #eed9d9 !important;\r\n    }\r\n}\r\n\r\n.control-row .control {\r\n    border: $border-transparent;\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "extends": "BaseInputComponent",
            "templateData": "<div class=\"control-row\">\r\n    <div class=\"control checkbox\">\r\n        <div tabindex=\"0\" class=\"checkbox\" (blur)=\"validate()\">\r\n            <span\r\n                [class.haserror]=\"!isValid\"\r\n                [class.ng-invalid]=\"!isValid\"\r\n                [class.ng-valid]=\"isValid\"\r\n                class=\"checkbox\"\r\n                [ngClass]=\"{ checked: data === true }\"\r\n                (click)=\"onCheckboxClick()\"\r\n            ></span>\r\n            <label>{{ metadata && metadata.label }}</label>\r\n        </div>\r\n        <div class=\"information\" [hidden]=\"!showInfo\">\r\n            <div *ngFor=\"let text of metadata && metadata.information\">\r\n                {{ text }}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "CheckoutComponent",
            "id": "component-CheckoutComponent-cbee2eac334c9e935d9764af592b4de2",
            "file": "projects/checkout/src/lib/components/checkout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-checkout",
            "styleUrls": [
                "./checkout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-checkout',\r\n    templateUrl: './checkout.component.html',\r\n    styleUrls: ['./checkout.component.scss'],\r\n})\r\nexport class CheckoutComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".checkout-container {\r\n    max-width: 38rem;\r\n    margin: 0 auto;\r\n    padding: 0 5px;\r\n}\r\n",
                    "styleUrl": "./checkout.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"checkout-container\"><router-outlet></router-outlet></div>\r\n"
        },
        {
            "name": "ConfirmTextboxComponent",
            "id": "component-ConfirmTextboxComponent-d0666381f124ce6fda7ef38fb7fae6a5",
            "file": "projects/common/src/lib/component/common/input/confirm-textbox/confirm.textbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-confirm-textbox-component",
            "styleUrls": [
                "./confirm.textbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.textbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputControl",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputControl'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "setFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\n\r\n@Component({\r\n    selector: 'ui-confirm-textbox-component',\r\n    templateUrl: './confirm.textbox.component.html',\r\n    styleUrls: ['./confirm.textbox.component.scss'],\r\n})\r\nexport class ConfirmTextboxComponent extends BaseInputComponent {\r\n    @ViewChild('inputControl') inputControl: ElementRef;\r\n\r\n    protected setFocus(): void {\r\n        this.inputControl.nativeElement.focus();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.data = '';\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    onBlur(): void {\r\n        this.valueChange.emit({ name: this.name, value: this.data });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm.textbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "templateData": "<div class=\"control-row\">\r\n    <div class=\"control\" [attr.information]=\"metadata && metadata.information && metadata.information.length > 0\">\r\n        <input\r\n            uiCheckIsValid\r\n            [type]=\"type\"\r\n            #inputControl\r\n            [id]=\"id\"\r\n            [attr.name]=\"name\"\r\n            #model=\"ngModel\"\r\n            [(ngModel)]=\"data\"\r\n            [ngModelOptions]=\"{ updateOn: 'blur' }\"\r\n            [ngClass]=\"data.trim().length > 0 ? 'has-value' : ''\"\r\n            (blur)=\"onBlur()\"\r\n            autocomplete=\"nope\"\r\n            validateEqual\r\n            [attr.validateequalcontrol]=\"\r\n                metadata && metadata.validators && metadata.validators.validateEqual === ''\r\n                    ? metadata.validateEqualControl\r\n                    : null\r\n            \"\r\n        />\r\n        <label [ngClass]=\"ignoreMediaQueries ? 'ignore' : ''\">{{ metadata && metadata.label }}</label>\r\n        <div *ngIf=\"model.touched && model.invalid\" class=\"error\">\r\n            <span>{{ metadata.error.validateEqual }}</span>\r\n        </div>\r\n        <div class=\"focus-indicator\"></div>\r\n        <span class=\"optional-text\">{{ metadata && metadata.optionalText }}</span>\r\n        <a class=\"information-icon\" (click)=\"onShowInfoIconClick()\" (outsideClick)=\"showInfo = false\"></a>\r\n\r\n        <div class=\"information\" [hidden]=\"!showInfo\">\r\n            <div *ngFor=\"let text of metadata && metadata.information\">\r\n                {{ text }}\r\n            </div>\r\n        </div>\r\n        <div class=\"background\"></div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ContentComponent",
            "id": "component-ContentComponent-7928dac4e33cebad201b18d875f712dd",
            "file": "projects/content/src/lib/components/content/content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-content",
            "styleUrls": [
                "./content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-content',\r\n    templateUrl: './content.component.html',\r\n    styleUrls: ['./content.component.scss'],\r\n})\r\nexport class ContentComponent extends BaseComponent {\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\r\n    width: 100%;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "\r\n<div class=\"content\"><router-outlet></router-outlet></div>\r\n"
        },
        {
            "name": "DeliveryOptionsComponent",
            "id": "component-DeliveryOptionsComponent-e9bbcc39e884539cfcddd1874f8d478b",
            "file": "projects/checkout/src/lib/components/child-components/delivery-options/delivery-options.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-delivery-options-component",
            "styleUrls": [
                "./delivery-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delivery-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 17,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_months",
                    "defaultValue": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_weekdays",
                    "defaultValue": "['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "continue",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "deliveryOptions",
                    "type": "IDeliveryOptions",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getByDate",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptionValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUnavailableText",
                    "args": [
                        {
                            "name": "option",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "isOptionAvailable",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOptionSelected",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onContinueClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "onDeliveryOptionChanged",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Inject } from '@angular/core';\r\nimport { Component, Input } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { BaseComponent, IDeliveryOptions, WINDOW } from '@common/src/public-api';\r\nimport { CheckoutStateService } from '../../../services/checkout-state.service';\r\n\r\n@Component({\r\n    selector: 'ui-delivery-options-component',\r\n    templateUrl: './delivery-options.component.html',\r\n    styleUrls: ['./delivery-options.component.scss'],\r\n})\r\nexport class DeliveryOptionsComponent extends BaseComponent {\r\n    private _weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n    private _months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    private deliveryOptions: IDeliveryOptions;\r\n    @Input() metadata: any;\r\n\r\n    options: Array<any> = [];\r\n    continue: boolean;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private checkoutStateService: CheckoutStateService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n        this.deliveryOptions;\r\n    }\r\n    \r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['Checkout'].options;\r\n        this.deliveryOptions = this.activatedRoute.snapshot.data.deliveryOptions;\r\n        this.options = this.metadata.options;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    isOptionAvailable(type: string): boolean {\r\n        switch (type.toLowerCase()) {\r\n            case 'free delivery':\r\n                return this.checkoutStateService.currentOrderValue >= 350.0;\r\n            case 'standard delivery':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    onContinueClick(): void {}\r\n\r\n    isOptionSelected(type: string): boolean {\r\n        return this.checkoutStateService.selectedDeliveryOption === type;\r\n    }\r\n\r\n    hasValue(type: string): boolean {\r\n        return type === 'Standard Delivery';\r\n    }\r\n\r\n    getOptionValue(type: string): string {\r\n        return (125.0).toFixed(2);\r\n    }\r\n\r\n    getUnavailableText(option: any): string {\r\n        if (\r\n            option.type === 'FREE Delivery' &&\r\n            this.checkoutStateService.currentOrderValue < this.deliveryOptions.freeDeliveryMinOrderValue\r\n        ) {\r\n            return `${option.unavailable} ₹${this.deliveryOptions.freeDeliveryMinOrderValue.toFixed(2)}`;\r\n        }\r\n        return option.unavailable;\r\n    }\r\n\r\n    getByDate(type: string): string {\r\n        let date = new Date();\r\n        date.setDate(date.getDate() + 3);\r\n\r\n        return `${this._weekdays[date.getDay()]}, ${this._months[date.getMonth()]} ${date.getDate()}`;\r\n    }\r\n\r\n    getOption(option: any): any {\r\n        return { option };\r\n    }\r\n\r\n    onDeliveryOptionChanged(type: string): void {\r\n        this.checkoutStateService.selectedDeliveryOption = type;\r\n        this.continue = true;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.options-container {\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.1em;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .btn {\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .option-section {\r\n        padding: 10px 20px;\r\n        border: $border-light;\r\n        margin-top: 1px;\r\n\r\n        &:first-child {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .option-selector {\r\n            display: grid;\r\n            grid-auto-flow: column;\r\n            grid-template-columns: 30px auto;\r\n            grid-column-gap: 10px;\r\n            justify-content: flex-start;\r\n            justify-items: center;\r\n\r\n            .option-detail {\r\n                font-weight: 550;\r\n                font-size: 0.9em;\r\n\r\n                span {\r\n                    line-height: 20px;\r\n                }\r\n\r\n                .option-type,\r\n                .currency-symbol {\r\n                    color: #555;\r\n                }\r\n\r\n                .option-type {\r\n                    margin-left: 2px;\r\n                }\r\n\r\n                .option-non-available,\r\n                .option-text {\r\n                    font-weight: lighter;\r\n                    display: block;\r\n                    color: #409847;\r\n                    font-size: 0.8em;\r\n                }\r\n\r\n                .option-non-available {\r\n                    margin-top: 5px;\r\n                    padding: 15px 9px;\r\n                    color: $disabled-color;\r\n                    border: 1px solid #f0f0f0;\r\n                }\r\n            }\r\n        }\r\n\r\n        &.disabled {\r\n            color: $disabled-color;\r\n            border: 1px solid #f0f0f0;\r\n\r\n            .option-selector .option-detail .option-type {\r\n                color: #999;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./delivery-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<ng-container *ngIf=\"metadata\">\r\n    <div class=\"options-container\">\r\n        <div class=\"title\">{{ metadata.section }}</div>\r\n\r\n        <ng-container *ngFor=\"let option of options; let i = index\">\r\n            <ng-container *ngIf=\"isOptionAvailable(option.type)\">\r\n                <ng-container *ngTemplateOutlet=\"availableOptionTemplate; context: getOption(option)\"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!isOptionAvailable(option.type)\">\r\n                <ng-container *ngTemplateOutlet=\"nonAvailableOptionTemplate; context: getOption(option)\"></ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <button class=\"btn btn-primary\" [disabled]=\"!continue\" (click)=\"onContinueClick()\">\r\n            {{ metadata && metadata.continue && metadata.continue.label }}\r\n        </button>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #availableOptionTemplate let-option=\"option\">\r\n    <div class=\"option-section\">\r\n        <div class=\"option-selector\">\r\n            <ui-radio-component\r\n                smallRadio=\"true\"\r\n                [value]=\"isOptionSelected(option.type)\"\r\n                (valueChange)=\"onDeliveryOptionChanged(option.type)\"\r\n            ></ui-radio-component>\r\n            <div class=\"option-detail\">\r\n                <ng-container *ngIf=\"hasValue(option.type)\">\r\n                    <span class=\"currency-symbol\">&#x20B9;{{ getOptionValue(option.type) }}</span>\r\n                </ng-container>\r\n                <span class=\"option-type\">{{ option.type }}</span>\r\n                <span class=\"option-text\">{{ option.text }} {{ getByDate(option.type) }}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #nonAvailableOptionTemplate let-option=\"option\">\r\n    <div class=\"option-section disabled\">\r\n        <div class=\"option-selector\">\r\n            <ui-radio-component\r\n                smallRadio=\"true\"\r\n                disabled=\"true\"\r\n                [value]=\"isOptionSelected(option.type)\"\r\n            ></ui-radio-component>\r\n            <div class=\"option-detail\">\r\n                <span class=\"option-type\">{{ option.type }}</span>\r\n                <span class=\"option-non-available\">{{ getUnavailableText(option) }}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "DeliverySlotComponent",
            "id": "component-DeliverySlotComponent-c13554962aecab6ff74b6b979e13e931",
            "file": "projects/checkout/src/lib/components/child-components/delivery-slot/delivery-slot.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-delivery-slot-component",
            "styleUrls": [
                "./delivery-slot.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delivery-slot.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acceptance",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "configuration",
                    "type": "IConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "continue",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectedDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "slots",
                    "type": "Array<AvailableSlot>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "state",
                    "type": "SlotState",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tabs",
                    "type": "Array<TabItem>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "buildTabs",
                    "args": [
                        {
                            "name": "selectedSlot",
                            "type": "AvailableSlot",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<TabItem>",
                    "typeParameters": [],
                    "line": 115,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedSlot",
                            "type": "AvailableSlot",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onContinueClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onDaySelected",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSlotSelected",
                    "args": [
                        {
                            "name": "slot",
                            "type": "AvailableSlot"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "slot",
                            "type": "AvailableSlot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTabSelected",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDays",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport {\r\n    BaseComponent,\r\n    AvailableSlot,\r\n    IConfiguration,\r\n    ConfigService,\r\n    DeliverySlotsService,\r\n    HttpStatusCode,\r\n    RouteKeys,\r\n    WINDOW,\r\n} from '@common/src/public-api';\r\nimport { TabItem } from '../../../types/tab-item';\r\nimport { TabDay } from '../../../types/tab-day';\r\nimport { SlotState } from '../../../types/slot-state';\r\nimport { from } from 'rxjs';\r\nimport { delay, first } from 'rxjs/operators';\r\nimport { CheckoutStateService } from '../../../services/checkout-state.service';\r\n\r\n@Component({\r\n    selector: 'ui-delivery-slot-component',\r\n    templateUrl: './delivery-slot.component.html',\r\n    styleUrls: ['./delivery-slot.component.scss'],\r\n})\r\nexport class DeliverySlotComponent extends BaseComponent {\r\n    private configuration: IConfiguration;\r\n\r\n    metadata: any;\r\n    slots: Array<AvailableSlot>;\r\n    continue: boolean = false;\r\n    tabs: Array<TabItem>;\r\n    acceptance: any;\r\n    selectedDate: Date;\r\n    state: SlotState;\r\n\r\n    constructor(\r\n        private deliverySlotService: DeliverySlotsService,\r\n        private checkoutStateService: CheckoutStateService,\r\n        private activatedRoute: ActivatedRoute,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        configService: ConfigService\r\n    ) {\r\n        super(router, window);\r\n        this.configuration = configService.getConfiguration();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['Checkout'];\r\n        this.slots = this.activatedRoute.snapshot.data.slots;\r\n        const selectedSlot = this.slots.find((s) => s.selected);\r\n        this.acceptance = this.activatedRoute.snapshot.data.metadata['Checkout'].acceptance;\r\n        this.continue = !!selectedSlot;\r\n\r\n        this.tabs = this.buildTabs(selectedSlot);\r\n        this.setDays();\r\n\r\n        if (selectedSlot) {\r\n            this.checkoutStateService.selectedSlot = selectedSlot;\r\n        }\r\n\r\n        Promise.resolve();\r\n    }\r\n\r\n    public async onContinueClick(): Promise<void> {\r\n        await this.checkoutStateService.saveState();\r\n        this.router.navigate([RouteKeys.CheckoutPreview]);\r\n    }\r\n\r\n    public async onTabSelected(index: number): Promise<void> {\r\n        this.tabs.forEach((s) => (s.selected = false));\r\n        this.tabs[index].selected = true;\r\n    }\r\n\r\n    public async onDaySelected(date: Date): Promise<void> {\r\n        this.selectedDate = date;\r\n    }\r\n\r\n    public async onSlotSelected(slot: AvailableSlot): Promise<void> {\r\n        try {\r\n            const previousSlot = this.slots.find((s) => s.selected);\r\n            if (previousSlot) {\r\n                previousSlot.selected = false;\r\n            }\r\n\r\n            slot.selected = true;\r\n            await this.tokenService.xsrf();\r\n            const result = await this.deliverySlotService.reserve(slot);\r\n            this.checkoutStateService.selectedSlot = slot;\r\n            this.continue = true;\r\n        } catch (e) {\r\n            if (e.status === HttpStatusCode.BadRequest) {\r\n                slot.selected = false;\r\n                this.state = SlotState.Failure;\r\n                from([0])\r\n                    .pipe(delay(3000), first())\r\n                    .subscribe((_) => (this.state = null));\r\n            } else if (e.status === HttpStatusCode.NotFound) {\r\n                slot.selected = false;\r\n                slot.availableSlots = 0;\r\n                this.state = SlotState.NotAvailable;\r\n                from([0])\r\n                    .pipe(delay(3000), first())\r\n                    .subscribe((_) => (this.state = null));\r\n            } else {\r\n                this.router.navigateByUrl(RouteKeys.ErrorFatal);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get selectedTab(): TabItem {\r\n        return this.tabs.find((t) => t.selected);\r\n    }\r\n    private buildTabs(selectedSlot?: AvailableSlot): Array<TabItem> {\r\n        const tabs = new Array<TabItem>();\r\n        const tempdate = new Date(new Date(Date.now()).toDateString());\r\n        const selectedTime = selectedSlot ? new Date(selectedSlot.deliveryDate).getTime() : 0;\r\n\r\n        let weekstart = new Date(tempdate.setDate(tempdate.getDate()));\r\n        let weekend = new Date(tempdate.setDate(tempdate.getDate() + 6));\r\n        this.selectedDate = selectedSlot ? new Date(selectedSlot.deliveryDate) : new Date(weekstart);\r\n\r\n        for (let wk = 0; wk < 4; wk++) {\r\n            tabs.push({\r\n                label: `${weekstart.toLocaleString(this.configuration.language, {\r\n                    month: 'short',\r\n                })} ${weekstart.getDate()} - ${weekend.toLocaleString(this.configuration.language, {\r\n                    month: 'short',\r\n                })} ${weekend.getDate()}`,\r\n                start: weekstart.getTime(),\r\n                end: weekend.getTime(),\r\n                selected: selectedSlot\r\n                    ? selectedTime >= weekstart.getTime() && selectedTime <= weekend.getTime()\r\n                    : wk === 0,\r\n            });\r\n\r\n            weekstart = new Date(tempdate.setDate(tempdate.getDate() + 1));\r\n            weekend = new Date(tempdate.setDate(tempdate.getDate() + 6));\r\n        }\r\n\r\n        return tabs;\r\n    }\r\n\r\n    private setDays(): void {\r\n        for (const currentTab of this.tabs) {\r\n            const startDate = new Date(new Date(currentTab.start).toDateString());\r\n            const endDate = new Date(new Date(currentTab.end).toDateString());\r\n            currentTab.days = Array<TabDay>();\r\n\r\n            while (startDate <= endDate) {\r\n                currentTab.days.push({\r\n                    day: startDate.getDate().toString(),\r\n                    weekday: startDate.toLocaleString(this.configuration.language, { weekday: 'short' }),\r\n                    selected: this.selectedDate.getTime() === startDate.getTime(),\r\n                    date: new Date(startDate),\r\n                    slots: this.slots.filter((s) => new Date(new Date(s.deliveryDate).toDateString()).getTime() === startDate.getTime()),\r\n                });\r\n                startDate.setDate(startDate.getDate() + 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.1em;\r\n        font-weight: 600;\r\n        margin-bottom: 6px;\r\n    }\r\n\r\n    .content {\r\n        margin-bottom: 15px;\r\n        color: #555;\r\n        font-size: 0.9em;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .btn {\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .tabs-mobile {\r\n        width: 100%;\r\n    }\r\n\r\n    .tabs-tablet,\r\n    .tabs-desktop {\r\n        display: none;\r\n    }\r\n\r\n    .acceptance {\r\n        margin-top: 20px;\r\n        font-size: 0.8em;\r\n        padding-top: 10px;\r\n        border-top: 3px solid #f1f1f1;\r\n    }\r\n\r\n    .slot-no-available,\r\n    .slot-bad-request {\r\n        width: 100%;\r\n        border: 1px solid transparent;\r\n        background-color: #fff9ed;\r\n        color: $mobile-regular-color;\r\n        padding: 11px;\r\n        font-size: 0.85em;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {\r\n        .tabs-tablet,\r\n        .tabs-mobile {\r\n            display: block;\r\n        }\r\n        .tabs-desktop {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $desktop-min-width) {\r\n    .container {\r\n        .tabs-tablet,\r\n        .tabs-mobile {\r\n            display: none;\r\n        }\r\n        .tabs-desktop {\r\n            display: block;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./delivery-slot.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "deliverySlotService",
                        "type": "DeliverySlotsService"
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "deliverySlotService",
                        "type": "DeliverySlotsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "selectedTab": {
                    "name": "selectedTab",
                    "getSignature": {
                        "name": "selectedTab",
                        "type": "",
                        "returnType": "TabItem",
                        "line": 112
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div class=\"title\">{{ metadata && metadata.slots && metadata.slots.section }}</div>\r\n    <div class=\"content\">{{ metadata && metadata.slots && metadata.slots.content }}</div>\r\n\r\n    <div *ngIf=\"state === 'NotAvailable'\" class=\"slot-not-available\">\r\n        <span>{{ metadata && metadata.slots.notAvailable && metadata.slots.notAvailable.label }}</span>\r\n    </div>\r\n\r\n    <div *ngIf=\"state === 'Failure'\" class=\"slot-bad-request\">\r\n        <span>{{ metadata && metadata.slots.badRequest && metadata.slots.badRequest.label }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"slots\">\r\n        <ng-container *ngTemplateOutlet=\"tabsTemplate\"></ng-container>\r\n        <ng-container *ngTemplateOutlet=\"tabSlotsTemplate\"></ng-container>\r\n    </ng-container>\r\n\r\n    <button\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.slots.continue && metadata.slots.continue.action\"\r\n        class=\"btn btn-primary\"\r\n        [disabled]=\"!continue\"\r\n        (execute)=\"onContinueClick()\"\r\n    >\r\n        {{ metadata && metadata.slots.continue && metadata.slots.continue.label }}\r\n    </button>\r\n    <ng-container *ngIf=\"acceptance && acceptance.statement\">\r\n        <div class=\"acceptance\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: acceptance\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n\r\n<ng-template #tabsTemplate>\r\n    <div class=\"tabs-desktop\">\r\n        <ui-tab-desktop-component [tabs]=\"tabs\" (tabSelected)=\"onTabSelected($event)\"></ui-tab-desktop-component>\r\n    </div>\r\n    <div class=\"tabs-mobile\">\r\n        <ui-tab-mobile-component [tabs]=\"tabs\" (daySelected)=\"onDaySelected($event)\"></ui-tab-mobile-component>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #tabSlotsTemplate>\r\n    <div class=\"tabs-desktop\">\r\n        <ui-slot-desktop-component\r\n            [slots]=\"slots\"\r\n            [tab]=\"selectedTab\"\r\n            (slotSelected)=\"onSlotSelected($event)\"\r\n        ></ui-slot-desktop-component>\r\n    </div>\r\n    <div class=\"tabs-mobile\">\r\n        <ui-slot-mobile-component\r\n            [slots]=\"slots\"\r\n            [selectedDate]=\"selectedDate\"\r\n            (slotSelected)=\"onSlotSelected($event)\"\r\n        ></ui-slot-mobile-component>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "DetailContentComponent",
            "id": "component-DetailContentComponent-db667802868651b36695abdc1d9b1bae",
            "file": "projects/content/src/lib/components/detail/detail.content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-detail",
            "styleUrls": [
                "./detail.content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./detail.content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemDetail",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "packItems",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedImage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showSidebar",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getMetaTagDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getSize",
                    "args": [
                        {
                            "name": "productDetails",
                            "type": "Array<ProductDetail>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productDetails",
                            "type": "Array<ProductDetail>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSizePack",
                    "args": [
                        {
                            "name": "productDetails",
                            "type": "Array<ProductDetail>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productDetails",
                            "type": "Array<ProductDetail>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "isDescription",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSpeciality",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPackSelected",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubTypeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110
                },
                {
                    "name": "onTypeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "toFixed",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Title, Meta } from '@angular/platform-browser';\r\n\r\nimport { BaseComponent, ConfigService, Product, RouteKeys, WINDOW } from '@common/src/public-api';\r\nimport { ProductDetail } from '@common/src/lib/types/product-detail';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-detail',\r\n    templateUrl: './detail.content.component.html',\r\n    styleUrls: ['./detail.content.component.scss'],\r\n})\r\nexport class DetailContentComponent extends BaseComponent {\r\n    itemDetail: Product;\r\n    metadata: any;\r\n    packItems: Array<Product>;    \r\n    showSidebar = false;\r\n    selectedImage: number = 0;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private route: Router,\r\n        private titleService: Title,\r\n        private metaService: Meta,\r\n        private configService: ConfigService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.activatedRoute.data.pipe(takeUntil(this.$destroy)).subscribe(data => {\r\n            this.itemDetail = this.activatedRoute.snapshot.data.detail;\r\n            this.metadata = this.activatedRoute.snapshot.data.metadata['Content'];\r\n            this.packItems = this.activatedRoute.snapshot.data.sizes;\r\n\r\n            this.titleService.setTitle(`${this.itemDetail.lob} - ${this.itemDetail.type}, ${this.itemDetail.brand}`);\r\n            this.metaService.addTag({\r\n                name: 'description',\r\n                content: this.getMetaTagDescription(),\r\n            });\r\n        });\r\n        \r\n        await Promise.resolve();\r\n    }\r\n\r\n    public isSpeciality(title: string): boolean {\r\n        return title.toLowerCase() === 'speciality';\r\n    }\r\n\r\n    public isDescription(title: string): boolean {\r\n        return title.toLowerCase() === 'desc';\r\n    }\r\n\r\n    public isSelected(id: any): boolean {\r\n        return this.itemDetail._id.toString() === id.toString();\r\n    }\r\n    \r\n    get imageUrl(): string {\r\n        if (this.itemDetail && Array.isArray(this.itemDetail.images)){\r\n            const image = this.itemDetail.images.find(i => Number(i.size) === this.selectedImage);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public get showReviews(): boolean {\r\n        return this.configService.getConfiguration().showReview;\r\n    }\r\n\r\n    public getSize(productDetails: Array<ProductDetail>): string {\r\n        const size = Array.isArray(productDetails) ? productDetails.find(pd => pd.title.toLowerCase() === 'size') : null;\r\n        if (size) {\r\n            return `${size.value}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    public getSizePack(productDetails: Array<ProductDetail>): string {\r\n        const sizePack = Array.isArray(productDetails) ? productDetails.find(pd => pd.title.toLowerCase() === 'pack') : null;\r\n        if (sizePack) {\r\n            return `${sizePack.value}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    public toFixed(value: number): string {\r\n        if (value) {\r\n            return value.toFixed(2);\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    public onPackSelected(id: string): void {\r\n        this.route.navigateByUrl(`${RouteKeys.ProductDetail}${id.toString()}`);\r\n    }\r\n\r\n    onTypeClick(): void {\r\n        this.route.navigateByUrl(`${RouteKeys.Pantry}/list/${btoa(JSON.stringify({ lob: this.itemDetail.lob, types: [this.itemDetail.type]}))}`);\r\n    }\r\n\r\n    onSubTypeClick(): void {\r\n        this.route.navigateByUrl(`${RouteKeys.Pantry}/list/${btoa(JSON.stringify({ lob: this.itemDetail.lob, types: [this.itemDetail.type], subTypes: [this.itemDetail.subType]}))}`);\r\n    }\r\n\r\n    private getMetaTagDescription(): string {\r\n        let description: string = `${this.itemDetail.lob},${this.itemDetail.type},${this.itemDetail.brand},${this.itemDetail.description}`;\r\n        const details = this.itemDetail.details;\r\n\r\n        for (let i = 0; i < details.length; i++) {\r\n            const value = details[i].value;\r\n            if (Array.isArray(value)) {\r\n                for (let j = 0; j < value.length; j++) {\r\n                    description += `,${value[j]}`;\r\n                }\r\n            } else {\r\n                description += `,${value}`;\r\n            }\r\n        }\r\n\r\n        return description;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n\r\n.main-container {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    margin-top: 20px;\r\n}\r\n\r\n\r\n.main-nosidebar-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    margin-top: 20px;\r\n    justify-content: center;\r\n}\r\n\r\n.sidebar {\r\n    width: 200px;\r\n    min-height: calc(100vh - 300px);\r\n    border-right: 1px solid #e0e0e0;\r\n    display: none;\r\n    padding: 10px;\r\n\r\n    .type,\r\n    .sub-type {\r\n        color: $mobile-regular-color;\r\n        font-size:  $font-size;\r\n        margin-bottom: 7px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .sub-type {\r\n        padding-left: 7px;\r\n    }\r\n}\r\n\r\n\r\n.item-details-container {\r\n    min-width: 250px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: $font-size;\r\n\r\n    .right-container {\r\n        margin-top: 25px;\r\n        padding: 0 10px;\r\n\r\n        .detail-description {\r\n            font-size: $font-size;\r\n            font-weight: 500;\r\n            line-height: 20px;\r\n            color: $desktop-regular-color;\r\n        }\r\n\r\n        ui-pricing-component {\r\n            .pricing-container {\r\n                ::ng-deep & {\r\n                    margin-top: 10px;\r\n                    margin-bottom: 10px;\r\n                }\r\n            }\r\n        }\r\n\r\n        ui-add-to-shoppingcart-quantity {\r\n            .add-to-basket-container {\r\n                ::ng-deep & {\r\n                    padding: 10px;\r\n                    padding-left: 0;                    \r\n                }\r\n            }\r\n        }\r\n\r\n        .detail-brand {\r\n            margin-bottom: 5px;\r\n            font-weight: normal;\r\n\r\n            .pre-text {\r\n                color: $desktop-regular-color;\r\n            }\r\n\r\n            .text {\r\n                color: $linkcolor;\r\n            }\r\n        }\r\n\r\n        .speciality {\r\n            font-weight: normal;\r\n            font-size: 1em;\r\n            margin-top: 5px;\r\n\r\n            .veg-symbol {\r\n                color: green;\r\n                font-weight: 600;\r\n            }\r\n\r\n            .pre-text {\r\n                color: $desktop-regular-color;\r\n                margin-left: 5px;\r\n            }\r\n\r\n            .text {\r\n                color: $desktop-regular-color;\r\n                font-weight: 500;\r\n                line-height: 10px;\r\n            }\r\n        }\r\n\r\n        .item-descs {\r\n            margin-top: 10px;\r\n            margin-left: 20px;\r\n        }\r\n\r\n        .country-container {\r\n            font-size: $font-size;\r\n            color: $desktop-regular-color;\r\n            line-height: 1.5rem;\r\n            \r\n            .country {\r\n                font-size: 1.1em;\r\n                color: $desktop-regular-color;\r\n                font-weight: 500;\r\n            }\r\n        }\r\n\r\n        .packs-container {\r\n            display: block;\r\n            width: 100%;            \r\n            color: $mobile-regular-color;\r\n            font-size: 0.9em;\r\n\r\n            .pack-item {\r\n                padding: 2px;\r\n                margin-bottom: 10px;\r\n                border: 1px solid #eaeaea;\r\n                border-right-width: 25px;\r\n                border-right-color: whitesmoke;\r\n                display: grid;\r\n                grid-template-columns: 1fr 2fr 1fr;\r\n                grid-auto-flow: column;\r\n                justify-content: space-between;\r\n                justify-items: center;\r\n                justify-self: center;\r\n                cursor: pointer;\r\n\r\n                &.selected {\r\n                    border-right-color: whitesmoke;\r\n                    background-color: #e4fee4;\r\n                    position: relative;\r\n\r\n                    &:after {\r\n                        content: '';\r\n                        position: absolute;\r\n                        content: \"\";\r\n                        width: 10px;\r\n                        height: 20px;\r\n                        border: solid $success;\r\n                        border-width: 0 3px 3px 0;\r\n                        transform: rotate(39deg);\r\n                        right: -16px;\r\n                        top: 7px;\r\n                    }\r\n                }\r\n                .size {\r\n                    span {\r\n                        display: block;\r\n                        padding: 3px;\r\n                    }\r\n                }\r\n\r\n                .pricing {\r\n                    display: grid;\r\n                    grid-auto-flow: column;\r\n                    grid-template-columns: 1fr 1fr 1fr;\r\n                    column-gap: 5px;\r\n                    align-items: center;\r\n\r\n                    span {\r\n                        height: fit-content;\r\n\r\n                        &.item-list-price {\r\n                            text-decoration: line-through;\r\n                        }\r\n\r\n                        &.item-savings {\r\n                            color: #aa1b04;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .left-container {\r\n        display: grid;\r\n        grid-auto-flow: column;\r\n        grid-template-columns: auto auto;\r\n        column-gap: 5px;\r\n\r\n        .image-thumbnails {\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: 1fr;\r\n            row-gap: 1px;\r\n            align-content: flex-start;\r\n\r\n            figure {\r\n                @include small-product-image(70px, 70px);\r\n                border: 1px solid #a1a1a1;\r\n                padding: 1px 0;\r\n                box-sizing: content-box;\r\n\r\n                img {\r\n                    opacity: 0.5;\r\n\r\n                    &:hover,\r\n                    &.selected {\r\n                        opacity: 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        figure {\r\n            img {\r\n                width: 280px;\r\n                height: 280px;\r\n            }\r\n        }\r\n    }\r\n\r\n    @media only screen and (min-width: $tablet-min-width) {\r\n        .left-container {\r\n            figure {\r\n                img {\r\n                    width: 500px;\r\n                    height: 500px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @media only screen and (min-width: 992px) {\r\n        flex-direction: row;\r\n        justify-content: center;\r\n\r\n        .right-container {\r\n            margin-top: 0;\r\n            align-self: flex-start;\r\n            padding: 0;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .main-container {\r\n        grid-template-columns: 200px auto;\r\n    }\r\n\r\n    .sidebar {\r\n        display: block;\r\n    }\r\n\r\n    .main-nosidebar-container {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: 1fr;\r\n        margin-top: 60px;\r\n        justify-content: center;\r\n    }\r\n}",
                    "styleUrl": "./detail.content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "route",
                        "type": "Router"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "metaService",
                        "type": "Meta"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "Meta",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "imageUrl": {
                    "name": "imageUrl",
                    "getSignature": {
                        "name": "imageUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 61
                    }
                },
                "showReviews": {
                    "name": "showReviews",
                    "getSignature": {
                        "name": "showReviews",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 72
                    }
                }
            },
            "templateData": "<div [ngClass]=\"{\r\n    'main-container': showSidebar,\r\n    'main-nosidebar-container': !showSidebar\r\n}\">\r\n    <ng-container *ngIf=\"showSidebar\">\r\n        <ng-container *ngTemplateOutlet=\"sidebarTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"itemDetail\">\r\n        <ng-container *ngTemplateOutlet=\"detailsTemplate\"></ng-container>\r\n\r\n        <ui-view-review-component></ui-view-review-component>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #detailsTemplate>\r\n    <div class=\"item-details-container\">\r\n        <div class=\"left-container\">\r\n            <div *ngIf=\"!isMobile\" class=\"image-thumbnails\">\r\n                <figure *ngFor=\"let image of itemDetail.images\">\r\n                    <img [ngClass]=\"{ 'selected': image.size === selectedImage }\" (mouseover)=\"selectedImage = image.size\" [src]=\"image.src\" />\r\n                </figure>\r\n            </div>            \r\n\r\n            <figure *ngIf=\"!isMobile\">\r\n                <img [src]=\"imageUrl\" />\r\n            </figure>\r\n\r\n            <div *ngIf=\"isMobile\">\r\n                <ui-carousel-component>\r\n                    <ng-container *ngFor=\"let image of itemDetail.images\">\r\n                        <ng-container *uiCarouselItem>\r\n                            <figure >\r\n                                <img [src]=\"image.src\" />\r\n                            </figure>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </ui-carousel-component>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"right-container\">\r\n            <div *ngIf=\"itemDetail.description\" class=\"detail-description\">\r\n                {{ itemDetail.description }}\r\n            </div>\r\n            <div *ngIf=\"itemDetail.brand\" class=\"detail-brand\">\r\n                <span class=\"pre-text\">{{metadata && metadata.by && metadata.by.label}}</span>\r\n                <span class=\"text\"> {{ itemDetail.brand }}</span>\r\n            </div>\r\n            <ui-rating-review-component [hidden]=\"!showReviews\" [reviewSummary]=\"itemDetail.reviewSummary\" [metadata]=\"metadata && metadata.starReview\"></ui-rating-review-component>\r\n            <ui-pricing-component [metadata]=\"metadata\" [pricing]=\"itemDetail.pricing\"></ui-pricing-component>\r\n            <ng-container *ngFor=\"let detail of itemDetail.details\">\r\n                <div *ngIf=\"isSpeciality(detail.title)\" class=\"speciality\">\r\n                    <span *ngIf=\"detail.value === 'Vegetarian'\" class=\"veg-symbol\">V</span>\r\n                    <span class=\"pre-text\" *ngIf=\"detail.value === 'Vegetarian'\">suitable for </span\r\n                    ><span class=\"text\">{{ detail.value }}</span>\r\n                </div>\r\n            </ng-container>\r\n            <ng-container *ngFor=\"let detail of itemDetail.details\">\r\n                <div *ngIf=\"isDescription(detail.title)\" class=\"item-descs\">\r\n                    <ul>\r\n                        <ng-container *ngFor=\"let d of detail.value\">\r\n                            <li>{{ d }}</li>\r\n                        </ng-container>\r\n                    </ul>\r\n                </div>\r\n            </ng-container>\r\n            <div class=\"country-container\">\r\n                country of origin: <span class=\"country\">{{ itemDetail.country }}</span>\r\n            </div>\r\n\r\n            <ui-add-to-shoppingcart-quantity [metadata]=\"metadata\" [item]=\"itemDetail\"></ui-add-to-shoppingcart-quantity>\r\n\r\n            <div class=\"packs-container\">\r\n                <div \r\n                    class=\"pack-item\"\r\n                    *ngFor=\"let i of packItems\"\r\n                    [ngClass]=\"{ 'selected' : isSelected(i._id) }\"\r\n                    (click)=\"onPackSelected(i._id)\"\r\n                >\r\n                    <div class=\"size\">\r\n                        <span>{{getSize(i.details)}}</span>\r\n                        <span>{{getSizePack(i.details)}}</span>\r\n                    </div>\r\n                    <ng-container *ngTemplateOutlet=\"packPrice; context: i\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #packPrice let-pricing=\"pricing\">\r\n    <div class=\"pricing\">\r\n        <span class=\"item-retail-price\"><span class=\"currency-symbol\">&#x20B9;</span>{{toFixed(pricing.retail)}}</span>\r\n        <span class=\"item-list-price\"><span class=\"currency-symbol\">&#x20B9;</span>{{toFixed(pricing.list)}}</span>\r\n        <span class=\"item-savings\"><span class=\"currency-symbol\">&#x20B9;</span>{{toFixed(pricing.savings)}}</span>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #sidebarTemplate>\r\n    <div class=\"sidebar\">\r\n        <div class=\"type\" (click)=\"onTypeClick()\">{{itemDetail && itemDetail.type}}</div>\r\n        <div class=\"sub-type\" (click)=\"onSubTypeClick()\">{{itemDetail && itemDetail.subType}}</div>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-b25dce0d4430fe3fd0baedf6c9b0152c",
            "file": "projects/common/src/lib/component/common/input/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-dropdown-component",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "line": 13,
                    "type": "Array<ILookup>"
                },
                {
                    "name": "style",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_style",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\nimport { ILookup } from '../../../../types/ILookup';\r\n\r\n@Component({\r\n    selector: 'ui-dropdown-component',\r\n    templateUrl: './dropdown.component.html',\r\n    styleUrls: ['./dropdown.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DropdownComponent extends BaseInputComponent {\r\n    private _style: string;\r\n    @Input() items: Array<ILookup>;\r\n    @Input() set style(value: string) {\r\n        this._style = value;\r\n    }\r\n\r\n    get style(): string {\r\n        return this._style;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    onChange(): void {\r\n        this.valueChange.emit({ name: this.name, value: this.data });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "extends": "BaseInputComponent",
            "accessors": {
                "style": {
                    "name": "style",
                    "setSignature": {
                        "name": "style",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "style",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"show\">\r\n    <div class=\"control-row\">\r\n        <div class=\"control\" [ngStyle]=\"style\">\r\n            <select\r\n                uiCheckIsValid\r\n                [id]=\"id\"\r\n                name=\"model\"\r\n                #inputControl\r\n                #model\r\n                [(ngModel)]=\"data\"\r\n                [ngModelOptions]=\"{ updateOn: 'change' }\"\r\n                required\r\n                (change)=\"onChange()\"\r\n                [ngClass]=\"data && data.trim().length != '-1' ? 'has-value' : ''\"\r\n            >\r\n                <option *ngIf=\"metadata && metadata.pleaseSelect\" value=\"-1\">\r\n                    {{ metadata && metadata.pleaseSelect }}\r\n                </option>\r\n                <option *ngFor=\"let i of items\" [selected]=\"i.id === data\" [value]=\"i.id\">\r\n                    {{ i.value }}\r\n                </option>\r\n            </select>\r\n            <ui-label required=\"metadata && metadata.validators && metadata.validators.required === ''\">\r\n                {{ metadata && metadata.label }}\r\n            </ui-label>\r\n            <label [ngClass]=\"ignoreMediaQueries ? 'ignore' : ''\"\r\n                >{{ metadata && metadata.label }}\r\n                <span *ngIf=\"metadata && metadata.validators && metadata.validators.required === ''\">*</span>\r\n            </label>\r\n            <div *ngIf=\"!disableValidation && (model.dirty || model.touched) && model.invalid\" class=\"error\">\r\n                <span *ngIf=\"model.errors.required\">{{ metadata.error.required }}</span>\r\n            </div>\r\n            <div class=\"focus-indicator\"></div>\r\n            <div class=\"background\"></div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "EmailVerificationComponent",
            "id": "component-EmailVerificationComponent-67ad856179c9e3d944e66c2f91cc804c",
            "file": "projects/customer/src/lib/components/email-verification/email-verification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-email-verification-component",
            "styleUrls": [
                "./email-verification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./email-verification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "expired",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "resent",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "result",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "timeInSeconds",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "verificationFailure",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "verified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "verify",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onResendClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    BaseComponent,\r\n    NavigationService,\r\n    RouteKeys,\r\n    VerificationService,\r\n    VerificationState,\r\n    VerificationType,\r\n    WINDOW,\r\n} from '@common/src/public-api';\r\nimport { from, timer } from 'rxjs';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-email-verification-component',\r\n    templateUrl: './email-verification.component.html',\r\n    styleUrls: ['./email-verification.component.scss'],\r\n})\r\nexport class EmailVerificationComponent extends BaseComponent {\r\n    metadata: any;\r\n    verify: boolean;\r\n    verified: boolean;\r\n    verificationFailure: boolean;\r\n    expired: boolean;\r\n    resent: boolean;\r\n    timeInSeconds: number;\r\n    result: { state: VerificationState; type: VerificationType; email: string };\r\n    private debug: boolean = false;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        private verificationService: VerificationService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.setState('verify');\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['EmailVerification'];\r\n        this.timeInSeconds = this.metadata.autoRedirect.time;\r\n\r\n        const key = this.activatedRoute.snapshot.params['hash'];\r\n\r\n        if (key) {\r\n            try {\r\n                await this.tokenService.xsrf();\r\n                this.result = await this.verificationService.verifyEmail(key);\r\n                if (this.result.state === VerificationState.Verified) {\r\n                    timer(1000, 1000)\r\n                        .pipe(take(2), takeUntil(this.$destroy))\r\n                        .subscribe((_) => --this.timeInSeconds);\r\n                    from([0])\r\n                        .pipe(delay(3000), takeUntil(this.$destroy))\r\n                        .subscribe(async (_) => {\r\n                            const redirect =\r\n                                this.result.type === VerificationType.NewAccountVerify ? RouteKeys.Signin : RouteKeys.PasswordReset;\r\n                            await this.navigationService.navigateForUrl(redirect);\r\n                        });\r\n                    this.setState('verified');\r\n                } else if (this.result.state === VerificationState.Expired) {\r\n                    this.setState('expired');\r\n                } else {\r\n                    this.setState('failure');\r\n                }\r\n            } catch (e) {\r\n                this.setState('failure');\r\n            }\r\n        } else {\r\n            this.setState('failure');\r\n        }\r\n    }\r\n\r\n    public async onResendClick(): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        await this.verificationService.resendEmail(this.result.type, this.result.email);\r\n        this.setState('resent');\r\n    }\r\n\r\n    private setState(state: string): void {\r\n        this.verify = this.debug || state === 'verify';\r\n        this.verificationFailure = this.debug || state === 'failure';\r\n        this.verified = this.debug || state === 'verified';\r\n        this.expired = this.debug || state === 'expired';\r\n        this.resent = this.debug || state === 'resent';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    position: relative;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    margin: 40px auto;\r\n    \r\n\r\n    > * {\r\n        margin: 0;\r\n    }\r\n\r\n    .verification-failure,\r\n    .verified,\r\n    .resend,\r\n    .expired,\r\n    .verify {\r\n        color: $mobile-regular-color;\r\n    }\r\n\r\n    .acceptance {\r\n        margin-top: 20px;\r\n        font-size: 0.8em;\r\n    }\r\n\r\n    .btn,\r\n    .resend,\r\n    .verified,\r\n    .expired,\r\n    .verification-failure {\r\n        margin-top: 20px;\r\n        font-size: 0.9em;\r\n        line-height: 23px;\r\n    }\r\n\r\n    .verified {\r\n        .success {\r\n            color: $success-text-color;\r\n            font-weight: bold;\r\n        }\r\n    }\r\n\r\n    .expired {\r\n        margin-top: 20px;\r\n        line-height: 23px;\r\n        color: $error-text-color;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .verification-failure {\r\n        .failure {\r\n            ::ng-deep & {\r\n                color: $error-text-color;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n    }\r\n\r\n    .resend {\r\n        .success {\r\n            ::ng-deep & {\r\n                color: $success-text-color;\r\n            }\r\n        }\r\n\r\n        .bold {\r\n            ::ng-deep & {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        .statement-container {\r\n            ::ng-deep & {\r\n                line-height: 23px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .acceptance {\r\n        border-top: 3px solid #f1f1f1;\r\n        padding-top: 10px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./email-verification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"container\">\r\n    <ng-container *ngIf=\"verify\">\r\n        <div class=\"verify\">\r\n            <span>{{ metadata && metadata.emailVerify && metadata.emailVerify.label }}</span>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"verified\">\r\n        <div class=\"verified\">\r\n            <span class=\"success\">{{\r\n                metadata && metadata.emailVerifySuccess && metadata.emailVerifySuccess.label\r\n            }}</span>\r\n            <span\r\n                >{{ metadata && metadata.autoRedirect && metadata.autoRedirect.label }} {{ timeInSeconds || '' }}\r\n                {{ metadata && metadata.autoRedirect && metadata.autoRedirect.timeComponent }}</span\r\n            >\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"resent\">\r\n        <div class=\"resend\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.resendSuccess\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"expired\">\r\n        <div class=\"expired\">\r\n            <div>{{ metadata && metadata.emailExpired && metadata.emailExpired.label }}</div>\r\n            <button [hidden]=\"!expired\" class=\"btn btn-light btn-light-bordered\" (click)=\"onResendClick()\">\r\n                {{ metadata && metadata.resend && metadata.resend.label }}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"verificationFailure\">\r\n        <div class=\"verification-failure\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.verificationFailure\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"metadata && metadata.acceptance && metadata.acceptance.statement\">\r\n        <div class=\"acceptance\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.acceptance\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-6206fb4a5120e49cc1eeb9578190b6d0",
            "file": "projects/shell/src/lib/components/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-error",
            "styleUrls": [
                "./error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'ui-error',\r\n    templateUrl: './error.component.html',\r\n    styleUrls: ['./error.component.scss'],\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n    errorType: string;\r\n\r\n    constructor(private titleService: Title, private activatedRoute: ActivatedRoute) {}\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.errorType = this.activatedRoute.snapshot.params['type'];\r\n        this.titleService.setTitle('Amreet Bazzar - Error');\r\n\r\n        await Promise.resolve();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.error-container {\r\n    width: 100%;\r\n    max-width: 680px;\r\n    border: 1px solid $highlight;\r\n    margin: auto;\r\n    padding: 23px;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 20%;\r\n    transform: translate(-50%, -50%);\r\n    color: $mobile-regular-color;\r\n\r\n    p {\r\n        margin-bottom: 20px;\r\n\r\n        span {\r\n            font-weight: bold;\r\n            font-size: 0.9em;\r\n        }\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        color: $highlight;\r\n    }\r\n}\r\n",
                    "styleUrl": "./error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"errorType === 'fatal'\" class=\"error-container\">\r\n    <p>Opps something went wrong</p>\r\n    <p>Support team has been notifed, please try again later</p>\r\n    <p>Amreet Bazaar team is working hard to resolve the issue at the earliest.</p>\r\n\r\n    <p>Go to <a [routerLink]=\"['/home']\">Home page</a></p>\r\n</div>\r\n\r\n<div *ngIf=\"errorType === 'payment'\" class=\"error-container\">\r\n    <p>Opps something went wrong</p>\r\n    <p>There was a problem processing your payment / order, quoting: <span>PF001</span></p>\r\n    <p>Please contact <a [routerLink]=\"['/contact']\">support</a> team</p>\r\n</div>\r\n"
        },
        {
            "name": "FeatureReviewComponent",
            "id": "component-FeatureReviewComponent-a57b703589128ba2a930a18c7fa19134",
            "file": "projects/common/src/lib/component/review/feature/feature-review.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-feature-review-component",
            "styleUrls": [
                "./feature-review.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature-review.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "featuresRating",
                    "line": 14,
                    "type": "Array<literal type>"
                },
                {
                    "name": "metadata",
                    "line": 15,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getRating",
                    "args": [
                        {
                            "name": "r",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "r",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { WINDOW } from \"@common/src/lib/services/window.service\";\r\nimport { ProductRating } from \"@common/src/lib/types/product-rating\";\r\n\r\nimport { BaseComponent } from \"../../base.component\";\r\n\r\n@Component({\r\n    selector: 'ui-feature-review-component',\r\n    templateUrl: './feature-review.component.html',\r\n    styleUrls: ['./feature-review.component.scss']\r\n})\r\nexport class FeatureReviewComponent extends BaseComponent {\r\n    @Input() featuresRating: Array<{ productRating: ProductRating, value: number }>;\r\n    @Input() metadata: any;\r\n    \r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public getRating(r: any): string {\r\n        return `--rating: ${r && r.value || 0}`;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src//scss//variables';\r\n@import '../../../../../../ui/src//scss//mixins';\r\n\r\n.container {\r\n    position: relative;\r\n    background-color: #fff;\r\n    padding: 11px;\r\n    font-size: 0.85em;\r\n\r\n    .header {\r\n        @include header;\r\n        font-size: 1.2rem;\r\n    }\r\n\r\n    .feature-rating {\r\n        .feature-item {\r\n            margin: 5px 0;\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: 1fr 1fr;\r\n\r\n            &:first-child {\r\n                margin-top: 10px;\r\n            }\r\n            span:last-child {\r\n                text-align: left;\r\n            }\r\n        }\r\n\r\n        .no-reviews {\r\n            cursor: default;\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {\r\n        .feature-rating {\r\n            .feature-item {                \r\n                span:last-child {\r\n                    text-align: right;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./feature-review.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div *ngIf=\"featuresRating && metadata\" class=\"container\">\r\n    <div class=\"header\">\r\n        {{metadata && metadata.feature && metadata.feature.label}}\r\n    </div>\r\n    <div class=\"feature-rating\">\r\n        <div class=\"feature-item\" *ngFor=\"let rating of featuresRating\">\r\n            <span>{{rating.feature}}</span>\r\n            <span class=\"five-star\" [attr.style]=\"getRating(rating)\" [ngClass]=\"{ 'no-reviews': rating.value === 0 }\"></span>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-68c7ba48c768d52285959827aa76c5f4",
            "file": "projects/footer/src/lib/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "footerItems",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedFooter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showChildFooter",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedFooter",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { FooterService } from '../../footer.service';\r\nimport { BaseComponent, WINDOW } from '@common/src/public-api';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'ui-footer',\r\n    templateUrl: './footer.component.html',\r\n    styleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent extends BaseComponent {\r\n    public footerItems: Array<any>;\r\n    public showChildFooter: boolean;\r\n    public selectedFooter: string;\r\n\r\n    constructor(\r\n        private footerService: FooterService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.footerService\r\n            .get()\r\n            .pipe(takeUntil(this.$destroy))\r\n            .subscribe((items) => (this.footerItems = items));\r\n        this.showChildFooter = false;\r\n        this.selectedFooter = '';\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public setSelectedFooter(id: string): void {\r\n        this.showChildFooter = true;\r\n\r\n        this.selectedFooter = this.selectedFooter === id ? '' : id;\r\n    }\r\n\r\n    public isSelected(id: string): boolean {\r\n        const selected = this.showChildFooter && this.selectedFooter === id;\r\n        return selected;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.footerbar {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    background-color: $footer-background-color;\r\n\r\n    ul {\r\n        list-style: none;\r\n        width: 100%;\r\n\r\n        &.placeholder-item {\r\n            display: none;\r\n        }\r\n\r\n        li {\r\n            text-transform: capitalize;\r\n            font-size: $mobile-footer-size;\r\n            padding: 9px;\r\n        }\r\n\r\n        &.footerbar-list {\r\n            min-height: 36px;\r\n            max-height: 36px;\r\n            transition: 2s;\r\n            overflow-y: hidden;\r\n\r\n            i.fa-caret-down {\r\n                display: block;\r\n            }\r\n\r\n            i.fa-caret-up {\r\n                display: none;\r\n            }\r\n\r\n            &.animate {\r\n                max-height: 250px;\r\n\r\n                .fa-caret-down {\r\n                    display: none;\r\n                }\r\n\r\n                .fa-caret-up {\r\n                    display: block;\r\n                }\r\n            }\r\n\r\n            .footer-item {\r\n                border: 1px solid transparent;\r\n                border-bottom: 1px solid $footer-border-color;\r\n            }\r\n\r\n            &.no-border .footer-item {\r\n                border-bottom: 1px solid transparent;\r\n            }\r\n\r\n            .child-container {\r\n                font-size: $mobile-footer-item-size;\r\n                color: #111;\r\n            }\r\n        }\r\n\r\n        .footer-item {\r\n            position: relative;\r\n\r\n            .fa {\r\n                position: absolute;\r\n                right: 9px;\r\n                color: $mobile-medium-color;\r\n                font-size: 1.1em;\r\n                top: 12px;\r\n            }\r\n        }\r\n\r\n        .footer-child-item li {\r\n            padding: 4px 18px;\r\n            margin: 8px 0;\r\n            \r\n            &:last-child {\r\n                padding-bottom: 30px;\r\n            }\r\n\r\n            &.list-item-separator {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .footerbar {\r\n        grid-template-columns: 5% repeat(4, 1fr) 5%;\r\n        justify-content: center;\r\n\r\n        ul {\r\n            &.footerbar-list {\r\n                max-height: unset;\r\n\r\n                .footer-item,\r\n                .footer-item a {\r\n                    cursor: default;\r\n                }\r\n            }\r\n            text-align: center;\r\n\r\n            &.placeholder-item {\r\n                display: block;\r\n            }\r\n        }\r\n\r\n        i.fa {\r\n            display: none !important;\r\n        }\r\n\r\n        .footerbar-list {\r\n            .footer-item {\r\n                border: 1px solid transparent !important;\r\n            }\r\n\r\n            &:last-child {\r\n                border-bottom: 1px solid transparent !important;\r\n            }\r\n        }\r\n\r\n        li.list-item-separator {\r\n            display: block !important;\r\n            height: 1px;\r\n            padding: 0 !important;\r\n            cursor: default;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "footerService",
                        "type": "FooterService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "footerService",
                        "type": "FooterService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<ng-container *ngIf=\"footerItems\">\r\n    <div class=\"footerbar\">\r\n        <ul class=\"placeholder-item\"></ul>\r\n        <ng-container *ngFor=\"let item of footerItems; let idx = index\">\r\n            <ul\r\n                class=\"footerbar-list\"\r\n                [ngClass]=\"{\r\n                    animate: isSelected(item._id),\r\n                    'no-border': footerItems.length === idx + 1\r\n                }\"\r\n            >\r\n                <li class=\"footer-item\" (click)=\"item.childItems ? setSelectedFooter(item._id) : null\">\r\n                    <a class=\"footer-link\" (click)=\"(false)\">{{ item.label }}</a>\r\n                    <ng-container *ngIf=\"item.childItems\">\r\n                        <i class=\"fa fa-caret-down\"></i>\r\n                        <i class=\"fa fa-caret-up\"></i>\r\n                    </ng-container>\r\n                </li>\r\n                <ng-container *ngIf=\"item.childItems\">\r\n                    <ng-container *ngTemplateOutlet=\"childItemsTemplate; context: item\"></ng-container>\r\n                </ng-container>\r\n            </ul>\r\n        </ng-container>\r\n        <ul class=\"placeholder-item\"></ul>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #childItemsTemplate let-childItems=\"childItems\">\r\n    <div class=\"child-container\">\r\n        <div class=\"child-items\">\r\n            <ul class=\"footer-child-item item-list\">\r\n                <ng-container *ngFor=\"let item of childItems\">\r\n                    <li>{{ item.label }}</li>\r\n                    <li class=\"list-item-separator\"></li>\r\n                </ng-container>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ForgotPasswordComponent",
            "id": "component-ForgotPasswordComponent-d474a75ba4063ddf11801d776776d67c",
            "file": "projects/customer/src/lib/components/forgot-password/forgot-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-forgot-password-component",
            "styleUrls": [
                "./forgot-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "emailSent",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "recover",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "userModel",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onSendEmailClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onSendOtpClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { BaseComponent, DataStoreService, NavigationService, RouteKeys, VerificationService, VerificationType, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-forgot-password-component',\r\n    templateUrl: './forgot-password.component.html',\r\n    styleUrls: ['./forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent extends BaseComponent {\r\n    metadata: any;\r\n    recover: boolean;\r\n    emailSent: boolean;\r\n    userModel: { isoCode: string; mobile: string; email: string };\r\n    errors: Array<any> = [];\r\n\r\n    private debug: boolean = false;\r\n\r\n    constructor(\r\n        private verificationService: VerificationService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private navigationService: NavigationService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.setState('recover');\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['ForgotPassword'];\r\n        this.userModel = this.activatedRoute.snapshot.data.recovery;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public async onSendOtpClick(): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        await this.verificationService.sendOtp(\r\n            VerificationType.ResetPassword,\r\n            this.userModel.isoCode,\r\n            this.userModel.mobile\r\n        );\r\n        await this.dataStoreService.push('fp-user', null);\r\n        await this.dataStoreService.push('verify-otp', {\r\n            isoCode: this.userModel.isoCode,\r\n            mobile: this.userModel.mobile,\r\n            verificationType: VerificationType.ResetPassword,\r\n        });\r\n        this.navigationService.navigateForUrl(RouteKeys.VerifyOtp);\r\n    }\r\n\r\n    public async onSendEmailClick(): Promise<void> {\r\n        await this.tokenService.xsrf();\r\n        await this.verificationService.sendEmail(VerificationType.ResetPassword, this.userModel.email);\r\n        await this.dataStoreService.push('fp-user', null);\r\n\r\n        this.setState('emailsent');\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return this.debug || this.errors.length > 0;\r\n    }\r\n\r\n    private setState(state: string): void {\r\n        this.recover = this.debug || state === 'recover';\r\n        this.emailSent = this.debug || state === 'emailsent';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n@import '../../../../../ui/src/assets/fonts/material-icons/material-icons.css';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    position: relative;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    margin: 40px auto;\r\n\r\n    > * {\r\n        margin: 0;\r\n    }\r\n\r\n    .form-container {\r\n        .header {\r\n            color: $highlight;\r\n            margin-bottom: 10px;\r\n            font-weight: 500;\r\n            font-size: 1.5em;\r\n        }\r\n\r\n        .error {\r\n            span:not(:first-child) {\r\n                color: $mobile-regular-color;\r\n                margin-top: 8px;\r\n                display: block;\r\n            }\r\n\r\n            span:first-child {\r\n                font-weight: 500;\r\n                font-size: 1.1em;\r\n            }\r\n        }\r\n\r\n        .row {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .btn {\r\n            margin-top: 20px;\r\n        }\r\n        .or {\r\n            text-align: center;\r\n            margin-top: 20px;\r\n            color: $highlight;\r\n            font-size: 1em;\r\n            font-weight: 600;\r\n        }\r\n        .email-sent,\r\n        .email-description,\r\n        .otp-description {\r\n            margin-top: 20px;\r\n            font-size: 0.9em;\r\n            color: $mobile-regular-color;\r\n\r\n            .email,\r\n            .mobile {\r\n                font-weight: bold;\r\n            }\r\n            .success {\r\n                color: $success-text-color;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        .acceptance {\r\n            margin-top: 20px;\r\n            font-size: 0.8em;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./forgot-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div class=\"form-container\">\r\n        <h4 class=\"header\">\r\n            {{ metadata && metadata.header && metadata.header.label }}\r\n        </h4>\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"recover\">\r\n            <ng-container *ngTemplateOutlet=\"recoverTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"emailSent\">\r\n            <ng-container *ngTemplateOutlet=\"emailSentTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"metadata && metadata.acceptance && metadata.acceptance.statement\">\r\n            <div class=\"acceptance\">\r\n                <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.acceptance\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n\r\n<ng-template #recoverTemplate>\r\n    <div class=\"otp-description\">\r\n        <span>{{ metadata && metadata.otpDescription && metadata.otpDescription.label }}</span>\r\n        <span class=\"mobile\">{{ userModel && userModel.isoCode }}{{ userModel && userModel.mobile | mask: 4 }}</span>\r\n    </div>\r\n    <button class=\"btn btn-light btn-light-bordered\" (click)=\"onSendOtpClick()\">\r\n        {{ metadata && metadata.sendOtp && metadata.sendOtp.label }}\r\n    </button>\r\n    <div class=\"or\">Or</div>\r\n    <div class=\"email-description\">\r\n        <span>{{ metadata && metadata.emailDescription && metadata.emailDescription.label }}</span>\r\n        <span class=\"email\">{{ userModel && userModel.email | emailMask }}</span>\r\n    </div>\r\n    <button class=\"btn btn-light btn-light-bordered\" (click)=\"onSendEmailClick()\">\r\n        {{ metadata && metadata.sendEmail && metadata.sendEmail.label }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #emailSentTemplate>\r\n    <div class=\"email-sent\">\r\n        <span class=\"success\">{{ metadata && metadata.emailSentSuccess && metadata.emailSentSuccess.label }}</span>\r\n        <span class=\"email\">{{ userModel && userModel.email | emailMask }}</span>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "GroupContainerComponent",
            "id": "component-GroupContainerComponent-fb5c8bfaf8c326dcff8ec28014ab80df",
            "file": "projects/content/src/lib/components/shopping-cart/child-components/group-container/group-container-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-group-container",
            "styleUrls": [
                "./group-container-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-container-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "group",
                    "line": 12,
                    "type": "ShoppingCartItemGroup"
                },
                {
                    "name": "metadata",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { BaseComponent, ShoppingCartItemGroup, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-group-container',\r\n    templateUrl: './group-container-component.html',\r\n    styleUrls: ['./group-container-component.scss'],\r\n})\r\nexport class GroupContainerComponent extends BaseComponent {\r\n    @Input() group: ShoppingCartItemGroup;\r\n    @Input() metadata: any;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n    ) {\r\n        super(router, window);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n\r\n.group-label {\r\n    display: none;\r\n    color: $highlight;\r\n    font-weight: 450;\r\n    font-size: 17px;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.item-container:not(:first-child) {\r\n    margin-top: 20px;\r\n    border-top: 1px solid whitesmoke;\r\n    padding-top: 20px;\r\n}\r\n",
                    "styleUrl": "./group-container-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"group-label\">{{ group.key }}</div>\r\n<ng-container *ngFor=\"let item of group.items\">\r\n    <div class=\"item-container\">\r\n        <ui-shoppingcart-item-container [metadata]=\"metadata\" [item]=\"item\"></ui-shoppingcart-item-container>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "HamburgerMenuComponent",
            "id": "component-HamburgerMenuComponent-a61038fba6ec9ab9eeca7e63ab9e1cd3",
            "file": "projects/menu/src/lib/components/burger-menu/burger-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-burger-menu",
            "styleUrls": [
                "./burger-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./burger-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 28,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedMenu",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showLanguagePopup",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "activeChildItems",
                    "args": [
                        {
                            "name": "childItems",
                            "type": "Array<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "childItems",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 137,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLanguageChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onSignInClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 120,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onSignOutClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onSubCategoryClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        },
                        {
                            "name": "category",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedMenu",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Output } from '@angular/core';\r\nimport { BaseMenuComponent } from '../base-menu.component';\r\nimport { HamburgerMenuStateService } from '../../services';\r\nimport { Router, ActivationEnd, NavigationStart } from '@angular/router';\r\nimport { filter, first, takeUntil } from 'rxjs/operators';\r\nimport {\r\n    ConfigService,\r\n    MenuStateService,\r\n    NavigationService,\r\n    RouteKeys,\r\n    WINDOW,\r\n    AuthService,\r\n    AccountService\r\n} from '@common/src/public-api';\r\nimport { from } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'ui-burger-menu',\r\n    templateUrl: './burger-menu.component.html',\r\n    styleUrls: ['./burger-menu.component.scss'],\r\n})\r\nexport class HamburgerMenuComponent extends BaseMenuComponent {\r\n    menuItems: Array<any> = [];\r\n    selectedMenu: string;\r\n    metadata: any;\r\n    showLanguagePopup: boolean;\r\n\r\n    @Output() close: EventEmitter<void> = new EventEmitter<void>();\r\n    constructor(\r\n        menuStateService: MenuStateService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        private burgerMenuStateService: HamburgerMenuStateService,\r\n        private navigationService: NavigationService,\r\n        private configService: ConfigService,\r\n        private authService: AuthService,\r\n        private accountService: AccountService\r\n    ) {\r\n        super(router, window, menuStateService);\r\n    }\r\n    \r\n    protected async init(): Promise<void> {\r\n        if (this.router.events) {\r\n            this.router.events\r\n                .pipe(\r\n                    filter((e) => (e instanceof ActivationEnd && e.snapshot.data && e.snapshot.data.burgerMenu) \r\n                        || (e instanceof NavigationStart && e.url)),\r\n                    takeUntil(this.$destroy)                    \r\n                )\r\n                .subscribe((e: any) => {\r\n                    if (e instanceof NavigationStart) {\r\n                        this.currentPage = e.url;\r\n                    } else {\r\n                        this.menuItems = e.snapshot.data.burgerMenu;\r\n                    }\r\n\r\n                    if (e.snapshot && e.snapshot.data && e.snapshot.data.metadata && e.snapshot.data.metadata['BurgerMenu']) {\r\n                        this.metadata = e.snapshot.data.metadata['BurgerMenu'];\r\n                    }\r\n                });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get firstName(): string {\r\n        return this.authService && this.authService.user && this.authService.user.firstName ? `, ${this.authService.user.firstName}` : '';\r\n    }\r\n\r\n    public get showChildMenu(): boolean {\r\n        return this.burgerMenuStateService.showChildMenu;\r\n    }\r\n\r\n    public set showChildMenu(value: boolean) {\r\n        this.burgerMenuStateService.showChildMenu = value;\r\n    }\r\n\r\n    public get showMenu(): boolean {\r\n        return this.burgerMenuStateService.showMenu;\r\n    }\r\n\r\n    public set showMenu(value: boolean) {\r\n        this.burgerMenuStateService.showMenu = value;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.configService.getConfiguration().selectedLanguage;\r\n    }\r\n\r\n    public get authenticated(): boolean {\r\n        return this.authService && this.authService.user && this.authService.user.authenticated;\r\n    }\r\n\r\n    public setSelectedMenu(item: any): void {\r\n        if (item && item.childItems && item.childItems.length) {\r\n            this.showChildMenu = true;\r\n            this.selectedMenu = item.id;\r\n        }\r\n    }\r\n\r\n    public isSelected(id: string): boolean {\r\n        return this.showChildMenu && this.selectedMenu === id;\r\n    }\r\n    \r\n    activeChildItems(childItems: Array<any>): Array<any> {\r\n        return childItems.filter(c => c.active === true).sort((a: any, b: any) => a.order - b.order);\r\n    }\r\n\r\n    onClose(e: Event): void {\r\n        if ((<HTMLElement>e.target).textContent.toLowerCase() !== 'back') {\r\n            this.close.emit();\r\n        }\r\n    }\r\n\r\n    public async onSubCategoryClick(item: any, category: string): Promise<void> {\r\n        this.close.emit();\r\n        const addToHistory = !this.currentPage.includes('pantry/list');\r\n        await this.navigationService.navigateForSubcategory(item.url, item.label, category, addToHistory, this.currentPage);\r\n    }\r\n\r\n    public async onSignInClick(): Promise<void> {\r\n        this.close.emit();\r\n        this.router.navigateByUrl(RouteKeys.Signin);\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onSignOutClick(): Promise<void> {\r\n        this.close.emit();\r\n        from(this.authService.logout()).subscribe(async (_) => await this.navigationService.navigateHomeClick());\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public onLanguageChange(): void {\r\n        this.showLanguagePopup = false;\r\n    }\r\n\r\n    public async onItemClick(key: string): Promise<void> {\r\n        await this.accountService.navigate(key);\r\n\r\n        this.close.emit();\r\n    }\r\n\r\n    public get accountOptions(): Array<any> {\r\n        return this.metadata && this.metadata.accountOptions;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n\r\n.navbar {\r\n    padding-right: 4px;\r\n\r\n    .navbar-nav {\r\n        transition: 1s;\r\n        left: 10px;\r\n        position: relative;\r\n        width: 265px;\r\n        top: 10px;\r\n\r\n        &.animate {\r\n            left: -265px;\r\n        }\r\n\r\n        &.navbar-nav-bordered > li:first-child {\r\n            left: -10px;\r\n            padding: 10px 0 17px 10px;\r\n            background-color: $tertiary-color;\r\n            width: 280px;\r\n        }\r\n    }\r\n\r\n    ul:not(.navbar-nav-bordered) {\r\n        .nav-item {\r\n            .nav-link:hover,\r\n            &:hover>a {\r\n                color: $secondary-color;\r\n                font-size: 11pt;\r\n            }\r\n        }\r\n    }\r\n    .nav-item {\r\n        border-bottom: 1px solid transparent;\r\n        min-height: 35px;\r\n        padding-top: 6px;\r\n        position: relative;\r\n\r\n        &.list-header {\r\n            padding: 15px 0;\r\n            padding-bottom: 2px;\r\n            border-bottom: 1px solid transparent;\r\n            font-size: 1.4rem;\r\n        }\r\n\r\n        .nav-link {\r\n            padding: 3px 0;\r\n            min-height: 33px;            \r\n        }\r\n\r\n        span.nav-link a {\r\n            color: $secondary-color;\r\n            font-size: 1.1rem;\r\n            font-weight: 500;\r\n            vertical-align: top;\r\n        }\r\n        \r\n        i {\r\n            position: absolute;\r\n            right: -4px;\r\n            top: 6px;\r\n            font-size: 1.2em;\r\n            color: $hamburger-item-border-color;\r\n            width: 30px;\r\n            height: 22px;\r\n        }\r\n\r\n        .language-options {\r\n            border: $border;\r\n            padding: 7px 30px 7px 10px;\r\n            display: inline;\r\n            color: $secondary-color;\r\n            margin-left: 5px;\r\n            font-weight: 500;\r\n            position: relative;\r\n\r\n            &:after {\r\n                @include down-arrow(5px, 9px);\r\n            }\r\n\r\n            ui-language-selector-component {\r\n                position: absolute;\r\n                left: -86px;\r\n                top: 36px;\r\n\r\n                .container:after {\r\n                    ::ng-deep & {\r\n                        right: calc(100% - 178px)!important;\r\n                        top: -4px!important;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.child-container {\r\n    top: 0;\r\n    left: 300px;\r\n    position: absolute;\r\n    max-width: 300px;\r\n    min-width: 300px;\r\n    padding: 15px 20px;\r\n    padding-right: 2px;\r\n    padding-bottom: 0;\r\n    transition: 1s;\r\n    z-index: 1;\r\n    background-color: $primary-color;\r\n\r\n    &.animate {\r\n        left: 0px;\r\n    }\r\n\r\n    .child-items {\r\n        display: grid;\r\n        grid-template-columns: 100%;\r\n\r\n        .child-toolbar {\r\n            position: relative;\r\n            margin-bottom: 10px;\r\n\r\n            i {\r\n                position: absolute;\r\n                left: 0;\r\n                top: -3px;\r\n                transform: rotate(180deg);\r\n                color: $secondary-color;\r\n            }\r\n\r\n            span {\r\n                margin-left: 27px;;\r\n            }\r\n        }\r\n\r\n        .menu-child-item {\r\n            margin: 0;\r\n            cursor: pointer;\r\n            line-height: 16px;\r\n            text-transform: initial;\r\n\r\n            &:first-child>li {\r\n                margin-top: 7px;\r\n            }\r\n\r\n            &.item {\r\n                margin-left: 20px;\r\n                width: 250px;\r\n            }\r\n\r\n            &.item-list {                \r\n                li:not(.list-header) {\r\n                    &.highlight {\r\n                        color: $highlight;\r\n                    }\r\n                }\r\n            }\r\n\r\n            li:not(.separator) {\r\n                padding: 9px 0;\r\n                line-height: 1.3rem;\r\n            }\r\n\r\n            li:hover,\r\n            li:hover>a {\r\n                color: #999;\r\n                font-size: 10pt;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n\r\n    .list-items {\r\n        margin-left: 20px;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    li.separator {\r\n        height: 1px;\r\n        cursor: default;\r\n        background-color: $hamburger-item-border-color;\r\n        margin-bottom: 2px;\r\n    }\r\n\r\n    a {\r\n        text-transform: initial;\r\n        font-size: $burger-menu-font-size;\r\n    }\r\n}",
                    "styleUrl": "./burger-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "burgerMenuStateService",
                        "type": "HamburgerMenuStateService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "burgerMenuStateService",
                        "type": "HamburgerMenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseMenuComponent",
            "accessors": {
                "firstName": {
                    "name": "firstName",
                    "getSignature": {
                        "name": "firstName",
                        "type": "string",
                        "returnType": "string",
                        "line": 65
                    }
                },
                "showChildMenu": {
                    "name": "showChildMenu",
                    "setSignature": {
                        "name": "showChildMenu",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 73,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showChildMenu",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 69
                    }
                },
                "showMenu": {
                    "name": "showMenu",
                    "setSignature": {
                        "name": "showMenu",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showMenu",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 77
                    }
                },
                "language": {
                    "name": "language",
                    "getSignature": {
                        "name": "language",
                        "type": "string",
                        "returnType": "string",
                        "line": 85
                    }
                },
                "authenticated": {
                    "name": "authenticated",
                    "getSignature": {
                        "name": "authenticated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 89
                    }
                },
                "accountOptions": {
                    "name": "accountOptions",
                    "getSignature": {
                        "name": "accountOptions",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 143
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"menuItems\">\r\n  <nav class=\"navbar\" (outsideClick)=\"onClose($event)\">\r\n    <div id=\"navbarSupportedContent\">\r\n        <ng-container *ngIf=\"authenticated && metadata\">\r\n            <ng-container *ngTemplateOutlet=\"authTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!authenticated && metadata\">\r\n            <ng-container *ngTemplateOutlet=\"notAuthTemplate\"></ng-container>\r\n        </ng-container>\r\n\r\n      <ul class=\"navbar-nav\" [ngClass]=\"{ animate: showChildMenu }\">\r\n        <ng-container *ngFor=\"let item of menuItems;let idx = index;\">\r\n          <ng-container *ngIf=\"item.itemType === 'List'\">\r\n            <li class=\"nav-item list-header\" [style.marginTop]=\"idx === 0 ? 0 : '20px'\">{{item.label}}</li>\r\n            <ul class=\"list-items\">\r\n              <ng-container *ngFor=\"let listItem of activeChildItems(item.childItems);let idx = index\">\r\n                <li class=\"nav-item\"  (click)=\"setSelectedMenu(listItem)\">\r\n                  <a class=\"nav-link\">{{listItem.label}}</a>\r\n                  <ng-container *ngTemplateOutlet=\"chevronRightTemplate; context:getItem(listItem)\"></ng-container>\r\n                </li>                \r\n                <li class=\"separator\"></li>\r\n              </ng-container>\r\n            </ul>\r\n          </ng-container>\r\n        </ng-container>\r\n        <li *ngIf=\"metadata\" class=\"nav-item list-header\" [style.marginTop]=\"'20px'\">{{metadata && metadata.settings && metadata.settings.label}}</li>\r\n        <ul *ngIf=\"metadata\" class=\"list-items\">\r\n            <li class=\"nav-item\">\r\n                {{metadata && metadata.language && metadata.language.label}}: \r\n                <div \r\n                    class=\"language-options\"\r\n                    (mouseleave)=\"showLanguagePopup = false;\"\r\n                    (mouseover)=\"showLanguagePopup = true;\"\r\n                >\r\n                    {{language}}\r\n                    <ui-language-selector-component [hidden]=\"!showLanguagePopup\" [metadata]=\"metadata\"></ui-language-selector-component>\r\n                </div>\r\n            </li>\r\n            <li class=\"separator\"></li>\r\n        </ul>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"menuItems\">\r\n  <ng-container *ngFor=\"let item of menuItems\">\r\n    <ng-container *ngIf=\"item.itemType === 'List'\">\r\n      <ng-container *ngFor=\"let listItem of activeChildItems(item.childItems)\">\r\n        <ng-container *ngIf=\"listItem.childItems\">\r\n          <ng-container *ngTemplateOutlet=\"listItemsTemplate; context:listItem\"></ng-container>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #listItemsTemplate let-listItems=\"childItems\" let-id=\"id\" let-category=\"label\">\r\n  <div class=\"child-container\" [ngClass]=\"{ 'animate': isSelected(id) }\">\r\n    <div class=\"child-items \">\r\n      <ul class=\"child-toolbar\">\r\n        <li class=\"\">\r\n          <i class=\"material-icons\" (click)=\"showChildMenu = false;\">double_arrow</i>\r\n          <span (click)=\"showChildMenu = false;\">Back</span>\r\n        </li>          \r\n      </ul>\r\n      <ng-container *ngFor=\"let item of listItems;let idx = index;\">\r\n        <ng-container *ngIf=\"item.itemType !== 'List'\">\r\n          <ul class=\"menu-child-item item\" [style.order]=\"1\" >\r\n            <ng-container *ngTemplateOutlet=\"childItemTemplate;context: getItem(item, category)\"></ng-container>\r\n          </ul>\r\n        </ng-container>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #chevronRightTemplate let-item=\"item\">  \r\n  <ng-container *ngIf=\"item.childItems && item.childItems.length\">\r\n    <i class=\"material-icons\" (click)=\"setSelectedMenu(item)\">chevron_right</i>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #childItemTemplate let-item=\"item\" let-category=\"category\">  \r\n  <li *ngIf=\"item.itemType === 'Image'\" [class]=\"item.highlight === true ? 'highlight' : 'no-highlight'\" (click)=\"onSubCategoryClick(item, category)\">\r\n    <a class=\"nav-link\" >{{item.label}}</a>\r\n  </li>\r\n  <li *ngIf=\"item.itemType === 'Text'\" [class]=\"item.highlight === true ? 'highlight' : 'no-highlight'\" (click)=\"onSubCategoryClick(item, category)\">\r\n    <a class=\"nav-link\" >{{item.label}}</a>\r\n  </li>\r\n  <li class=\"separator\"></li>\r\n</ng-template>\r\n\r\n<ng-template #authSettingsTemplate>     \r\n    <li class=\"nav-item\" (click)=\"onSignOutClick()\">\r\n        <a class=\"nav-link\">{{metadata && metadata.signOut && metadata.signOut.label}}</a>\r\n    </li>\r\n    <li class=\"separator\"></li>\r\n</ng-template>\r\n\r\n<ng-template #authTemplate>\r\n    <ul class=\"navbar-nav navbar-nav-bordered\">\r\n        <li class=\"nav-item list-header\">\r\n            <a class=\"nav-link\">{{metadata && metadata.hello && metadata.hello.label}}{{firstName}}</a>\r\n        </li>\r\n        <ul class=\"list-items\">\r\n            <ng-container  *ngFor=\"let o of accountOptions\">\r\n                <ng-container *ngTemplateOutlet=\"accountOptionTemplate; context: o\"></ng-container>\r\n            </ng-container>            \r\n            <ng-container *ngTemplateOutlet=\"authSettingsTemplate\"></ng-container>\r\n        </ul>\r\n    </ul>\r\n</ng-template>\r\n\r\n<ng-template #notAuthTemplate>\r\n    <ul class=\"navbar-nav navbar-nav-bordered\">\r\n        <li class=\"nav-item list-header\" (click)=\"onSignInClick()\">\r\n            <a class=\"nav-link\">{{metadata && metadata.hello && metadata.hello.label}}, {{metadata && metadata.signIn && metadata.signIn.label}}</a>\r\n        </li>\r\n        <ul class=\"list-items\">\r\n            <li class=\"nav-item\" (click)=\"onSignInClick()\">\r\n                <a class=\"nav-link\">{{metadata && metadata.signIn && metadata.signIn.label}}</a>\r\n            </li>\r\n            <li class=\"separator\"></li>\r\n            <li class=\"nav-item\" [routerLink]=\"['./register']\">\r\n                <span class=\"nav-link\">{{metadata && metadata.notRegistered && metadata.notRegistered.label}}, <a class=\"nav-link\">{{metadata && metadata.createAccount && metadata.createAccount.label}}</a></span>\r\n            </li>\r\n            <li class=\"separator\"></li>\r\n        </ul>\r\n    </ul>\r\n</ng-template>\r\n\r\n<ng-template #accountOptionTemplate let-key=\"key\" let-label=\"label\">\r\n    <li class=\"nav-item\" (click)=\"onItemClick(key)\">\r\n        <a class=\"nav-link\">{{label}}</a>\r\n    </li>\r\n    <li class=\"separator\"></li>\r\n</ng-template>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2c6178a319d44900077b9865461795fd-1",
            "file": "projects/header/src/lib/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 27,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_query",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "backComponentIsVisible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "country",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showLanguagePopup",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "showPopup",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showSearch",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "totalQuantity",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "whatsapp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "cartClickHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onBackVisibilityChange",
                    "args": [
                        {
                            "name": "visible",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "visible",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHomeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onSignOut",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { NavigationStart, Router } from '@angular/router';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\n\r\nimport { HamburgerMenuStateService } from '@menu/src/public-api';\r\nimport {\r\n    AuthService,\r\n    BaseComponent,\r\n    MenuStateService,\r\n    DataStoreService,\r\n    ShoppingCartStateService,\r\n    NavigationService,\r\n    WINDOW,\r\n    ConfigService\r\n} from '@common/src/public-api';\r\nimport { from } from 'rxjs';\r\nimport { DeviceDetectorService } from 'ngx-device-detector';\r\n\r\n@Component({\r\n    selector: 'ui-header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent extends BaseComponent {\r\n    private _query: string;\r\n\r\n    @Input() metadata: any;\r\n    \r\n    showSearch: boolean;\r\n    totalQuantity: number;\r\n    showPopup: boolean;\r\n    whatsapp: string;\r\n    backComponentIsVisible: boolean;\r\n    country: string;\r\n    selectedLanguage: string;\r\n    showLanguagePopup: boolean;\r\n\r\n    constructor(\r\n        private hamburgerMenuStateService: HamburgerMenuStateService,\r\n        private shoppingcartStateService: ShoppingCartStateService,\r\n        private navigationService: NavigationService,\r\n        private deviceDetectorService: DeviceDetectorService,\r\n        private authService: AuthService,\r\n        configService: ConfigService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n\r\n        const configuration = configService.getConfiguration();\r\n        this.country = configuration.country.toLowerCase();\r\n        this.selectedLanguage = configuration.selectedLanguage;\r\n    }\r\n\r\n    public get authenticated(): boolean {\r\n        return this.authService && this.authService.user && this.authService.user.authenticated;\r\n    }\r\n\r\n    public get firstName(): string {\r\n        return this.authService && this.authService.user && this.authService.user.firstName;\r\n    }\r\n\r\n    public get showChildMenu(): boolean {\r\n        return this.hamburgerMenuStateService.showChildMenu;\r\n    }\r\n\r\n    public set showChildMenu(value: boolean) {\r\n        this.hamburgerMenuStateService.showChildMenu = value;\r\n    }\r\n\r\n    public get showMenu(): boolean {\r\n        return this.hamburgerMenuStateService.showMenu;\r\n    }\r\n\r\n    public set showMenu(value: boolean) {\r\n        this.hamburgerMenuStateService.showMenu = value;\r\n    }\r\n\r\n    public async cartClickHandler(): Promise<void> {\r\n        await this.navigationService.navigateForCartClick(this._query ? atob(this._query) : \"{}\", this.currentPage);\r\n    }\r\n\r\n    public async onSignOut(): Promise<void> {\r\n        from(this.authService.logout()).subscribe( async (_) => await this.navigationService.navigateHomeClick());\r\n    }\r\n\r\n    public async onHomeClick(): Promise<void> {\r\n        await this.navigationService.navigateHomeClick();\r\n    }\r\n\r\n    public get isDesktop(): boolean {\r\n        return this.deviceDetectorService.isDesktop();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.showSearch = false;\r\n        this.showMenu = false;\r\n        this.showChildMenu = false;\r\n        this.whatsapp = \"8482945574\";\r\n\r\n        this.shoppingcartStateService.cartStateChange\r\n            .pipe(takeUntil(this.$destroy))\r\n            .subscribe((_) => (this.totalQuantity = this.shoppingcartStateService.totalQuantity));\r\n\r\n        this.router.events.pipe(\r\n            filter((e: any) => {\r\n                return e instanceof NavigationStart || (e.snapshot && e.snapshot.params['query']);\r\n            }),\r\n            takeUntil(this.$destroy)\r\n        ).subscribe((e: any) => {\r\n            if (e instanceof NavigationStart) {\r\n                this.currentPage = e.url;\r\n            } else {\r\n                this._query = e.snapshot.params['query'];\r\n            }\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onBackVisibilityChange(visible: boolean): void {\r\n        this.backComponentIsVisible = visible;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n\r\n@mixin signout ($gridColumEnd) {\r\n    grid-column-start: 1;\r\n    grid-column-end: $gridColumEnd;\r\n    width: 100%;\r\n}\r\n\r\n.desktop-container {\r\n    display: none;\r\n    \r\n    ui-signout {\r\n        @include signout(7);\r\n    }\r\n}\r\n\r\n.mobile-container {\r\n    position: relative;\r\n    background-color: $primary-color;\r\n    height: 100%;\r\n    padding: 5px 0;\r\n    padding-bottom: 10px;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: 50px calc(100% - 230px) 125px 55px;\r\n    justify-content: center;\r\n    justify-items: center;\r\n    grid-auto-rows: 1fr;\r\n\r\n    .search-container {\r\n        grid-column-start: 1;\r\n        grid-column-end: 5;\r\n        width: 100%;\r\n        padding: 2px 20px;\r\n    }\r\n\r\n    &.authenticated {\r\n        padding-bottom: 0;\r\n    }\r\n    \r\n    ui-signout {\r\n        @include signout(6);\r\n    }\r\n}\r\n\r\n .company-logo-small {\r\n    position: relative;\r\n    padding-top: 0;\r\n    justify-self: left;\r\n\r\n    &:after {\r\n        content: \"bazaar\";\r\n        position: absolute;\r\n        left: 45px;\r\n        top: 24px;\r\n        color: #fff;\r\n        font-size: 1rem;\r\n    }\r\n}\r\n\r\n.menu {\r\n    position: relative;\r\n\r\n    i {\r\n        position: absolute;\r\n        left: -15px;\r\n        top: 0;\r\n        font-weight: lighter;\r\n        font-size: 32px;\r\n        border: 1px solid transparent;\r\n        color: $secondary-color;\r\n    }\r\n}\r\n\r\n.icon {\r\n    position: relative;\r\n\r\n    i.shopping-cart {\r\n        color: $secondary-color;\r\n        font-size: 1.2em;\r\n\r\n        &:before {\r\n            content: \" \";\r\n            border-top: 3px solid $primary-color;\r\n            left: 9px;\r\n            top: 3px;\r\n            width: 18px;\r\n            height: 6px;\r\n            position: absolute;\r\n            background-color: $primary-color;\r\n        }\r\n    }\r\n\r\n    .tq-label {\r\n        position: absolute;\r\n        left: 11px;\r\n        top: -2px;\r\n        font-size: 0.4em;\r\n        font-weight: 700;\r\n        background-color: $quaternary-color;\r\n        width: 18px;\r\n        height: 18px;\r\n        border: 1px solid transparent;\r\n        border-radius: 9px;\r\n        color: white;\r\n        padding: 2px;\r\n    }\r\n}\r\n\r\n.user-signin-signout {\r\n    justify-self: end;    \r\n    padding-right: 10px;\r\n    border: 1px solid transparent;\r\n}\r\n\r\nui-burger-menu {\r\n    top: 50px;\r\n    min-width: 300px;\r\n    max-width: 300px;\r\n    left: -320px;\r\n    transition: 1s;\r\n    position: absolute;\r\n    background-color: $hamburger-menu-background-color;\r\n    color: $hamburger-menu-color;\r\n    overflow-x: hidden;\r\n    height: calc(100% - 47px);\r\n    padding-left: 20px;\r\n    z-index: 1;\r\n    min-height: 100vh;\r\n    \r\n    &.animate {\r\n        left: -20px;\r\n    }\r\n\r\n    &.back-visible {\r\n        top: 85px;\r\n    }\r\n    \r\n    &.authenticated {\r\n        top: 45px;\r\n\r\n        &.back-visible {\r\n            top: 85px;\r\n        }\r\n    }\r\n}\r\n\r\nui-menu {\r\n    position: relative;\r\n    padding: 0;\r\n    display: block;\r\n}\r\n\r\n@media only screen and (min-width: 300px) {\r\n    .company-logo-small {\r\n        padding-left: unset;\r\n    \r\n        &:after {\r\n            left: 45px;\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    ui-back-component,\r\n    .mobile-container {\r\n        display: none;\r\n    }\r\n\r\n    .desktop-container {\r\n        display: block;\r\n        position: relative;\r\n        background-color: $primary-color;\r\n        height: 100%;\r\n        padding: 25px 0 20px 0;\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: 50px 100px calc(100% - 500px) 40px 230px 80px;\r\n        justify-content: center;\r\n        justify-items: center;\r\n        z-index: 1;\r\n        \r\n        .user-signin-signout {\r\n            padding: 0 30px 0 15px;\r\n\r\n            &.bordered {\r\n                position: relative;\r\n\r\n                &:hover {\r\n                    border: 1px solid #f1f1f1;\r\n                    border-radius: 2px;\r\n                }\r\n\r\n                .signin-popup {\r\n                    position: absolute;\r\n                    border: 1px solid #f1f1f1;\r\n                    background-color: #fff;\r\n                    padding: 20px 11px;\r\n                    z-index: 1;\r\n                    width: 300px;\r\n                    right: -2px;\r\n                    top: 37px;\r\n                    border-radius: 2px;\r\n\r\n                    &:after {\r\n                        @include up-indicator(9px, #fff);\r\n                    }\r\n                    li {\r\n                        text-align: center;\r\n                        color: $text-color;\r\n\r\n                        &:first-child {\r\n                            margin-bottom: 15px;\r\n                            border: 1px solid $secondary-color;\r\n                            background-color: $secondary-color;\r\n                            padding: 10px;\r\n                            color: #fff;\r\n                            margin-left: 70px;\r\n                            margin-right: 70px;\r\n                        }\r\n\r\n                        span + a {\r\n                            color: $secondary-color;\r\n                            font-weight: 500;\r\n                            font-size: 1.1rem;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .search-container {\r\n        width: 100%;\r\n        padding: 0 10px;\r\n    }\r\n\r\n    ui-burger-menu {\r\n        top: 70px;\r\n\r\n        &.authenticated {\r\n            top: 70px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "hamburgerMenuStateService",
                        "type": "HamburgerMenuStateService"
                    },
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "deviceDetectorService",
                        "type": "DeviceDetectorService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "hamburgerMenuStateService",
                        "type": "HamburgerMenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceDetectorService",
                        "type": "DeviceDetectorService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "authenticated": {
                    "name": "authenticated",
                    "getSignature": {
                        "name": "authenticated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 57
                    }
                },
                "firstName": {
                    "name": "firstName",
                    "getSignature": {
                        "name": "firstName",
                        "type": "string",
                        "returnType": "string",
                        "line": 61
                    }
                },
                "showChildMenu": {
                    "name": "showChildMenu",
                    "setSignature": {
                        "name": "showChildMenu",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showChildMenu",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 65
                    }
                },
                "showMenu": {
                    "name": "showMenu",
                    "setSignature": {
                        "name": "showMenu",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showMenu",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 73
                    }
                },
                "isDesktop": {
                    "name": "isDesktop",
                    "getSignature": {
                        "name": "isDesktop",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 93
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<ui-back-component (isVisible)=\"onBackVisibilityChange($event)\"></ui-back-component>\r\n\r\n<div class=\"mobile-container\" [ngClass]=\"{ 'authenticated': authenticated }\">\r\n    <ng-container *ngTemplateOutlet=\"menu\"></ng-container>\r\n    <span class=\"company-logo-small\" (click)=\"onHomeClick()\"><a (click)=\"onHomeClick()\">Amreet</a></span>\r\n    <div class=\"user-signin-signout\">\r\n        <ui-signin [hidden]=\"authenticated\" [metadata]=\"metadata\" class=\"small-text signin\"> </ui-signin>\r\n        <div [hidden]=\"!authenticated\">&nbsp;</div>\r\n        \r\n    </div>\r\n    <a href=\"javascript:void(0);\" class=\"icon\" (click)=\"cartClickHandler()\">\r\n        <i class=\"material-icons-outlined shopping-cart\">shopping_cart</i>        \r\n        <span class=\"tq-label\">{{ totalQuantity }}</span>\r\n    </a>\r\n    <ng-container *ngTemplateOutlet=\"quicksearchTemplate\"></ng-container>\r\n    <ui-signout [hidden]=\"!authenticated\" [metadata]=\"metadata\" [firstName]=\"firstName\" (signout)=\"onSignOut()\" class=\"small-text signin\"></ui-signout>   \r\n</div>\r\n\r\n<div class=\"desktop-container\" [ngClass]=\"{ 'authenticated': authenticated }\">\r\n    <ng-container *ngTemplateOutlet=\"menu\"></ng-container>\r\n    <span class=\"company-logo-small\" (click)=\"onHomeClick()\"><a (click)=\"onHomeClick()\">Amreet</a></span>\r\n    <ng-container *ngTemplateOutlet=\"quicksearchTemplate\"></ng-container>\r\n    <ng-container *ngTemplateOutlet=\"languageTemplate\"></ng-container>\r\n    <div \r\n        class=\"user-signin-signout\"\r\n        [ngClass]=\"{ 'bordered': !authenticated }\"\r\n        (mouseleave)=\"showPopup = false\"\r\n        (mouseover)=\"showPopup = !authenticated\"\r\n    >\r\n        <ui-signin [hidden]=\"authenticated\" [metadata]=\"metadata\" class=\"small-text signin\"> </ui-signin>\r\n        <div [hidden]=\"!authenticated\">&nbsp;</div>\r\n        <ng-container *ngTemplateOutlet=\"signInPopupTemplate\"></ng-container>\r\n    </div>\r\n    <a href=\"javascript:void(0);\" class=\"icon\" (click)=\"cartClickHandler()\">\r\n        <i class=\"material-icons-outlined shopping-cart\">shopping_cart</i>        \r\n        <span class=\"tq-label\">{{ totalQuantity }}</span>\r\n    </a>\r\n    <ui-signout [hidden]=\"!authenticated\" [metadata]=\"metadata\" [firstName]=\"firstName\" (signout)=\"onSignOut()\" class=\"small-text signin\"></ui-signout>\r\n</div>\r\n\r\n<ui-menu></ui-menu>\r\n<ui-burger-menu \r\n    [ngClass]=\"{ 'animate': showMenu, 'authenticated': authenticated, 'back-visible': backComponentIsVisible }\"\r\n    (close)=\"showMenu = false; showChildMenu = false\"></ui-burger-menu>\r\n\r\n<ng-template #menu>\r\n    <div class=\"menu\">\r\n        <a\r\n            href=\"javascript:void(0);\"\r\n            class=\"icon icon-border\"\r\n            [hidden]=\"showMenu || showChildMenu\"\r\n            (click)=\"showMenu = !showMenu\"\r\n        >\r\n            <i class=\"material-icons\">menu</i>\r\n        </a>\r\n        <a\r\n            href=\"javascript:void(0);\"\r\n            class=\"icon icon-border\"\r\n            [hidden]=\"!showMenu\"\r\n            (click)=\"showMenu = false; showChildMenu = false\"\r\n        >\r\n            <i class=\"material-icons\">menu_open</i>\r\n        </a>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #quicksearchTemplate>\r\n    <div class=\"search-container\">\r\n        <ui-quick-search [metadata]=\"metadata\" class=\"search\"></ui-quick-search>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #quickbarTemplate>\r\n    <div class=\"quickbar\">\r\n        <ui-signin [hidden]=\"authenticated\" [metadata]=\"metadata\" class=\"small-text signin\"> </ui-signin>\r\n        <ui-signout [hidden]=\"!authenticated\" [metadata]=\"metadata\" [firstName]=\"firstName\" (signout)=\"onSignOut()\" class=\"small-text signin\">\r\n        </ui-signout>\r\n        <a href=\"javascript:void(0);\" class=\"icon\" (click)=\"cartClickHandler()\">\r\n            <i class=\"material-icons-outlined\">shopping_bag</i>\r\n            <span class=\"tq-label\">{{ totalQuantity }}</span>\r\n        </a>\r\n    </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #signInPopupTemplate>\r\n    <ng-container *ngIf=\"showPopup\">\r\n        <div class=\"signin-popup\">\r\n            <ul>\r\n                <li><a [routerLink]=\"['./signin']\">{{metadata && metadata.signIn && metadata.signIn.label}}</a></li>\r\n                <li><span>{{metadata && metadata.notRegistered && metadata.notRegistered.label}}</span>, <a [routerLink]=\"['./register']\">{{metadata && metadata.createAccount && metadata.createAccount.label}}</a></li>\r\n            </ul>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #languageTemplate>\r\n    <div \r\n        class=\"flag-container\"\r\n        (click)=\"showLanguagePopup = !showLanguagePopup;\"\r\n        (outsideClick)=\"showLanguagePopup = false\"\r\n    >\r\n        <div class=\"flag\" [ngClass]=\"country\"></div>\r\n        <ui-language-selector-component [hidden]=\"!showLanguagePopup\" [metadata]=\"metadata\"></ui-language-selector-component>\r\n</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-d580a269368ca667e48ccf932f9c0388",
            "file": "projects/customer/src/lib/components/account/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-home-component",
            "styleUrls": [
                "home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onTileClick",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { first, takeUntil } from \"rxjs/operators\";\r\n\r\nimport { BaseComponent, AccountService, WINDOW } from '@common/src/public-api';\r\nimport { interval } from \"rxjs\";\r\n\r\n@Component({\r\n    selector: 'ui-home-component',\r\n    templateUrl: 'home.component.html',\r\n    styleUrls: ['home.component.scss']\r\n})\r\nexport class HomeComponent extends BaseComponent {\r\n    metadata: any;\r\n\r\n    constructor (\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private accountService: AccountService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.activatedRoute.data.pipe(\r\n            first(),\r\n            takeUntil(this.$destroy),\r\n        )\r\n        .subscribe((data) => {\r\n            this.metadata = data.metadata['Account'];\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get options(): Array<any> {\r\n        return this.metadata && this.metadata.options;\r\n    }\r\n\r\n    public async onTileClick(key: string): Promise<void> {\r\n        await this.accountService.navigate(key, this.isMobile);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n    \r\n    .header {\r\n        @include header;\r\n    }\r\n\r\n    .options {\r\n        margin: 30px 0;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        column-gap: 10px;\r\n        row-gap: 20px;\r\n        justify-content: center;\r\n\r\n        .tile {\r\n            width: 100%;\r\n            max-width: 350px;\r\n            border: 1px solid transparent;\r\n            padding: 7px 11px;\r\n            height: 90px;\r\n            display: grid;\r\n            cursor: pointer;\r\n            box-shadow: 0 2px 8px #c0c0c0;\r\n            &:hover {\r\n                border-style: outset;\r\n                border-color: #f1f1f1;\r\n            }\r\n            \r\n            &-header {\r\n                padding: 7px 0;\r\n                font-size: 1.2rem;\r\n                font-weight: 500;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {\r\n        .options {\r\n            row-gap: 60px;\r\n            justify-content: space-between;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 37
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div class=\"header\">{{metadata && metadata.myAccount && metadata.myAccount.label}}</div>\r\n\r\n    <div class=\"options\">\r\n        <ng-container *ngFor=\"let option of options\">\r\n            <ng-container *ngTemplateOutlet=\"tileTemplate; context: option\"></ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #tileTemplate let-header=\"header\" let-description=\"description\" let-key=\"key\">\r\n    <div class=\"tile\" (click)=\"onTileClick(key)\">\r\n        <div class=\"tile-header\">{{header}}</div>\r\n        <div class=\"tile-description\">{{description}}</div>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-47a4f9a9a3c3d4a4dec25c229455e283",
            "file": "projects/content/src/lib/components/homepage/homepage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-homepage",
            "styleUrls": [
                "./homepage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./homepage.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "homePageData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getWidgetItemWidth",
                    "args": [
                        {
                            "name": "itemsPerRow",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemsPerRow",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onWidgetItemClick",
                    "args": [
                        {
                            "name": "query",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidgetWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "line": 16
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Title, Meta } from '@angular/platform-browser';\r\n\r\nimport { WINDOW, DataStoreService, RouteKeys, BaseComponent, NavigationService, MenuStateService } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-homepage',\r\n    templateUrl: './homepage.component.html',\r\n    styleUrls: ['./homepage.component.scss'],\r\n})\r\nexport class HomePageComponent extends BaseComponent {\r\n    homePageData: any;\r\n\r\n    @HostListener('window:resize', [])\r\n    onResize(): void {\r\n        this.setWidgetWidth();\r\n    }\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        dataStoreService: DataStoreService,\r\n        menuStateService: MenuStateService,\r\n        private activatedRoute: ActivatedRoute,        \r\n        private titleService: Title,\r\n        private metaService: Meta,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService)\r\n        this.menuStateService.changeShowMainMenu(true);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        if (this.activatedRoute && this.activatedRoute.snapshot) {\r\n            this.homePageData = this.activatedRoute.snapshot.data.homeData;\r\n            this.setWidgetWidth();\r\n\r\n            this.titleService.setTitle('home');\r\n            this.metaService.addTag({\r\n                name: 'description',\r\n                content: 'home page content',\r\n            });\r\n        }\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onWidgetItemClick(query: any): Promise<void> {\r\n        const data = JSON.parse(query);        \r\n        await this.navigationService.navigateForSubcategory(query, data.types[0], data.category, true);\r\n    }\r\n\r\n    private setWidgetWidth(): void {\r\n        if (this.homePageData && this.homePageData.sections) {\r\n            this.homePageData.sections.forEach((s) =>\r\n                s.widgets.forEach((w) => (w.width = this.getWidgetItemWidth(w.itemsPerRow)))\r\n            );\r\n        }\r\n    }\r\n\r\n    private getWidgetItemWidth(itemsPerRow: number): number {\r\n        if (this.isMobile && itemsPerRow !== 1) {\r\n            return 100 / (itemsPerRow / 2);\r\n        }\r\n\r\n        return 100 / itemsPerRow;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.main-container {\r\n    .widget-row {\r\n        position: relative;\r\n        background-color: lightgoldenrodyellow;\r\n        margin-bottom: 40px;\r\n        padding: 20px;\r\n        color: $mobile-regular-color;\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .widget-title {\r\n            font-size: 11pt;\r\n            font-weight: 500;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .widget-item-container {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            flex-direction: row;\r\n            justify-content: center;\r\n\r\n            .widget-item {\r\n                flex-basis: 50%;\r\n                margin-top: 20px;\r\n\r\n                &.item-link {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                figure {\r\n                    cursor: pointer;\r\n                    text-align: center;\r\n                    margin: auto;\r\n\r\n                    img {\r\n                        margin: auto;\r\n                    }\r\n                }\r\n\r\n                .widget-item-title {\r\n                    font-size: 10pt;\r\n                    text-align: center;\r\n                    margin-bottom: 5px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .widget-footer {\r\n            font-size: 10pt;\r\n            margin-top: 10px;\r\n\r\n            &:hover {\r\n                text-decoration: underline;\r\n            }\r\n        }\r\n    }\r\n\r\n    .widget-flex {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n\r\n        .widget-title {\r\n            font-size: 11pt;\r\n            font-weight: 500;\r\n            text-align: center;\r\n            margin-top: 20px;\r\n            margin-bottom: 2px;\r\n        }\r\n\r\n        &:first-child {\r\n            .widget-title {\r\n                margin-top: unset;\r\n                margin-bottom: unset;\r\n            }\r\n        }\r\n\r\n        .widget-item-container {\r\n            display: flex;\r\n            flex-direction: row;\r\n            flex-wrap: wrap;\r\n\r\n            .widget-item {\r\n                width: 100%;\r\n                padding: 2.5px;\r\n\r\n                &.item-link {\r\n                    cursor: pointer;\r\n                }\r\n\r\n                figure {\r\n                    margin: 0;\r\n\r\n                    img {\r\n                        max-width: 100%;\r\n                        height: auto;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .main-container {\r\n        margin: 0 20px;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: 992px) {\r\n    .main-container {\r\n        margin: 0 auto;\r\n        width: 90%;\r\n\r\n        .widget-row {\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n            &::after {\r\n                content: ' ';\r\n                position: absolute;\r\n                right: 1%;\r\n                border-top: 2px solid;\r\n                top: calc(50% - 15px);\r\n                border-right: 2px solid;\r\n                width: 30px;\r\n                height: 30px;\r\n                background: transparent;\r\n                transform: rotate(45deg);\r\n                cursor: pointer;\r\n            }\r\n\r\n            .widget-item-container {\r\n                flex-wrap: unset;\r\n\r\n                .widget-item {\r\n                    flex-basis: auto;\r\n                    flex-grow: 1;\r\n\r\n                    figure {\r\n                        margin: unset;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .widget-flex {\r\n            .widget-title {\r\n                font-size: 15pt;\r\n                margin-top: 50px;\r\n                margin-bottom: 5px;\r\n            }\r\n\r\n            .widget-item-container {\r\n                .widget-item {\r\n                    padding: 5px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: 1152px) {\r\n    .main-container {\r\n        margin: 0 auto;\r\n        width: 85%;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: 1252px) {\r\n    .main-container {\r\n        margin: 0 auto;\r\n        width: 80%;\r\n\r\n        .widget-row {\r\n            &::after {\r\n                right: 1.5%;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./homepage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "metaService",
                        "type": "Meta"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaService",
                        "type": "Meta",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"main-container\">\r\n    <ng-container *ngIf=\"homePageData && homePageData.sections && homePageData.sections.length\">\r\n        <ng-container *ngFor=\"let section of homePageData.sections; let idx = index;\">\r\n            <ng-container *ngIf=\"homePageData.layout === 'row'\">\r\n                <ng-container *ngTemplateOutlet=\"rowTemplate; context:section\"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"homePageData.layout === 'flex'\">\r\n                <ng-container *ngTemplateOutlet=\"flexTemplate; context:section\"></ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #rowTemplate let-backgroundImageUrl=\"backgroundImageUrl\" let-widgets=\"widgets\">\r\n    <ng-container *ngFor=\"let widget of widgets\">\r\n        <div class=\"widget-row\">\r\n            <div class=\"widget-title\">{{widget.title}}</div>\r\n            <div class=\"widget-item-container\">\r\n            <ng-container *ngFor=\"let item of widget.items\">\r\n                <div class=\"widget-item\" [ngClass]=\"{ 'item-link': item.url }\">\r\n                    <figure>\r\n                        <figcaption class=\"widget-item-title\">{{item.title}}</figcaption>\r\n                        <img [src]=\"item.imageUrl\" />\r\n                    </figure>\r\n                </div>\r\n            </ng-container>\r\n            </div>\r\n            <div class=\"widget-footer\"><a [routerLink]=\"widget.footer\">{{widget.footer}}</a></div>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #flexTemplate let-backgroundImageUrl=\"backgroundImageUrl\" let-widgets=\"widgets\" let-controlType=\"controlType\">\r\n    <ng-container *ngIf=\"!controlType || controlType !== 'carousel'\">\r\n        <ng-container *ngFor=\"let widget of widgets;\">\r\n            <div class=\"widget-flex\">\r\n                <div class=\"widget-title\">{{widget.title}}</div>\r\n                <div class=\"widget-item-container\">\r\n                <ng-container *ngFor=\"let item of widget.items\">\r\n                    <div class=\"widget-item\" [style.width.%]=\"widget.width\" [ngClass]=\"{ 'item-link': item.query }\" (click)=\"onWidgetItemClick(item.query)\">\r\n                        <figure>\r\n                            <figcaption class=\"widget-item-title\">{{item.title}}</figcaption>\r\n                            <img [src]=\"item.imageUrl\" />\r\n                        </figure>\r\n                    </div>\r\n                </ng-container>\r\n                </div>\r\n                <div class=\"widget-footer\"><a [routerLink]=\"widget.footer\">{{widget.footer}}</a></div>\r\n            </div>\r\n        </ng-container>\r\n    </ng-container>\r\n</ng-template>"
        },
        {
            "name": "ImageLightboxComponent",
            "id": "component-ImageLightboxComponent-fca10c6d973455fa1430c4fff56d68f7",
            "file": "projects/content/src/lib/components/reviews/child-components/image-lightbox/image-lightbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-image-lightbox-component",
            "styleUrls": [
                "./image-lightbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-lightbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "src",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 11,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onlightboxClose",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ui-image-lightbox-component',\r\n    templateUrl: './image-lightbox.component.html',\r\n    styleUrls: ['./image-lightbox.component.scss']\r\n})\r\nexport class ImageLightboxComponent {\r\n    @Input() src: string;\r\n    @Input() id: string;\r\n    @Output() close: EventEmitter<string> = new EventEmitter<string>();    \r\n\r\n    public async onlightboxClose(id: string): Promise<void> {\r\n        this.close.emit(id);\r\n\r\n        await Promise.resolve();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ui-lightbox-component {\r\n    .lightbox {\r\n        .lightbox-body {    \r\n            figure {\r\n                ::ng-deep & {\r\n                    margin-top: 20px;\r\n                }\r\n            }\r\n        }\r\n    }        \r\n}",
                    "styleUrl": "./image-lightbox.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ui-lightbox-component [id]=\"id\">\r\n    <button class=\"btn btn-light btn-light-bordered\" (click)=\"onlightboxClose(id)\">Close</button>\r\n    <figure>\r\n        <img [src]=\"src\" />\r\n    </figure>\r\n</ui-lightbox-component>"
        },
        {
            "name": "InvoiceComponent",
            "id": "component-InvoiceComponent-6ad4cce7af3e1308015854cd1df99a4e",
            "file": "projects/customer/src/lib/components/account/orders/child-components/invoice/invoice.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-invoice-component",
            "styleUrls": [
                "./invoice.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invoice.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 12,
                    "type": "any"
                },
                {
                    "name": "orderID",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "show",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "showCreditNote",
                    "line": 14,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCreditNoteClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInvoiceClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onInvoiceViewClick",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { FileType } from \"@common/src/lib/types/file-type\";\r\nimport { FileService, OrderService } from \"@common/src/public-api\";\r\n\r\n@Component({\r\n    selector: 'ui-order-invoice-component',\r\n    templateUrl: './invoice.component.html',\r\n    styleUrls: ['./invoice.component.scss']\r\n})\r\nexport class InvoiceComponent {\r\n    @Input() show: boolean;\r\n    @Input() metadata: any;\r\n    @Input() orderID: string;\r\n    @Input() showCreditNote: boolean;\r\n\r\n    constructor(\r\n        private fileService: FileService\r\n    ){}\r\n\r\n    public async onInvoiceClick(): Promise<void> {\r\n        this.show = !this.show;\r\n    }\r\n\r\n    public async onInvoiceViewClick($event: any): Promise<void> {\r\n        await this.fileService.viewFile(this.orderID, FileType.Invoice).toPromise();\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    public async onCreditNoteClick($event: any): Promise<void> {    \r\n        await this.fileService.viewFile(this.orderID, FileType.CreditNote).toPromise();\r\n        $event.stopPropagation();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../../ui/src/scss/mixins';\r\n\r\na {\r\n    position: relative;\r\n    color: #0000ff;\r\n    cursor: pointer;\r\n    font-size: 0.85rem;\r\n\r\n    &.down-arrow:after {\r\n        @include down-arrow(-15px, 3px);\r\n    }\r\n\r\n    .invoice-dropdown {\r\n        position: absolute;\r\n        right: -26px;\r\n        top: 22px;\r\n        border: 0;\r\n        padding: 0;\r\n        background-color: #fff;\r\n        z-index: 1;\r\n\r\n        &:after {\r\n            @include up-indicator(5px, #fff);\r\n        }\r\n\r\n        li {\r\n            padding: 11px 17px;\r\n            color: #555;\r\n\r\n            &:hover {\r\n                background-color: $tertiary-color;\r\n                color: #fff;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./invoice.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fileService",
                        "type": "FileService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fileService",
                        "type": "FileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<a \r\n    class=\"down-arrow\"\r\n    (click)=\"onInvoiceClick()\"\r\n    (outsideClick)=\"show = false\"\r\n>\r\n    {{metadata && metadata.documents && metadata.documents.label}}\r\n    <div *ngIf=\"show\" class=\"invoice-dropdown\">\r\n        <ul>\r\n            <li (click)=\"onInvoiceViewClick($event)\">{{metadata && metadata.invoice && metadata.invoice.label}}</li>\r\n            <ng-container *ngIf=\"showCreditNote\">\r\n                <li (click)=\"onCreditNoteClick($event)\">{{metadata && metadata.creditNote && metadata.creditNote.label}}</li>\r\n            </ng-container>\r\n        </ul>\r\n    </div>\r\n</a>\r\n"
        },
        {
            "name": "ItemContainerComponent",
            "id": "component-ItemContainerComponent-fe9344e7d86adaf1303be723f427a827",
            "file": "projects/content/src/lib/components/list/child-components/item-container/item-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-item-container-component",
            "styleUrls": [
                "./item-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./item-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 17,
                    "type": "Product"
                },
                {
                    "name": "metadata",
                    "line": 16,
                    "type": "any"
                },
                {
                    "name": "query",
                    "line": 18,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemContainer",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'itemContainer'"
                        }
                    ]
                },
                {
                    "name": "itemQty",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showItemQtyTextControl",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "showReviewSummary",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getBrand",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getSizePack",
                    "args": [
                        {
                            "name": "details",
                            "type": "Array<ProductDetail>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "details",
                            "type": "Array<ProductDetail>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSpeciality",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ElementRef, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, ConfigService, NavigationService, ProductDetail, Product, WINDOW } from '@common/src/public-api';\r\n\r\nexport interface Quantity {\r\n    value: number;\r\n    viewValue: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'ui-item-container-component',\r\n    templateUrl: './item-container.component.html',\r\n    styleUrls: ['./item-container.component.scss'],\r\n})\r\nexport class ItemContainerComponent extends BaseComponent {\r\n    @Input() metadata: any;\r\n    @Input() item: Product;\r\n    @Input() query: any;\r\n\r\n    @ViewChild('itemContainer') itemContainer: ElementRef;\r\n    itemQty = 1;\r\n    showItemQtyTextControl = false;\r\n    showReviewSummary = false;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        private navigationService: NavigationService,\r\n        private configService: ConfigService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public async onItemClick(): Promise<void> {\r\n        let query = atob(this.query);\r\n        query = query.includes('lob') ? query : JSON.stringify({ lob: this.item.lob.toLowerCase() })\r\n        await this.navigationService.navigateForListItem(query, this.currentPage, this.item._id);\r\n    }\r\n\r\n    get imageUrl(): string {\r\n        if (this.item && Array.isArray(this.item.images)){\r\n            const image = this.item.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public getSizePack(details: Array<ProductDetail>): string {\r\n        const sizePack = details.find(d => d.title.toLowerCase() === 'sizepack');\r\n        return sizePack?.value ?? '';\r\n    }\r\n\r\n    public isSpeciality(title: string): boolean {\r\n        return title.toLowerCase() === 'speciality';\r\n    }\r\n\r\n    public getBrand(): string {\r\n        if (this.item.description.toLowerCase().includes(this.item.brand.toLowerCase())){\r\n            return '';\r\n        } else {\r\n            return `${this.item.brand} `;\r\n        }\r\n    }\r\n\r\n    public get showReviews(): boolean {\r\n        return this.configService.getConfiguration().showReview;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n.item-wrapper {\r\n    border: 1px solid #a1a1a1;\r\n    border-radius: 5px;\r\n    margin: 10px;\r\n    width: 280px;\r\n    max-width: 280px;\r\n    flex: 1;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n}\r\n\r\n.item-container {\r\n    min-width: 250px;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n\r\n    .review-summary {\r\n        position: absolute;\r\n        left: 20px;\r\n        top: 102%;\r\n        z-index: 10;\r\n        border: 1px solid #c0c0c0;\r\n        width: 250px;\r\n        box-shadow: 5px 5px #f1f1f1;\r\n        \r\n        &::before {\r\n            content: \" \";\r\n            width: 10px;\r\n            height: 10px;\r\n            border-right: 1px solid #c0c0c0;\r\n            border-bottom: 1px solid #c0c0c0;\r\n            position: absolute;\r\n            z-index: 1;\r\n            left: 50%;\r\n            transform: translateX(-50%) rotate(-135deg);\r\n            top: -6px;\r\n            background-color: #fff;\r\n        }\r\n    }\r\n\r\n    *:not(figure>img) {\r\n        min-width: 250px;\r\n    }\r\n\r\n    .no-best-seller,\r\n    .best-seller {\r\n        margin: 0;\r\n        height: 30px;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .best-seller {\r\n        width: 95px;\r\n        position: relative;\r\n        background-color: $highlight-hover;\r\n        color: #fff;\r\n        border: 1px solid transparent;\r\n        border-radius: $border-radius;\r\n        text-align: center;\r\n        font-size: $font-size;\r\n        text-transform: capitalize;\r\n\r\n        span {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            width: fit-content;\r\n        }\r\n    }\r\n\r\n    figure {\r\n        @include small-product-image;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .size,\r\n    .description {\r\n        font-size: $font-size;\r\n        font-weight: normal;\r\n        line-height: 20px;\r\n        color: $mobile-regular-color;\r\n        max-width: 280px;\r\n    }\r\n\r\n    .description {\r\n        font-weight: 550;\r\n        font-size: 1rem;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .size {\r\n        margin-bottom: 5px;\r\n    }\r\n\r\n    .country-container {\r\n        font-size: $font-size;\r\n        margin-top: 5px;\r\n        color: $desktop-regular-color;\r\n\r\n        .country {\r\n            font-size: 1.1em;\r\n            color: $desktop-regular-color;\r\n            font-weight: 500;\r\n        }\r\n    }\r\n\r\n    .speciality {\r\n        font-weight: normal;\r\n        font-size: 0.8em;\r\n        margin-top: 5px;\r\n        \r\n        .veg-symbol {\r\n            color: green;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .pre-text {\r\n            color: $desktop-regular-color;\r\n            margin-left: 5px;\r\n        }\r\n\r\n        .text {\r\n            color: $desktop-regular-color;\r\n            font-weight: 500;\r\n            line-height: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./item-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "imageUrl": {
                    "name": "imageUrl",
                    "getSignature": {
                        "name": "imageUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "showReviews": {
                    "name": "showReviews",
                    "getSignature": {
                        "name": "showReviews",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 68
                    }
                }
            },
            "templateData": "<div class=\"item-wrapper\">\r\n    <div class=\"item-container\" #itemContainer >\r\n        <div *ngIf=\"item.bestSeller\" class=\"best-seller\">\r\n            <span>{{ metadata && metadata.bestSeller && metadata.bestSeller.label }}</span>\r\n        </div>\r\n        \r\n        <figure (click)=\"onItemClick()\">\r\n            <img [src]=\"imageUrl\" />\r\n        </figure>\r\n        <div (click)=\"onItemClick()\" class=\"description\">{{getBrand()}}{{item.description}}</div>\r\n        <div class=\"size\">{{ getSizePack(item.details) }}</div>\r\n        <ui-pricing-component [metadata]=\"metadata\" [pricing]=\"item.pricing\"></ui-pricing-component>\r\n        <ng-container *ngFor=\"let detail of item.details\">\r\n            <div *ngIf=\"isSpeciality(detail.title)\" class=\"speciality\">\r\n                <span *ngIf=\"detail.value === 'Vegetarian'\" class=\"veg-symbol\">V</span>\r\n                <span class=\"pre-text\" *ngIf=\"detail.value === 'Vegetarian'\">{{metadata && metadata.suitableFor && metadata.suitableFor.label}}</span\r\n                ><span class=\"text\">{{ detail.value }}</span>\r\n            </div>\r\n        </ng-container>\r\n        <div class=\"country-container\">\r\n            {{ metadata && metadata.countryOfOrigin && metadata.countryOfOrigin.label }}:\r\n            <span class=\"country\">{{ item.country }}</span>\r\n        </div>\r\n        \r\n        <ui-rating-review-component [hidden]=\"!showReviews\" (reviewClick)=\"showReviewSummary = !showReviewSummary\" [reviewSummary]=\"item.reviewSummary\" [metadata]=\"metadata && metadata.starReview\"></ui-rating-review-component>\r\n        <div class=\"review-summary\" [hidden]=\"!showReviewSummary\">\r\n            <ui-review-summary-component *ngIf=\"item && item.reviewSummary\" [reviewSummary]=\"item.reviewSummary\" [metadata]=\"metadata && metadata.reviewSummary\"></ui-review-summary-component>\r\n        </div>\r\n    </div>\r\n    <ui-add-to-shoppingcart-quantity [metadata]=\"metadata\" [item]=\"item\"></ui-add-to-shoppingcart-quantity>\r\n</div>\r\n"
        },
        {
            "name": "LanguageSelectorComponent",
            "id": "component-LanguageSelectorComponent-4f440060e5d654b0711858f6201e2fc9",
            "file": "projects/common/src/lib/component/language-selector/language-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-language-selector-component",
            "styleUrls": [
                "./language-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./language-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 18,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_configuration",
                    "type": "IConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedLanguage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "onLanguageChange",
                    "args": [
                        {
                            "name": "language",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { ConfigService } from \"../../services/config.service\";\r\nimport { CookieService } from \"../../services/cookie.service\";\r\nimport { NavigationService } from \"../../services/navigation.service\";\r\nimport { WINDOW } from \"../../services/window.service\";\r\nimport { IConfiguration } from \"../../types/configuration\";\r\nimport { BaseComponent } from \"../base.component\";\r\n\r\n@Component({\r\n    selector: 'ui-language-selector-component',\r\n    templateUrl: './language-selector.component.html',\r\n    styleUrls: ['./language-selector.component.scss']\r\n})\r\nexport class LanguageSelectorComponent extends BaseComponent {\r\n    private _configuration: IConfiguration;\r\n\r\n    @Input() metadata: any;\r\n\r\n    selectedLanguage: string;\r\n    constructor(\r\n        configService: ConfigService,\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        private cookieService: CookieService\r\n\r\n    ) {\r\n        super(router, window)\r\n        this._configuration = configService.getConfiguration();\r\n        this.selectedLanguage = this._configuration.selectedLanguage;\r\n    }\r\n\r\n    public async onLanguageChange(language: string): Promise<void> {\r\n        this._configuration.selectedLanguage = language;\r\n        this.selectedLanguage = language;\r\n        \r\n        switch(language) {\r\n            case 'English':\r\n                this._configuration.language = 'en';\r\n                break;\r\n            case 'हिंदी':\r\n                this._configuration.language = 'hi';\r\n                break;\r\n            case 'मराठी':\r\n                this._configuration.language = 'mr';\r\n                break;\r\n        }\r\n\r\n        if (this.cookieService.exists('lang')) {\r\n            this.cookieService.delete('lang');\r\n        }\r\n\r\n        this.cookieService.set('lang', `${language}|${this._configuration.language}`);\r\n        this.window.location.reload();\r\n    }\r\n\r\n    public get options(): Array<string> {\r\n        return this.metadata && this.metadata.language && this.metadata.language.options;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    padding: 7px 0;\r\n    background-color: #fff;\r\n    width: 240px;\r\n    border: 1px solid #f1f1f1;\r\n    padding-top: 20px;\r\n\r\n    &:after {\r\n        @include up-indicator(calc(100% - 60px), #fff);\r\n    }\r\n\r\n    li {\r\n        width: 100%;\r\n        padding: 5px 0;\r\n        height: 40px;\r\n        position: relative;\r\n        padding-left: 45px;\r\n        padding-top: 13px;\r\n\r\n        &:hover {\r\n            background-color: #f1f1f1;\r\n        }\r\n\r\n        ui-radio-component {\r\n            position: absolute;\r\n            left:25px;\r\n            top: 20px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./language-selector.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "Array<string>",
                        "line": 57
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <ul *ngIf=\"options\">\r\n        <li *ngFor=\"let o of options\" [attr.selected]=\"o === selectedLanguage\" (click)=\"onLanguageChange(o)\">\r\n            <ui-radio-component\r\n                [value]=\"o === selectedLanguage\"\r\n                (valueChange)=\"onLanguageChange(o)\"\r\n                [smallRadio]=\"true\"\r\n            ></ui-radio-component>\r\n            {{o}}\r\n        </li>\r\n    </ul>\r\n</div>\r\n"
        },
        {
            "name": "LightboxComponent",
            "id": "component-LightboxComponent-85925088b6a3833c2136270af91fbfc5",
            "file": "projects/common/src/lib/component/lightbox/lightbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-lightbox-component",
            "styleUrls": [
                "./lightbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lightbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnDestroy, OnInit, Renderer2, ViewEncapsulation } from \"@angular/core\";\r\n\r\nimport { LightboxService } from '../../services/lightbox.service';\r\n\r\n@Component({\r\n    selector: 'ui-lightbox-component',\r\n    templateUrl: './lightbox.component.html',\r\n    styleUrls: ['./lightbox.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class LightboxComponent implements OnInit, OnDestroy {\r\n    @Input() id: string;\r\n    private element: any;\r\n\r\n    constructor(\r\n        private renderer: Renderer2,\r\n        private lightboxService: LightboxService,\r\n        el: ElementRef\r\n    ) {\r\n        this.element = el.nativeElement;\r\n    }\r\n    async ngOnInit(): Promise<void> {        \r\n        document.body.appendChild(this.element);\r\n\r\n        this.renderer.listen(this.element, 'click', event => {\r\n            if (event.target.className === 'lightbox.container') {\r\n                this.close();\r\n            }\r\n        });\r\n        this.lightboxService.add(this);\r\n\r\n        Promise.resolve();\r\n    }\r\n\r\n    async ngOnDestroy(): Promise<void> {\r\n        this.lightboxService.remove(this.id);\r\n        this.element.remove();\r\n\r\n        await Promise.resolve();\r\n    }\r\n    \r\n    open(): void {\r\n        this.renderer.setStyle(this.element, 'display', 'block');\r\n        this.renderer.addClass(document.body, 'lightbox-open');\r\n    }\r\n\r\n    close(): void {\r\n        this.renderer.setStyle(this.element, 'display', 'none');\r\n        this.renderer.removeClass(document.body, 'lightbox-open');\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ui-lightbox-component {\r\n    display: none;\r\n\r\n    .lightbox {\r\n        position: fixed;\r\n        left: 0;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        z-index: 1000;\r\n        overflow: auto;\r\n\r\n        .lightbox-body {\r\n            padding: 20px;\r\n            background-color: #fff;\r\n            margin: 40px;\r\n        }\r\n    }\r\n\r\n    .lightbox-background {\r\n        position: fixed;\r\n        left: 0;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        z-index: 900;\r\n        background-color: #000;\r\n        opacity: 0.7;\r\n    }\r\n}\r\n\r\nbody.lightbox-open {\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./lightbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "lightboxService",
                        "type": "LightboxService"
                    },
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lightboxService",
                        "type": "LightboxService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"lightbox\">\r\n    <div class=\"lightbox-body\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n<div class=\"lightbox-background\"></div>"
        },
        {
            "name": "LikeDislikeComponent",
            "id": "component-LikeDislikeComponent-544923e5537e71ac5693be4efc4d34f4",
            "file": "projects/common/src/lib/component/like-dislike/like-dislike.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-like-dislike-component",
            "styleUrls": [
                "./like-dislike.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./like-dislike.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dislikeVote",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "likeVote",
                    "line": 11,
                    "type": "number"
                },
                {
                    "name": "metadata",
                    "line": 13,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "voteChange",
                    "defaultValue": "new EventEmitter<{likeVote: boolean, dislikeVote: boolean }>()",
                    "line": 15,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onDislikeVoteChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onLikeVoteChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n\r\nimport { LikeDislikeVote } from \"../../types/like-dislike\";\r\n\r\n@Component({\r\n    selector: 'ui-like-dislike-component',\r\n    templateUrl: './like-dislike.component.html',\r\n    styleUrls: ['./like-dislike.component.scss']\r\n})\r\nexport class LikeDislikeComponent {\r\n    @Input() likeVote: number;\r\n    @Input() dislikeVote: number;\r\n    @Input() metadata: any;\r\n    \r\n    @Output() voteChange: EventEmitter<{ likeVote: boolean, dislikeVote: boolean }> = new EventEmitter<{likeVote: boolean, dislikeVote: boolean }>();\r\n\r\n    onLikeVoteChange(): void {\r\n        this.voteChange.emit({ likeVote: true, dislikeVote: false});\r\n    }\r\n\r\n    onDislikeVoteChange(): void {\r\n        this.voteChange.emit({ likeVote: false, dislikeVote: true });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n    width: 100%;\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-auto-columns: 1fr 1fr;\r\n    justify-content: stretch;\r\n    max-width: 200px;\r\n    column-gap: 15px;\r\n    \r\n    a {\r\n        position: relative;\r\n        padding: 10px;\r\n\r\n        i {\r\n            color: #999;\r\n        }\r\n\r\n        span {\r\n            position: absolute;\r\n            font-size: 0.8rem;\r\n            right: 0;\r\n            top: 18px;\r\n        }\r\n    }\r\n    \r\n}",
                    "styleUrl": "./like-dislike.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\r\n    <a \r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.votes && metadata.votes.likeVote && metadata.votes.likeVote.action\"\r\n        (execute)=\"onLikeVoteChange()\"\r\n    >\r\n        <i class=\"material-icons\">thumb_up</i>\r\n        <span>{{likeVote}} {{metadata && metadata.votes && metadata.votes.label}}</span>\r\n    </a>\r\n    <a \r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.votes && metadata.votes.dislikeVote && metadata.votes.dislikeVote.action\"\r\n        (execute)=\"onDislikeVoteChange()\"\r\n    >\r\n        <i class=\"material-icons\">thumb_down</i>\r\n        <span>{{dislikeVote}} {{metadata && metadata.votes && metadata.votes.label}}</span>\r\n    </a>\r\n</div>"
        },
        {
            "name": "ListContentComponent",
            "id": "component-ListContentComponent-013e66d80a6af3b0ffc822a0b8de3c8d",
            "file": "projects/content/src/lib/components/list/list.content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-list-content",
            "styleUrls": [
                "./list.content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_filterQuery",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hasMorePages",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "$windowWidth",
                    "defaultValue": "new Subject<any>()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "containers",
                    "type": "QueryList<ItemContainerComponent>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "ItemContainerComponent"
                        }
                    ]
                },
                {
                    "name": "items",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "listItems",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'listItems'"
                        }
                    ]
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "query",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showSidebar",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "setPaddingLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 110
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, ViewChildren, QueryList, ViewChild, ElementRef, HostListener, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { interval, Subject } from 'rxjs';\r\nimport { filter, debounceTime, distinctUntilChanged, takeUntil, debounce } from 'rxjs/operators';\r\n\r\nimport { Product, BaseComponent, InfiniteScrollService, SearchService, DataStoreService, MenuStateService, WINDOW } from '@common/src/public-api';\r\nimport { ItemContainerComponent } from './child-components/item-container/item-container.component';\r\n\r\n@Component({\r\n    selector: 'ui-list-content',\r\n    templateUrl: './list.content.component.html',\r\n    styleUrls: ['./list.content.component.scss'],\r\n})\r\nexport class ListContentComponent extends BaseComponent implements AfterViewInit {\r\n    private _pageNumber: number;\r\n    private _filterQuery: any;\r\n    private _loading: boolean = false;\r\n    private _hasMorePages: boolean = true;\r\n\r\n    query: string;\r\n    items: Array<Product>;\r\n    metadata: any;\r\n    showSidebar = false;\r\n    @ViewChildren(ItemContainerComponent) containers: QueryList<ItemContainerComponent>;\r\n    @ViewChild('listItems') listItems: ElementRef;\r\n\r\n    private $windowWidth: Subject<any> = new Subject<any>();\r\n\r\n    constructor(\r\n        private infiniteScrollService: InfiniteScrollService,\r\n        private serachService: SearchService,\r\n        private activatedRoute: ActivatedRoute,\r\n        menusStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n    ) {\r\n        super(router, window, menusStateService, dataStoreService);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.setPaddingLeft();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.activatedRoute.data.pipe(takeUntil(this.$destroy)).subscribe(data => {\r\n            this._pageNumber = 1;\r\n            this.metadata = data.metadata['Content'];\r\n            this.items = data.listData;\r\n            this.query = this.activatedRoute.snapshot.params['query'];\r\n            \r\n            const parseQuery = (query: any) => {\r\n                return {\r\n                    lob: query.lob,\r\n                    types: query.types\r\n                };\r\n            };\r\n            this.menuStateService.sideMenuFilters\r\n                .pipe(\r\n                    takeUntil(this.$destroy))\r\n                .subscribe(sm => {\r\n                    if (sm) {\r\n                        this._pageNumber = 1;\r\n                        this._filterQuery = sm;\r\n                        const query = btoa(JSON.stringify(Object.assign(sm, parseQuery(JSON.parse(atob(this.query))))));\r\n                        this.serachService.search(query, this._pageNumber++)\r\n                            .pipe(takeUntil(this.$destroy))\r\n                            .subscribe((data: Array<Product>) => {\r\n                                this._hasMorePages = Array.isArray(data) && data.length > 0;\r\n                                this.items = data;\r\n                            });\r\n                    }                \r\n                });\r\n\r\n            this.menuStateService.showSideBar\r\n                .pipe(takeUntil(this.$destroy))\r\n                .subscribe((value) => this.showSidebar = value);\r\n\r\n            this.$windowWidth\r\n                .pipe(                    \r\n                    debounceTime(50),\r\n                    distinctUntilChanged(),\r\n                    takeUntil(this.$destroy))\r\n                .subscribe((_) => this.setPaddingLeft());\r\n\r\n            this.infiniteScrollService.onScrolledDown\r\n                .pipe(\r\n                    filter(() => this._hasMorePages),\r\n                    debounce(() => interval(200)),\r\n                    takeUntil(this.$destroy))\r\n                .subscribe(() => {\r\n                    if (!this._loading) {\r\n                        this._loading = true;\r\n                        const query = btoa(JSON.stringify(Object.assign(JSON.parse(atob(this.query)), this._filterQuery)));\r\n                        this.serachService.search(query, ++this._pageNumber)\r\n                            .pipe(takeUntil(this.$destroy))\r\n                            .subscribe((data: Array<Product>) => {\r\n                                this._hasMorePages = Array.isArray(data) && data.length > 0;\r\n                                this.items = this.items.concat(data);\r\n                                this._loading = false;\r\n                            });\r\n                    }\r\n            });\r\n        });\r\n        \r\n        return Promise.resolve();\r\n    }\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onResize(event: any): void {\r\n        this.$windowWidth.next(event.target.innerWidth);\r\n    }\r\n\r\n    private setPaddingLeft(): void {\r\n        if (!this.listItems || !this.listItems.nativeElement) return;\r\n\r\n        const maxAllowedWidth = this.listItems.nativeElement.offsetWidth - 40;\r\n        let width = 0;\r\n\r\n        this.containers.forEach((c) => {\r\n            if (width + c.itemContainer.nativeElement.offsetWidth <= maxAllowedWidth) {\r\n                width += c.itemContainer.nativeElement.offsetWidth;\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.subMenu {\r\n    margin-bottom: 10px;\r\n    position: relative;\r\n}\r\n\r\n.main-container {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n}\r\n\r\n.main-nosidebar-container {\r\n    display: flex;\r\n    width: 100%;\r\n}\r\n\r\n.sidebar {\r\n    width: 200px;\r\n    min-height: calc(100vh - 300px);\r\n    border-right: 1px solid #e0e0e0;\r\n    display: none;\r\n}\r\n\r\n.main-container,\r\n.main-nosidebar-container {\r\n    .list-items {\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        align-items: stretch;\r\n        justify-content: center;\r\n        width: 100%;\r\n        flex: 1;\r\n        row-gap: 20px;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .main-container {\r\n        grid-template-columns: 200px auto;\r\n    }\r\n\r\n    .sidebar {\r\n        display: block;\r\n    }\r\n\r\n    .main-nosidebar-container {\r\n        display: flex;\r\n        margin: unset;\r\n        width: unset;\r\n    }\r\n\r\n    .main-container,\r\n    .main-nosidebar-container {\r\n        .list-items {\r\n            align-items: stretch;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./list.content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "infiniteScrollService",
                        "type": "InfiniteScrollService"
                    },
                    {
                        "name": "serachService",
                        "type": "SearchService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "menusStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "infiniteScrollService",
                        "type": "InfiniteScrollService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serachService",
                        "type": "SearchService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menusStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"subMenu\"><router-outlet name=\"submenu\"></router-outlet></div>\r\n<div\r\n    [ngClass]=\"{\r\n        'main-container': showSidebar,\r\n        'main-nosidebar-container': !showSidebar\r\n    }\"\r\n>\r\n    <ng-container *ngIf=\"showSidebar\">\r\n        <div class=\"sidebar\"><router-outlet name=\"sidebar\"></router-outlet></div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"items\">\r\n        <div class=\"list-items\" #listItems>\r\n            <ng-container *ngFor=\"let item of items\">\r\n                <ui-item-container-component [metadata]=\"metadata\" [query]=\"query\" [item]=\"item\"></ui-item-container-component>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "LocationComponent",
            "id": "component-LocationComponent-1f87cf89152377300637db0eb7087f36",
            "file": "projects/header/src/lib/components/header/child-components/location/location.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-location-component",
            "styleUrls": [
                "./location.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./location.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "city",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "location",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService, BaseComponent, CookieKeys, CookieService, WINDOW } from \"@common/src/public-api\";\r\n\r\n@Component({\r\n    selector: 'ui-location-component',\r\n    templateUrl: './location.component.html',\r\n    styleUrls: ['./location.component.scss']\r\n})\r\nexport class LocationComponent extends BaseComponent {\r\n    location: string;\r\n    city: string;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        private cookieService: CookieService,\r\n        private authService: AuthService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.location = \"412207\";\r\n        this.city = \"Pune\";\r\n    }\r\n\r\n    public get hasLocation(): boolean {\r\n        return this.cookieService.exists(CookieKeys.LocationCookie);\r\n    }\r\n\r\n    public get authenticated(): boolean {\r\n        return this.authService && this.authService.user && this.authService.user.authenticated;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui//src//scss//variables';\r\n@import '../../../../../../../ui//src//scss//mixins';\r\n\r\n.container {\r\n    width: 100vw;\r\n    height: 35px;\r\n    margin: 0;\r\n    background-color: $tertiary-color;\r\n    border: 1px solid transparent;\r\n    position: relative;\r\n    padding-left: 20px;\r\n\r\n    .mobile-container {\r\n        --position: relative;\r\n        --color: white;\r\n\r\n        .delivery-location,\r\n        .select-delivery-location {\r\n            &:after {\r\n                content: 'chevron_left';\r\n                position: absolute;\r\n                right: 10px;\r\n                top: 5px;\r\n                font-family: 'Material Icons';\r\n                font-feature-settings: 'liga';\r\n                transform: rotate(-90deg);\r\n                font-size: 1.5rem\r\n            }\r\n        }\r\n    }\r\n\r\n    .desktop-container {\r\n        --position: relative;\r\n        --color: white;\r\n\r\n        display: none;\r\n\r\n        .delivery-location,\r\n        .select-delivery-location {\r\n            text-align: right;\r\n            padding: 0;\r\n            padding-right: 10px;\r\n            margin-top: -6px;\r\n\r\n            &.authenticated {\r\n                margin-top: 0;\r\n            }\r\n\r\n            &:after {\r\n                @include down-arrow(-16px, 1px);\r\n                right: -7px;\r\n                bottom: 2px;\r\n            }\r\n\r\n            i {\r\n                position: relative;\r\n                padding: 5px;\r\n            } \r\n        }\r\n    }\r\n\r\n    .delivery-location,\r\n    .select-delivery-location {\r\n        position: var(--position);\r\n        color: var(--color);\r\n        text-align: center;\r\n        padding: 9px 0;\r\n \r\n        i {\r\n            position: absolute;\r\n            left: -10px;\r\n            top: 5px;\r\n        } \r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {\r\n        width: 100%;\r\n        background-color: transparent;\r\n    }\r\n\r\n    .mobile-container {\r\n        display: none!important;\r\n    }\r\n\r\n    .desktop-container {\r\n        display: block!important;\r\n    }\r\n}",
                    "styleUrl": "./location.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "hasLocation": {
                    "name": "hasLocation",
                    "getSignature": {
                        "name": "hasLocation",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 28
                    }
                },
                "authenticated": {
                    "name": "authenticated",
                    "getSignature": {
                        "name": "authenticated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <ng-container *ngTemplateOutlet=\"mobileTemplate\"></ng-container>\r\n    <ng-container *ngTemplateOutlet=\"desktopTemplate\"></ng-container>\r\n</div>\r\n\r\n<ng-template #mobileTemplate>\r\n    <div class=\"mobile-container\">\r\n        <ng-container *ngTemplateOutlet=\"locationTemplate\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #desktopTemplate>\r\n    <div class=\"desktop-container\">\r\n        <ng-container *ngTemplateOutlet=\"locationTemplate\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #locationTemplate>\r\n    <div *ngIf=\"!hasLocation\" class=\"select-delivery-location\" [ngClass]=\"{ 'authenticated': authenticated }\">\r\n        <i class=\"material-icons\">location_on</i>\r\n        <span>Select delivery location</span>\r\n    </div>\r\n    <div *ngIf=\"hasLocation\" class=\"delivery-location\" [ngClass]=\"{ 'authenticated': authenticated }\">\r\n        <i class=\"material-icons\">location_on</i>\r\n        <span>{{location}}, {{city}}</span>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-f92d9b8b87011f6dec802d3cd8d5c5b4",
            "file": "projects/login/src/lib/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acceptPassword",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ignoreMediaQueries",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isContinueDisabled",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isStepOne",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "model",
                    "type": "ILogin",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "notVerified",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "passwordAsClearText",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "passwordControl",
                    "type": "TextboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'passwordControl'"
                        }
                    ]
                },
                {
                    "name": "returnUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "showPasswordText",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userNameControl",
                    "type": "TextboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'userNameControl'"
                        }
                    ]
                },
                {
                    "name": "verificationSent",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 192,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 229,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessageIfAny",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 143,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getLoginMode",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "\"Mobile\" | \"Email\"",
                    "typeParameters": [],
                    "line": 239,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onChangeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onContinueButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onForgotPasswordClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onKeyup",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResendEmailClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onResendOtpClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onSignInButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 99,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resetModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setShowPasswordText",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, AfterViewInit, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { from } from 'rxjs';\r\nimport { delay, first, takeUntil } from 'rxjs/operators';\r\n\r\nimport {\r\n    BaseComponent,\r\n    DataStoreService,\r\n    IInputValue,\r\n    NavigationService,\r\n    RouteKeys,\r\n    TextboxComponent,\r\n    VerificationService,\r\n    VerificationState,\r\n    VerificationType,\r\n    WINDOW,\r\n} from '@common/src/public-api';\r\nimport { ILogin } from '@login/src/lib/models/ILogin';\r\nimport { LoginService } from '@login/src/lib/services/login.service';\r\n\r\n@Component({\r\n    selector: 'ui-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent extends BaseComponent implements AfterViewInit {\r\n    private errorMessage: string;\r\n    private returnUrl: string;\r\n\r\n    model: ILogin;\r\n    metadata: any;\r\n    acceptPassword: boolean;\r\n    isContinueDisabled = true;\r\n    isStepOne = true;\r\n    ignoreMediaQueries: boolean;\r\n    showPasswordText: boolean;\r\n    passwordAsClearText: string;\r\n    notVerified: boolean = false;\r\n    verificationSent: boolean;\r\n\r\n    @ViewChild('passwordControl') passwordControl: TextboxComponent;\r\n    @ViewChild('userNameControl') userNameControl: TextboxComponent;\r\n\r\n    constructor(\r\n        private loginService: LoginService,\r\n        private verificationService: VerificationService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private navigationService: NavigationService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n        this.model = {\r\n            userName: null,\r\n            password: null,\r\n            mode: '',\r\n            isoCode: '+91',\r\n        };\r\n        this.ignoreMediaQueries = true;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.returnUrl = this.activatedRoute.snapshot.queryParams['returnUrl']  || (await this.dataStoreService.get('redirect-url')) || '/home';\r\n        await this.dataStoreService.push('redirect-url', null);\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['SignIn'];\r\n        this.reset();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.setFocus('username');\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onValueChange(inputValue: IInputValue): void {\r\n        switch (inputValue.name) {\r\n            case 'emailOrMobile':\r\n                this.model.userName = inputValue.value;\r\n                this.model.mode = this.getLoginMode(inputValue.value);\r\n                break;\r\n            case 'password':\r\n                this.model.password = inputValue.value;\r\n                break;\r\n        }\r\n    }\r\n\r\n    public onForgotPasswordClick(): void {\r\n        this.dataStoreService\r\n            .push('fp-user', { isoCode: this.model.isoCode, mode: this.model.mode, userName: this.model.userName })\r\n            .then((_) => this.navigationService.navigateForUrl(RouteKeys.ForgotPassword));\r\n    }\r\n\r\n    public async onContinueButtonClick(): Promise<void> {\r\n        await this.buttonClick();\r\n    }\r\n\r\n    public async onSignInButtonClick(): Promise<void> {\r\n        await this.buttonClick();\r\n    }\r\n\r\n    public async onResendOtpClick(): Promise<void> {\r\n        try {\r\n            await this.verificationService.resendMobileOtp(\r\n                VerificationType.NewAccountVerify,\r\n                this.model.isoCode,\r\n                this.model.userName\r\n            );\r\n            await this.dataStoreService.push('verify-otp', {\r\n                isoCode: this.model.isoCode,\r\n                mobile: this.model.userName,\r\n                verificationType: VerificationType.NewAccountVerify,\r\n            });\r\n            this.router.navigateByUrl('/verifyotp');\r\n        } catch (e) {\r\n            this.errorMessage = this.getErrorMessage('resendOtp');\r\n            from([0])\r\n                .pipe(delay(5000), takeUntil(this.$destroy))\r\n                .subscribe((_) => (this.errorMessage = ''));\r\n        }\r\n    }\r\n\r\n    public async onResendEmailClick(): Promise<void> {\r\n        try {\r\n            await this.verificationService.resendEmail(VerificationType.NewAccountVerify, this.model.userName);\r\n            this.verificationSent = true;\r\n            this.notVerified = false;\r\n            from([0])\r\n                .pipe(delay(10000), takeUntil(this.$destroy))\r\n                .subscribe((_) => {\r\n                    this.verificationSent = false;\r\n                    this.errorMessage = null;\r\n                });\r\n        } catch (e) {\r\n            this.errorMessage = this.getErrorMessage('resendEmail');\r\n            from([0])\r\n                .pipe(delay(5000), takeUntil(this.$destroy))\r\n                .subscribe((_) => (this.errorMessage = ''));\r\n        }\r\n    }\r\n\r\n    public getErrorMessageIfAny(): string {\r\n        return this.errorMessage;\r\n    }\r\n\r\n    public setShowPasswordText(show: boolean): void {\r\n        this.showPasswordText = show;\r\n    }\r\n\r\n    public onKeyup($event: KeyboardEvent): void {\r\n        this.passwordAsClearText = ($event.target as HTMLInputElement).value;\r\n    }\r\n\r\n    public onChangeClick(): void {\r\n        this.reset();\r\n        this.setFocus('username');\r\n    }\r\n\r\n    get diagnostic() {\r\n        return JSON.stringify(this.model);\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return !(this.errorMessage === null || this.errorMessage === undefined || this.errorMessage.length === 0);\r\n    }\r\n\r\n    private reset(): void {\r\n        this.resetModel();\r\n        this.isStepOne = true;\r\n        this.acceptPassword = false;\r\n        this.showPasswordText = false;\r\n        this.passwordAsClearText = '';\r\n        this.notVerified = false;\r\n        this.verificationSent = false;\r\n    }\r\n\r\n    private resetModel(): void {\r\n        this.model = { userName: '', password: '', mode: '', isoCode: '+91' };\r\n    }\r\n\r\n    private setFocus(controlName: string): void {\r\n        from([0]).pipe(delay(0), first()).subscribe(x => {\r\n            if (controlName.toLowerCase() === 'username') {\r\n                this.userNameControl.focus();\r\n            } else {\r\n                this.passwordControl.focus();\r\n            }            \r\n        });\r\n    }\r\n\r\n    private async buttonClick(): Promise<void> {\r\n        this.errorMessage = null;\r\n\r\n        try {\r\n            if (this.isStepOne) {\r\n                const verificationState = await this.loginService.validateUsername(\r\n                    this.model.mode,\r\n                    this.model.userName,\r\n                    this.model.isoCode\r\n                );\r\n                if (verificationState && verificationState.state === VerificationState.NotVerified) {\r\n                    this.notVerified = true;\r\n                } else {\r\n                    this.isStepOne = false;\r\n                    this.setFocus('password');\r\n                }\r\n            } else {\r\n                await this.loginService.signin(\r\n                    this.model.mode,\r\n                    this.model.userName,\r\n                    this.model.isoCode,\r\n                    this.model.password\r\n                );\r\n                const redirect = this.returnUrl;\r\n                this.router.navigateByUrl(redirect);\r\n            }\r\n        } catch (e) {\r\n            if (e.status === 400) {\r\n                this.errorMessage = this.getErrorMessage(`invalid${this.model.mode}`);\r\n            } else {\r\n                this.errorMessage = this.getErrorMessage(\r\n                    this.isStepOne ? `validateUsername${this.model.mode}` : 'password'\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    private getErrorMessage(key: string): string {\r\n        const msg = this.metadata.errorMessages.find((m) => m.key === key);\r\n\r\n        if (msg) {\r\n            return msg.text;\r\n        }\r\n\r\n        return 'Unknown Error';\r\n    }\r\n\r\n    private getLoginMode(value: string): 'Mobile' | 'Email' {\r\n        const pattern = \"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|&#34;(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d-\\\\x7f]|\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])*&#34;)@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e-\\\\x7f])+)\\\\])\";\r\n        const regex = new RegExp(pattern);\r\n        \r\n        return regex.test(value) ? 'Email' : 'Mobile';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/assets/fonts/material-icons/material-icons.css';\r\n\r\n.login-container {\r\n    position: relative;\r\n    height: 100%;\r\n    background: #fff;\r\n    width: 100%;\r\n    margin: 0;\r\n\r\n    > * {\r\n        margin: 0;\r\n    }\r\n\r\n    .login-form-container {\r\n        max-width: 18rem;        \r\n        margin: auto;\r\n\r\n        .error {\r\n            span:not(:first-child) {\r\n                color: $mobile-regular-color;\r\n                margin-top: 8px;\r\n            }\r\n\r\n            span:first-child {\r\n                font-weight: 500;\r\n                font-size: 1.1em;\r\n            }\r\n        }\r\n    }\r\n\r\n    .header {\r\n        color: $mobile-regular-color;\r\n        margin-top: 22px;\r\n        margin-bottom: 10px;\r\n        font-weight: 500;\r\n    }\r\n\r\n    .login-form {\r\n        background: $form-background-color;\r\n        border: 1px solid transparent;\r\n        border-radius: 2px;\r\n        text-align: center;\r\n        padding: 20px 0;\r\n        margin-top: 10px;\r\n\r\n        .section {\r\n            text-align: left;\r\n            font-weight: 500;\r\n            font-size: 0.9em;\r\n            color: $highlight;\r\n\r\n            span {\r\n                color: $mobile-regular-color;\r\n                font-weight: normal;\r\n                font-size: 0.9em;\r\n                line-height: 18px;\r\n\r\n                &.change {\r\n                    display: block;\r\n                    font-weight: 500;\r\n                    color: $highlight;\r\n                    margin-top: 2px;\r\n\r\n                    button {\r\n                        margin-left: 2px;\r\n                        cursor: pointer;\r\n                        font-weight: normal;\r\n                        cursor: pointer;\r\n                        text-decoration: underline;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .sign-in-options {\r\n            text-align: left;\r\n\r\n            div {\r\n                display: inline-block;\r\n                width: 50px;\r\n\r\n                &.dropdown {\r\n                    width: calc(100% - 50px);\r\n                }\r\n            }\r\n        }\r\n        .password-controls {\r\n            position: relative;\r\n            height: $mobile-control-height;\r\n            margin-top: 3px;\r\n\r\n            ui-textbox-component {\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n                width: 100%;\r\n            }\r\n\r\n            i {\r\n                position: absolute;\r\n                right: 6px;\r\n                top: 21px;\r\n                z-index: 999;\r\n                font-size: 1em;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n\r\n        .btn {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .forgot-password {\r\n            margin-top: 10px;\r\n            cursor: pointer;\r\n            font-weight: normal;\r\n            cursor: pointer;\r\n            text-decoration: underline;\r\n        }\r\n\r\n        .acceptance {\r\n            margin-top: 20px;\r\n            font-size: 0.8em;\r\n        }\r\n\r\n        .create-account {\r\n            font-size: 0.9em;\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .mobile-number {\r\n            display: grid;\r\n            grid-template-columns: 80px auto;\r\n        }\r\n    }\r\n\r\n    .not-verified,\r\n    .resend {\r\n        margin-top: 20px;\r\n        text-align: left;\r\n        font-size: 0.9em;\r\n\r\n        .failure {\r\n            ::ng-deep & {\r\n                color: $error-text-color;\r\n            }\r\n        }\r\n\r\n        .success {\r\n            ::ng-deep & {\r\n                color: $success-text-color;\r\n            }\r\n        }\r\n\r\n        .bold {\r\n            ::ng-deep & {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        .statement-container {\r\n            ::ng-deep & {\r\n                line-height: 18px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $desktop-min-width) {\r\n    .control-row .control input {\r\n        + label {\r\n            background-color: transparent;\r\n            left: 0;\r\n            text-align: left;\r\n            animation: move-label-down 0.5s ease-in-out;\r\n        }\r\n        &.has-value,\r\n        &:focus {\r\n            + label {\r\n                animation: move-label-up 0.3s ease-in-out;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService"
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "diagnostic": {
                    "name": "diagnostic",
                    "getSignature": {
                        "name": "diagnostic",
                        "type": "",
                        "returnType": "",
                        "line": 160
                    }
                },
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 164
                    }
                }
            },
            "templateData": "<div class=\"login-container\">\r\n    <div class=\"login-form-container\">\r\n        <h4 class=\"header\">\r\n            {{ metadata && metadata.header && metadata.header.label }}\r\n        </h4>\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span>{{ getErrorMessageIfAny() }}</span>\r\n        </div>\r\n        <div class=\"login-form\">\r\n            <ng-container *ngIf=\"isStepOne\">\r\n                <ng-container *ngTemplateOutlet=\"usernameTemplate\"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!isStepOne\">\r\n                <ng-container *ngTemplateOutlet=\"passwordTemplate\"></ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #passwordTemplate>\r\n    <div class=\"section\">\r\n        {{ metadata && metadata.signIn && metadata.signIn.label }}\r\n        <span>{{ model.userName }}</span>\r\n        <span class=\"change\">\r\n            {{ metadata && metadata.notYou && metadata.notYou.label }}\r\n            <button (click)=\"onChangeClick()\">\r\n                {{ metadata && metadata.change && metadata.change.label }}\r\n            </button>\r\n        </span>\r\n    </div>\r\n    <div class=\"password-controls\">\r\n        <i\r\n            class=\"material-icons\"\r\n            (mousedown)=\"setShowPasswordText(true)\"\r\n            (press)=\"setShowPasswordText(true)\"\r\n            (pressup)=\"setShowPasswordText(false)\"\r\n            (mouseup)=\"setShowPasswordText(false)\"\r\n            >remove_red_eye</i\r\n        >\r\n        <ui-textbox-component\r\n            #passwordControl\r\n            [show]=\"!showPasswordText\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.password\"\r\n            (keyboardKeyup)=\"onKeyup($event)\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        >\r\n        </ui-textbox-component>\r\n        <ui-textbox-component\r\n            [show]=\"showPasswordText\"\r\n            [readonly]=\"true\"\r\n            type=\"text\"\r\n            name=\"showpassword\"\r\n            [value]=\"passwordAsClearText\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.showPassword\"\r\n        >\r\n        </ui-textbox-component>\r\n    </div>\r\n    <button\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.signIn && metadata.signIn.action\"\r\n        class=\"btn btn-primary\"\r\n        (execute)=\"onSignInButtonClick()\"\r\n    >\r\n        {{ metadata && metadata.signIn && metadata.signIn.label }}\r\n    </button>\r\n    <button class=\"forgot-password\" (click)=\"onForgotPasswordClick()\">\r\n        {{ metadata && metadata.forgotPassword && metadata.forgotPassword.label }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #usernameTemplate>\r\n    <ng-container *ngIf=\"metadata && metadata.createAccount && metadata.createAccount.statement\">\r\n        <div class=\"create-account\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.createAccount\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"section\">\r\n        {{ metadata && metadata.signInText && metadata.signInText.label }}\r\n    </div>\r\n    <ui-textbox-component\r\n        #userNameControl\r\n        (valueChange)=\"onValueChange($event)\"\r\n        [value]=\"model.userName\"\r\n        type=\"text\"\r\n        name=\"emailOrMobile\"\r\n        [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n        [metadata]=\"metadata && metadata.emailOrMobile\"\r\n    >\r\n    </ui-textbox-component>\r\n\r\n    <button\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.continue && metadata.continue.action\"\r\n        class=\"btn btn-primary\"\r\n        [hidden]=\"notVerified && !verificationSent\"\r\n        (execute)=\"onContinueButtonClick()\"\r\n    >\r\n        {{ metadata && metadata.continue && metadata.continue.label }}\r\n    </button>\r\n\r\n    <div class=\"not-verified\" [hidden]=\"!notVerified || (model.mode === 'Email' && notVerified)\">\r\n        <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata && metadata.resendOtp && metadata.resendOtp.description\"></ng-container>\r\n        <button\r\n            uiRecaptcha\r\n            [action]=\"metadata && metadata.resendOtp && metadata.resendOtp.action\"\r\n            class=\"btn btn-light btn-light-bordered\"\r\n            (execute)=\"onResendOtpClick()\"\r\n        >\r\n            {{ metadata && metadata.resendOtp && metadata.resendOtp.label }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"not-verified\" [hidden]=\"!notVerified || (model.mode === 'Mobile' && notVerified)\">\r\n        <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata && metadata.resendOtp && metadata.resendEmail.description\"></ng-container>\r\n        <button\r\n            uiRecaptcha\r\n            [action]=\"metadata && metadata.resendEmail && metadata.resendEmail.action\"\r\n            class=\"btn btn-light btn-light-bordered\"\r\n            (click)=\"onResendEmailClick()\"\r\n        >\r\n            {{ metadata && metadata.resendEmail && metadata.resendEmail.label }}\r\n        </button>\r\n    </div>\r\n    <div class=\"resend\" [hidden]=\"!verificationSent\">\r\n        <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata && metadata.resendEmail && metadata.resendEmail.resendSuccess\"></ng-container>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"metadata && metadata.acceptance && metadata.acceptance.statement\">\r\n        <div class=\"acceptance\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.acceptance\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-876d51e94eef695b26b2b5b0fb434eeb",
            "file": "projects/menu/src/lib/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-menu",
            "styleUrls": [
                "menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mainMenuKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showMainMenu",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subMenuKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getMenuItemClass",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "menuItemClick",
                    "args": [
                        {
                            "name": "category",
                            "type": "string"
                        },
                        {
                            "name": "query",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "query",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMenuStateServiceObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { Router, ActivationEnd } from '@angular/router';\r\nimport { filter, first, takeUntil } from 'rxjs/operators';\r\n\r\nimport { BaseMenuComponent } from '../base-menu.component';\r\nimport { DataStoreService, MenuStateService, NavigationService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-menu',\r\n    templateUrl: 'menu.component.html',\r\n    styleUrls: ['menu.component.scss'],\r\n})\r\nexport class MenuComponent extends BaseMenuComponent {\r\n    menuItems: Array<any> = [];\r\n    subMenuKey: string;\r\n    mainMenuKey: string;\r\n    showMainMenu: boolean\r\n\r\n    constructor (\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.router.events\r\n            .pipe(\r\n                filter((event) => {\r\n                    return event instanceof ActivationEnd; \r\n                }),\r\n                first(),\r\n                takeUntil(this.$destroy),\r\n            )\r\n            .subscribe((event: any) => {\r\n                const items = event.snapshot.data.menuData;\r\n                if (Array.isArray(items) && items.length > 0) {\r\n                    this.menuItems = items.filter(i => i.active === true).sort((a: any, b: any) => a.order - b.order);\r\n                }\r\n            });\r\n        \r\n            this.setMenuStateServiceObservables();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public getMenuItemClass(item: any): string {\r\n        return `${item.class} ${(item.label.toLowerCase() === this.mainMenuKey?.toLowerCase() ? 'selected' : '')}`;\r\n    }\r\n\r\n    public async menuItemClick(category: string, query: string): Promise<void> {\r\n        await this.navigationService.navigateForCategory(query, category, this.currentPage);\r\n    }\r\n\r\n    private setMenuStateServiceObservables(): void {\r\n        this.menuStateService.mainMenuKey.pipe(takeUntil(this.$destroy)).subscribe(k => this.mainMenuKey = k);\r\n        this.menuStateService.subMenuKey.pipe(takeUntil(this.$destroy)).subscribe(k => this.subMenuKey = k);\r\n        this.menuStateService.showMainMenu.pipe(takeUntil(this.$destroy)).subscribe(k => this.showMainMenu = k);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.desktop-container {\r\n    display: none;\r\n\r\n    --navbar-height: 52px;\r\n    --navbar-nav-height: 70px;\r\n    --font-size: $font-size;\r\n    --nav-item-height: 38px;\r\n    --nav-item-width: unset;\r\n    --nav-item-border-radius: 5px;\r\n    --white-space: nowrap;\r\n    --navbar-background-color:  #9b0859;\r\n    --nav-item-opacity: 1;\r\n    --nav-item-span-color: #fff;\r\n    --nav-item-letter-spacing: 0.5px;\r\n    --nav-item-font-size: 1rem;\r\n    --nav-item-span-position: static;\r\n}\r\n\r\n.mobile-container {\r\n    --navbar-height: 80px;\r\n    --navbar-nav-height: 85px;\r\n    --font-size: $font-size;\r\n    --nav-item-height: 68px;\r\n    --nav-item-width: 68px;\r\n    --nav-item-border-radius: 34px;\r\n    --white-space: normal;\r\n    --navbar-background-color: #fff;\r\n    --nav-item-opacity: 0.5;\r\n    --nav-item-span-color: #000;\r\n    --nav-item-letter-spacing: normal;\r\n    --nav-item-font-size: 0.75rem;\r\n    --nav-item-span-position: absolute;\r\n\r\n    .navbar {\r\n        .navbar-nav * {\r\n            background-color: transparent;\r\n            color: $menu-color;\r\n        }\r\n    }\r\n\r\n    .nav-item {\r\n        &.fruits {\r\n            background-color: #c0f3c0;            \r\n        }\r\n\r\n        &.dairy {\r\n            background-color: #f5f3f3;\r\n        }\r\n\r\n        &.bakery {\r\n            background-color: #c68958;\r\n        }\r\n\r\n        &.daily {\r\n            background-color: #c9c9f3;\r\n        }\r\n\r\n        &.beverages {\r\n            background-color: #ffd1d1;\r\n        }\r\n\r\n        &.snacks {\r\n            background-color: #f7b78b;\r\n        }\r\n\r\n        &.personal {\r\n            background-color: #f7f7ca;\r\n        }\r\n\r\n        &.home {\r\n            background-color: #f3dbba;\r\n        }\r\n\r\n        &.baby {\r\n            background-color: pink;\r\n        }\r\n    }\r\n}\r\n\r\n.navbar {\r\n    overflow-y: hidden;\r\n    color: #fff;\r\n    border: 0 solid transparent;\r\n    font-size: var(--font-size);\r\n    height: var(--navbar-height);\r\n\r\n    .navbar-nav {\r\n        display: inline-block;\r\n        justify-content: center;\r\n        width: 100%;\r\n        overflow-x: scroll;\r\n        overflow-y: hidden;\r\n        white-space: nowrap;\r\n        border: 1px solid transparent;\r\n        height: var(--navbar-nav-height);\r\n        background-color: var(--navbar-background-color);\r\n        padding-top: 5.5px;;\r\n    }\r\n\r\n    .nav-item {\r\n        display: inline-block;\r\n        border: 1px solid transparent;\r\n        opacity: var(--nav-item-opacity);\r\n        margin-left: 40px;\r\n        position: relative;\r\n        cursor: pointer;\r\n        border-radius: var(--nav-item-border-radius);\r\n        height: var(--nav-item-height);\r\n        width: var(--nav-item-width);\r\n        cursor: pointer;\r\n\r\n        span {\r\n            position: var(--nav-item-span-position);\r\n            left: 50%;\r\n            top: 50%;\r\n            transform: translate(-50%, -50%);\r\n            text-align: center;\r\n            font-size: var(--nav-item-font-size);\r\n            font-weight: 600;\r\n            color: var(--nav-item-span-color);\r\n            background-color: transparent;\r\n            white-space: var(--white-space);\r\n            letter-spacing: var(--nav-item-letter-spacing);\r\n        }\r\n\r\n        &:first-child {\r\n            margin-left: 10px;\r\n        }\r\n\r\n        &:last-child {\r\n            margin-right: 10px;\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .mobile-container {\r\n        display: none;\r\n    }\r\n\r\n    .desktop-container {\r\n        display: block;\r\n    }\r\n\r\n    .navbar {\r\n        .nav-item {\r\n            padding: 7px 11px;\r\n            \r\n            &.selected {\r\n                opacity: 0.5;\r\n                border: 2px solid white;\r\n                cursor: not-allowed;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseMenuComponent",
            "templateData": "<ng-container *ngIf=\"showMainMenu && menuItems\">\r\n    <nav [ngClass]=\"{ 'mobile-container navbar': isMobile, 'desktop-container navbar': !isMobile }\">\r\n        <ng-container *ngTemplateOutlet=\"menuTemplate\"></ng-container>\r\n    </nav>\r\n</ng-container>\r\n\r\n<ng-template #menuTemplate>    \r\n    <div id=\"navbarSupportedContent\">\r\n        <div class=\"navbar-nav mr-auto\">\r\n            <span class=\"nav-item\" [ngClass]=\"getMenuItemClass(item)\" *ngFor=\"let item of menuItems;\" (click)=\"menuItemClick(item.label, item.url)\">\r\n                <span>{{item.label}}</span>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</ng-template>"
        },
        {
            "name": "MultiItemReviewComponent",
            "id": "component-MultiItemReviewComponent-43b47de4b942776ec2a4dc5db4fab740",
            "file": "projects/content/src/lib/components/reviews/multi-item-review/multi-item-review.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-multi-item-review-component",
            "styleUrls": [
                "./multi-item-review.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-item-review.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 28,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reviews",
                    "defaultValue": "[]",
                    "type": "Array<Review>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getImageUrl",
                    "args": [
                        {
                            "name": "productID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductDescription",
                    "args": [
                        {
                            "name": "productID",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "productID",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onImageClick",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRatingChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type"
                        },
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateReview",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { NotificationMessageKeys } from \"@common/src/lib/constants/notification.message.keys\";\r\nimport { \r\n    AuthService,\r\n    BaseComponent,\r\n    DataStoreService,\r\n    MenuStateService,\r\n    NavigationService,\r\n    NotificationService,\r\n    Product,\r\n    ProductReviewService,\r\n    Review,\r\n    WINDOW\r\n } from \"@common/src/public-api\";\r\nimport { interval } from \"rxjs\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\n\r\n@Component({\r\n    selector: 'ui-multi-item-review-component',\r\n    templateUrl: './multi-item-review.component.html',\r\n    styleUrls: ['./multi-item-review.component.scss']\r\n})\r\nexport class MultiItemReviewComponent extends BaseComponent {\r\n    products: Array<Product> = [];\r\n    reviews: Array<Review> = [];\r\n    \r\n    @Input() metadata: any;\r\n    \r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private productReviewService: ProductReviewService,\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);        \r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        const data = this.activatedRoute.snapshot.data;\r\n\r\n        this.metadata = data.metadata['MultiItemReview'];\r\n        this.products = data.products;\r\n        this.reviews = data.reviews;\r\n\r\n        interval(100).pipe(takeUntil(this.$destroy)).subscribe(async _ => {\r\n            this.menuStateService.changeShowMainMenu(!this.isMobile);\r\n            this.menuStateService.changeShowSubMenu(this.menuStateService.getShowMainMenu());\r\n        });\r\n    }\r\n\r\n    public get user(): string {\r\n        const user = this.authService.user;\r\n        return `${user.firstName} ${user.lastName}`;\r\n    }\r\n\r\n    public getImageUrl(productID: string): string {\r\n        const product = this.products.find(p => p._id === productID);\r\n\r\n        if (product && Array.isArray(product.images)){\r\n            const image = product.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public getProductDescription(productID: string): string {\r\n        return this.products.find(p => p._id === productID)?.description || '';\r\n    }\r\n\r\n    public async onRatingChange($event: { selected: boolean, value: number }, review: Review): Promise<void> {\r\n        const clone = { ...review }\r\n        clone.rating = review.rating === 1 && $event.value === 1 && !$event.selected ? 0 : $event.value;\r\n\r\n        await this.updateReview(clone);\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onImageClick(review: Review): Promise<void> {\r\n        await this.navigationService.navigateForUrl(`/review/product/${review.productID}/order/${review.orderID}`, `/reviews/order/${review.orderID}`, this.isMobile);\r\n    }\r\n\r\n    private async updateReview(review: Review): Promise<void> {\r\n        try {\r\n            const index = this.reviews.findIndex(r => r._id === review._id);\r\n\r\n            await this.tokenService.xsrf();\r\n\r\n            const reviewToUpdate = await this.productReviewService.saveReview(review).toPromise();\r\n            this.reviews.splice(index, 1, reviewToUpdate);\r\n        } catch {\r\n            this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../ui/src/scss/mixins';\r\n@import '../mixins.scss';\r\n\r\n.review-container {\r\n    @include non-content-container;\r\n    padding: 0 10px;\r\n\r\n    .reviewer {\r\n        @include reviewer;\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    .header {\r\n        @include header;\r\n    }\r\n\r\n    .items-container {\r\n        margin-top: 2rem;\r\n\r\n        .mobile-container {\r\n            --grid-auto-flow: row;\r\n            --grid-template-columns: 1fr;\r\n        }\r\n\r\n        .desktop-container {\r\n            --grid-auto-flow: column;\r\n            --grid-template-columns: 1fr 3fr 2.5fr;\r\n        }\r\n\r\n        .item-container {\r\n            display: grid;\r\n            grid-auto-flow: var(--grid-auto-flow);\r\n            grid-template-columns: var(--grid-template-columns);\r\n            column-gap: 1rem;\r\n            row-gap: 1rem;\r\n            box-shadow: 0 0.3rem 0.7rem #e1e1e1;\r\n            padding: 0.9rem;\r\n            border: 0.1rem solid transparent;\r\n            border-radius: $border-radius;\r\n\r\n            &:not(:first-child) {\r\n                margin-top: 1rem;\r\n            }\r\n\r\n            figure {\r\n                @include small-product-image(60px, 60px);\r\n            }\r\n\r\n            > * {\r\n                align-self: center;\r\n            }\r\n        }\r\n        \r\n    }\r\n}",
                    "styleUrl": "./multi-item-review.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "productReviewService",
                        "type": "ProductReviewService"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productReviewService",
                        "type": "ProductReviewService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "user": {
                    "name": "user",
                    "getSignature": {
                        "name": "user",
                        "type": "string",
                        "returnType": "string",
                        "line": 57
                    }
                }
            },
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n    <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n<div class=\"review-container\">\r\n    <div class=\"reviewer\">\r\n        <i class=\"material-icons\">person</i>\r\n        {{user}}\r\n    </div>\r\n\r\n    <div class=\"header\">{{metadata && metadata.purchaseReviews && metadata.purchaseReviews.label}}</div>\r\n    \r\n    <div class=\"items-container\">\r\n        <div class=\"item-container\" *ngFor=\"let review of reviews\">\r\n            <figure>\r\n                <img [src]=\"getImageUrl(review.productID)\" (click)=\"onImageClick(review)\" />\r\n            </figure>\r\n            <div class=\"description\">\r\n                <span>{{getProductDescription(review.productID)}}</span>\r\n            </div>\r\n            <ui-star-rating-component (onChange)=\"onRatingChange($event, review)\" [rating]=\"review && review.rating\"></ui-star-rating-component>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "NewCustomerComponent",
            "id": "component-NewCustomerComponent-3b2452b802fc87fd6a072d602e34eb86",
            "file": "projects/customer/src/lib/components/new-customer/new-customer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-new-customer",
            "styleUrls": [
                "./new-customer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-customer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkAllInputs",
                    "type": "CheckAllInputsValidDirective",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CheckAllInputsValidDirective"
                        }
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ignoreMediaQueries",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isoNumbers",
                    "defaultValue": "[{ id: '+91', value: 'IN +91' }]",
                    "type": "Array<ILookup>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "model",
                    "type": "INewCustomer",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onCreateAccountClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resetModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Inject, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    BaseComponent,\r\n    CheckAllInputsValidDirective,\r\n    DataStoreService,\r\n    HttpStatusCode,\r\n    IInputValue,\r\n    ILookup,\r\n    NavigationService,\r\n    RouteKeys,\r\n    VerificationType,\r\n    WINDOW,\r\n} from '@common/src/public-api';\r\nimport { from } from 'rxjs';\r\nimport { delay, first, takeUntil } from 'rxjs/operators';\r\nimport { INewCustomer } from '../../models/INewCustomer';\r\nimport { CustomerService } from '../../services/customer.service';\r\n\r\n@Component({\r\n    selector: 'ui-new-customer',\r\n    templateUrl: './new-customer.component.html',\r\n    styleUrls: ['./new-customer.component.scss'],\r\n})\r\nexport class NewCustomerComponent extends BaseComponent implements AfterViewInit {\r\n    errors: Array<any> = [];\r\n\r\n    @ViewChild(CheckAllInputsValidDirective) checkAllInputs: CheckAllInputsValidDirective;\r\n    isValid: boolean;\r\n    isoNumbers: Array<ILookup> = [{ id: '+91', value: 'IN +91' }];\r\n    metadata: any;\r\n    ignoreMediaQueries: boolean;\r\n    model: INewCustomer;\r\n\r\n    constructor(\r\n        private customerService: CustomerService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private navigationService: NavigationService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['NewCustomer'];\r\n        this.reset();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.checkAllInputs.validationStateChange.pipe(takeUntil(this.$destroy)).subscribe((state) => {\r\n            this.isValid = state;\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onValueChange(inputValue: IInputValue): void {\r\n        this.model[inputValue.name] = inputValue.value;\r\n    }\r\n\r\n    public async onCreateAccountClick(): Promise<void> {\r\n        await from([0]).pipe(delay(100), first()).toPromise();\r\n\r\n        if (this.isValid) {\r\n            this.errors = [];\r\n            this.model.isoCode = '+91';\r\n            try {\r\n                await this.tokenService.xsrf();\r\n                await this.customerService.createNewAccount(this.model);\r\n                await this.dataStoreService.push('verify-otp', {\r\n                    isoCode: this.model.isoCode,\r\n                    mobile: this.model.mobile,\r\n                    verificationType: VerificationType.NewAccountVerify,\r\n                });\r\n                this.navigationService.navigateForUrl(RouteKeys.VerifyOtp);\r\n            } catch (e) {\r\n                if (e.status === HttpStatusCode.BadRequest) {\r\n                    this.errors = e.error;\r\n                } else {\r\n                    this.navigationService.navigateForUrl(RouteKeys.ErrorFatal);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return this.errors.length > 0;\r\n    }\r\n\r\n    private reset(): void {\r\n        this.resetModel();\r\n    }\r\n\r\n    private resetModel(): void {\r\n        this.model = {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            isoCode: '+91',\r\n            mobile: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        };\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/assets/fonts/material-icons/material-icons.css';\r\n\r\n.signup-container {\r\n    position: relative;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    margin: 20px auto;\r\n    width: 100%;\r\n    max-width: 480px;\r\n\r\n    > * {\r\n        margin: 0;\r\n    }\r\n\r\n    .signup-form-container {\r\n        .header {\r\n            color: $highlight;\r\n            margin-bottom: 10px;\r\n            font-weight: 500;\r\n            font-size: 1.5em;\r\n        }\r\n\r\n        .error {\r\n            span:not(:first-child) {\r\n                color: $mobile-regular-color;\r\n                margin-top: 8px;\r\n                display: block;\r\n            }\r\n\r\n            span:first-child {\r\n                font-weight: 500;\r\n                font-size: 1.1em;\r\n            }\r\n        }\r\n\r\n        .row {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .mobile-number {\r\n            display: grid;\r\n            grid-template-columns: 80px auto;\r\n            margin-top: 13px;\r\n\r\n            ui-dropdown-component {\r\n                select {\r\n                    ::ng-deep & {\r\n                        padding-left: 1px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .information {\r\n            background-color: #fcfcfc;\r\n            border: 1px solid transparent;\r\n            padding: 6px 11px;\r\n            box-shadow: 2px 2px #f1f1f1;\r\n\r\n            span {\r\n                line-height: 17px;\r\n                font-size: 0.65em;\r\n                display: block;\r\n                font-weight: 500;\r\n                color: #555;\r\n            }\r\n        }\r\n\r\n        .btn {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .has-account,\r\n        .acceptance {\r\n            margin-top: 20px;\r\n            font-size: 0.8em;\r\n        }\r\n\r\n        .has-account {\r\n            border-top: 3px solid #f1f1f1;\r\n            padding-top: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./new-customer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customerService",
                        "type": "CustomerService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "customerService",
                        "type": "CustomerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 89
                    }
                }
            },
            "templateData": "<div class=\"signup-container\">\r\n    <div uiCheckAllInputsValid class=\"signup-form-container\">\r\n        <h4 class=\"header\">\r\n            {{ metadata && metadata.header && metadata.header.label }}\r\n        </h4>\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n        </div>\r\n        <div class=\"row\">\r\n            <ui-textbox-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.firstName\"\r\n                type=\"text\"\r\n                name=\"firstName\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.firstName\"\r\n            ></ui-textbox-component>\r\n        </div>\r\n        <div class=\"row\">\r\n            <ui-textbox-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.lastName\"\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.lastName\"\r\n            ></ui-textbox-component>\r\n        </div>\r\n        <div class=\"row\">\r\n            <ui-textbox-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.email\"\r\n                type=\"text\"\r\n                name=\"email\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.email\"\r\n            ></ui-textbox-component>\r\n        </div>\r\n        <div class=\"row mobile-number\">\r\n            <ui-dropdown-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.isoCode\"\r\n                type=\"dropdown\"\r\n                name=\"isoCode\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [style]=\"{\r\n                    'background-color': '#e1e1e1',\r\n                    'border-right': '1px solid transparent'\r\n                }\"\r\n                [metadata]=\"metadata && metadata.isoNumberOptions.options\"\r\n                [items]=\"isoNumbers\"\r\n            >\r\n            </ui-dropdown-component>\r\n            <ui-textbox-component\r\n                #mobileControl\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.mobile\"\r\n                type=\"text\"\r\n                name=\"mobile\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.mobile\"\r\n            >\r\n            </ui-textbox-component>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"information\">\r\n                <span *ngFor=\"let i of metadata && metadata.passwordInformation\">{{ i }}</span>\r\n            </div>\r\n            <ui-textbox-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.password\"\r\n            >\r\n            </ui-textbox-component>\r\n        </div>\r\n        <div class=\"row\">\r\n            <ui-confirm-textbox-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model && model.confirmPassword\"\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.confirmPassword\"\r\n            >\r\n            </ui-confirm-textbox-component>\r\n        </div>\r\n\r\n        <button class=\"btn btn-primary\" [disabled]=\"!isValid\" (click)=\"onCreateAccountClick()\">\r\n            {{ metadata && metadata.createYourAccount && metadata.createYourAccount.label }}\r\n        </button>\r\n\r\n        <ng-container *ngIf=\"metadata && metadata.acceptance && metadata.acceptance.statement\">\r\n            <div class=\"acceptance\">\r\n                <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.acceptance\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"metadata && metadata.alreadyHaveAccount && metadata.alreadyHaveAccount.statement\">\r\n            <div class=\"has-account\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"statementTemplate; context: metadata.alreadyHaveAccount\"\r\n                ></ng-container>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n"
        },
        {
            "name": "NonContentHeaderComponent",
            "id": "component-NonContentHeaderComponent-aad18f04853fe00ee0582736bae8fbc8",
            "file": "projects/header/src/lib/components/non-content-header/non-content-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-non-content-header",
            "styleUrls": [
                "./non-content-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./non-content-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onHomeClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, NavigationService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-non-content-header',\r\n    templateUrl: './non-content-header.component.html',\r\n    styleUrls: ['./non-content-header.component.scss'],\r\n})\r\nexport class NonContentHeaderComponent extends BaseComponent {\r\n    constructor(\r\n        private navigationService: NavigationService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n    \r\n    public async onHomeClick(): Promise<void> {\r\n        await this.navigationService.navigateHomeClick();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.header-container {\r\n    margin: 0;\r\n    padding: 15px 0 25px 0;\r\n    background-color: $primary-color;\r\n    text-align: center;\r\n\r\n    .company-logo-small {\r\n        position: relative;\r\n        padding-top: 0;\r\n\r\n        &:after {\r\n            content: \"bazaar\";\r\n            position: absolute;\r\n            left: 45px;\r\n            top: 26px;\r\n            color: #fff;\r\n            font-size: 1rem;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./non-content-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"header-container\">\r\n    <span class=\"company-logo-small\" (click)=\"onHomeClick()\"><a>Amreet</a></span>    \r\n</div>\r\n"
        },
        {
            "name": "NotSupportedOrientationComponent",
            "id": "component-NotSupportedOrientationComponent-6bdc23d15e186b2a62924aed27d2c8f6",
            "file": "projects/shell/src/lib/components/not-supported-orientation/not-supported-orientation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-not-supported-orientation-component",
            "styleUrls": [
                "./not-supported-orientation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-supported-orientation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector:'ui-not-supported-orientation-component',\r\n    templateUrl: './not-supported-orientation.component.html',\r\n    styleUrls: ['./not-supported-orientation.component.scss']\r\n})\r\nexport class NotSupportedOrientationComponent {\r\n    \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    background-color: $quaternary-color;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: relative;\r\n\r\n    img,\r\n    div {\r\n        left: 50%;\r\n        position: absolute;\r\n        top: calc(50% - 50px);\r\n    }\r\n\r\n    div {\r\n        font-weight: 500;\r\n        font-size: 1rem;\r\n        transform: translate(-50%, -50%);\r\n    }\r\n\r\n    img {\r\n        width: 80px;\r\n        transform: translate(-50%, -175%);\r\n    }\r\n}",
                    "styleUrl": "./not-supported-orientation.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\r\n    <div>\r\n        Landscape mode not supported, please rotate your device to portrait mode.\r\n    </div>\r\n    <img src=\"./assets/images/orientation.png\" />\r\n</div>"
        },
        {
            "name": "NumberComponent",
            "id": "component-NumberComponent-216da90fabb60ce657e63935a7f004f5",
            "file": "projects/common/src/lib/component/common/input/number/number.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-number-component",
            "styleUrls": [
                "./number.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./number.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "max",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "min",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onDecrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "onIncrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\n\r\n@Component({\r\n    selector: 'ui-number-component',\r\n    templateUrl: './number.component.html',\r\n    styleUrls: ['./number.component.scss'],\r\n})\r\nexport class NumberComponent extends BaseInputComponent {\r\n    min: number;\r\n    max: number;\r\n\r\n    @Input() style: string;\r\n\r\n    protected async init(): Promise<void> {\r\n        this.type = 'number';\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected onMetadata(): void {\r\n        this.max = Number(this.metadata.qty.max);\r\n        this.min = Number(this.metadata.qty.min);\r\n    }\r\n\r\n    onIncrement(): void {\r\n        if (this.data >= this.max) {\r\n            this.data = this.max;\r\n            return;\r\n        }\r\n        this.data++;\r\n\r\n        this.valueChange.emit({ name: this.name, value: this.data });\r\n    }\r\n\r\n    onDecrement(): void {\r\n        if (this.data <= this.min) {\r\n            this.data = this.min;\r\n            return;\r\n        }\r\n\r\n        this.data--;\r\n\r\n        this.valueChange.emit({ name: this.name, value: this.data });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../.././../../../ui/src/scss/variables';\r\n\r\n.control-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    .button-minus,\r\n    .button-add {\r\n        cursor: pointer;\r\n        background: #f3f3f3;\r\n\r\n        i {\r\n            font-size: 28px;\r\n            padding: 4px 0;\r\n            border: 1px solid $secondary-color;\r\n        }\r\n    }\r\n\r\n    .button-minus {\r\n        margin-right: -2px;\r\n\r\n        i {\r\n            border-right: 1px solid transparent;\r\n        }\r\n    }\r\n    .button-add {\r\n        margin-left: -2px;\r\n    }\r\n\r\n    .control {\r\n        border: 1px solid transparent;\r\n        border-top: 1px solid $secondary-color;\r\n        border-bottom: 1px solid $secondary-color;\r\n\r\n        input {\r\n            padding-left: 42px;\r\n            text-align: center;\r\n            height: 36px;\r\n        }\r\n    }\r\n\r\n    .inner-text {\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        background: $secondary-color;\r\n        color: white;\r\n        height: 36px;\r\n        padding: 8px 8px;\r\n        padding-top: 11px;\r\n        font-size: 0.8em;\r\n        border-right: 1px solid lightgrey;\r\n        border-top: 1px solid $secondary-color;\r\n        border-bottom: 1px solid $secondary-color;\r\n    }\r\n}\r\n",
                    "styleUrl": "./number.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "templateData": "<div class=\"control-row\" *ngIf=\"show\">\r\n    <div\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.decrement && metadata.decrement.action\"\r\n        class=\"button-minus\"\r\n        (execute)=\"onDecrement()\"\r\n    >\r\n        <i class=\"material-icons\">remove</i>\r\n    </div>\r\n    <div class=\"control\" [attr.information]=\"metadata && metadata.information && metadata.information.length > 0\">\r\n        <input\r\n            uiCheckIsValid\r\n            [type]=\"type\"\r\n            readonly\r\n            #inputControl\r\n            [id]=\"id\"\r\n            #model=\"ngModel\"\r\n            [(ngModel)]=\"data\"\r\n            [ngClass]=\"'has-value'\"\r\n            autocomplete=\"nope\"\r\n            [min]=\"min\"\r\n            [max]=\"max\"\r\n        />\r\n        <label [ngClass]=\"ignoreMediaQueries ? 'ignore' : ''\"\r\n            >{{ metadata && metadata.label }}\r\n            <span *ngIf=\"metadata && metadata.validators && metadata.validators.required === ''\">*</span>\r\n        </label>\r\n        <div class=\"\"></div>\r\n        <span class=\"optional-text\">{{ metadata && metadata.optionalText }}</span>\r\n        <a class=\"information-icon\" (click)=\"onShowInfoIconClick()\" (outsideClick)=\"showInfo = false\"></a>\r\n\r\n        <div class=\"information\" [hidden]=\"!showInfo\">\r\n            <div *ngFor=\"let text of metadata && metadata.information\">\r\n                {{ text }}\r\n            </div>\r\n        </div>\r\n        <div class=\"background\"></div>\r\n        <div class=\"inner-text\">{{ metadata && metadata.qty && metadata.qty.label }}</div>\r\n    </div>\r\n    <div\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.increment && metadata.increment.action\"\r\n        class=\"button-add\"\r\n        (execute)=\"onIncrement()\"\r\n    >\r\n        <i class=\"material-icons\">add</i>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "OptionComponent",
            "id": "component-OptionComponent-a81826b2cc2ef43492529696bf084848",
            "file": "projects/common/src/lib/component/common/input/auto-complete/child-components/option/option.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-autocomplete-option",
            "styleUrls": [
                "./option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "click$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, Input } from \"@angular/core\";\r\nimport { fromEvent, Observable } from 'rxjs';\r\n\r\nimport { BaseComponent } from '@common/src/lib/component/base.component';\r\nimport { mapTo } from 'rxjs/operators';\r\nimport { Router } from \"@angular/router\";\r\nimport { WINDOW } from \"@common/src/lib/services/window.service\";\r\n\r\n@Component({\r\n    selector: 'ui-autocomplete-option',\r\n    templateUrl: './option.component.html',\r\n    styleUrls: ['./option.component.scss']\r\n})\r\nexport class OptionComponent extends BaseComponent {\r\n    @Input() value: string;\r\n    click$: Observable<string>;\r\n\r\n    constructor (\r\n        private host: ElementRef,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.click$ = fromEvent(this.element, 'click')\r\n            .pipe(\r\n                mapTo(this.value)\r\n            );\r\n    }\r\n\r\n    get element(): any {\r\n        return this.host.nativeElement;\r\n    } \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "host",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "element": {
                    "name": "element",
                    "getSignature": {
                        "name": "element",
                        "type": "any",
                        "returnType": "any",
                        "line": 33
                    }
                }
            },
            "templateData": "<div class=\"option\">\r\n    <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "OrderComponent",
            "id": "component-OrderComponent-06b3c3cc201b554f0326f29ca61a4b8e",
            "file": "projects/customer/src/lib/components/account/orders/order/order.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-component",
            "styleUrls": [
                "./order.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerMetadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "order",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "slot",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        120
                    ],
                    "inheritance": {
                        "file": "BaseAccountComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { first, takeUntil } from \"rxjs/operators\";\r\n\r\nimport { DataStoreService, HistoryService, MenuStateService, WINDOW } from \"@common/src/public-api\";\r\nimport { BaseAccountComponent } from \"../../base-account.component\";\r\n\r\n@Component({\r\n    selector: 'ui-order-component',\r\n    templateUrl: './order.component.html',\r\n    styleUrls: ['./order.component.scss']\r\n})\r\nexport class OrderComponent extends BaseAccountComponent {\r\n    metadata: any;\r\n    order: any;\r\n    headerMetadata: any;\r\n    slot: any;\r\n\r\n    constructor(        \r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        historyService: HistoryService,\r\n        private activatedRoute: ActivatedRoute\r\n    ) {\r\n        super(historyService, router, window, menuStateService, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.activatedRoute.data.pipe(\r\n            first(),\r\n            takeUntil(this.$destroy),\r\n        )\r\n        .subscribe((data) => {\r\n            this.metadata = data.metadata['AccountOrderDetail'];\r\n            this.headerMetadata = this.metadata.header;\r\n            this.order = data.orderResult.order;\r\n            this.slot = data.orderResult.slot;\r\n        });\r\n        super.init();\r\n\r\n        await Promise.resolve();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n\r\n    .mobile-container {\r\n        --order-info-grid-template-columns: 1fr;\r\n    }\r\n\r\n    .desktop-container {\r\n        --order-info-grid-template-columns: 1fr 2fr 1fr;\r\n    }\r\n\r\n    .header {\r\n        color: #333;\r\n        font-weight: 600;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .order-info {\r\n        margin-top: 20px;\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: var(--order-info-grid-template-columns);\r\n        column-gap: 10px;\r\n        justify-content: stretch;\r\n        row-gap: 10px;\r\n     \r\n        .order-invoice {\r\n            justify-self: right;\r\n\r\n            ui-order-invoice-component {\r\n                a {\r\n                    ::ng-deep & {\r\n                        font-size: 1rem;\r\n                        font-weight: 500;\r\n                        padding: 5px 20px 5px 5px;\r\n                    }  \r\n                    \r\n                    &:after {\r\n                        ::ng-deep & {\r\n                            right: 5px;\r\n                            bottom: 8px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .order-date,\r\n        .order-number {\r\n            font-size: 0.9rem;\r\n            color: #555;\r\n\r\n            span {\r\n                font-weight: 500;\r\n\r\n                &:not(:first-child) {\r\n                    margin-left: 10px;\r\n                    font-weight: normal;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./order.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseAccountComponent",
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n    <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <div class=\"header\">{{metadata && metadata.orderDetail && metadata.orderDetail.label}}</div>\r\n    <div class=\"order-info\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile}\">\r\n        <div class=\"order-date\">\r\n            <span>{{headerMetadata && headerMetadata.orderDate && headerMetadata.orderDate.label}}:</span>\r\n            <span>{{order && order.dateCreated | date: 'd MMM YYYY'}}</span>\r\n        </div>\r\n        <div class=\"order-number\">\r\n            <span>{{headerMetadata && headerMetadata.orderNumber && headerMetadata.orderNumber.label}}:</span>\r\n            <span>{{order && order.orderNumber}}</span>\r\n        </div>\r\n        <div class=\"order-invoice\">\r\n            <ui-order-invoice-component [metadata]=\"headerMetadata\" [orderID]=\"order._id\"></ui-order-invoice-component>\r\n        </div>\r\n    </div>\r\n    <ui-order-wrapper-component [template]=\"'DETAIL'\" [metadata]=\"metadata\" [order]=\"order\" [slot]=\"slot\"></ui-order-wrapper-component>\r\n</div>"
        },
        {
            "name": "OrderDetailComponent",
            "id": "component-OrderDetailComponent-8232be92751b9c4c77ac48fdd1c4345e",
            "file": "projects/customer/src/lib/components/account/orders/child-components/order-detail/order-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-detail-component",
            "styleUrls": [
                "./order-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 22,
                    "type": "any"
                },
                {
                    "name": "order",
                    "line": 21,
                    "type": "Order"
                },
                {
                    "name": "slot",
                    "line": 24,
                    "type": "any"
                },
                {
                    "name": "template",
                    "defaultValue": "'LIST'",
                    "line": 23,
                    "type": "\"LIST\" | \"DETAIL\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_configuration",
                    "type": "IConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_trackableOrderStates",
                    "defaultValue": "[\r\n        'PaymentInProgress',\r\n        'Failed',\r\n        'Open',\r\n        'Picking',\r\n        'Dispatch'\r\n    ]",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentState",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "deliveredItems",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "returnedItems",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "returnedState",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "imageUrl",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onGetProductSupport",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReturnItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onTrackOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onWriteProductReview",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "wrapItem",
                    "args": [
                        {
                            "name": "i",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { NotificationMessageKeys } from \"@common/src/lib/constants/notification.message.keys\";\r\nimport { BaseComponent, ConfigService, IConfiguration, NavigationService, NotificationService, Order, OrderService, OrderStatus, Product, RouteKeys, WINDOW } from \"@common/src/public-api\";\r\n\r\n@Component({\r\n    selector: 'ui-order-detail-component',\r\n    templateUrl: './order-detail.component.html',\r\n    styleUrls: ['./order-detail.component.scss']\r\n})\r\nexport class OrderDetailComponent extends BaseComponent {\r\n    private _configuration: IConfiguration;\r\n    private _trackableOrderStates: Array<string> = [\r\n        'PaymentInProgress',\r\n        'Failed',\r\n        'Open',\r\n        'Picking',\r\n        'Dispatch'\r\n    ];  \r\n\r\n    @Input() order: Order;\r\n    @Input() metadata: any;\r\n    @Input() template: 'LIST' | 'DETAIL' = 'LIST';\r\n    @Input() slot: any;\r\n\r\n    currentState: { status: OrderStatus, statusDate: Date };\r\n    returnedState: { status: OrderStatus, statusDate: Date };\r\n    deliveredItems: Array<Product>;\r\n    returnedItems: Array<Product>;\r\n    \r\n    constructor (\r\n        router: Router,\r\n        @Inject(WINDOW) window: any,\r\n        configService: ConfigService,\r\n        private orderService: OrderService,\r\n        private navigationService: NavigationService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        super(router, window);\r\n        \r\n        this._configuration = configService.getConfiguration();      \r\n    }\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.currentState = this.order.statusHistory.find(s => s.status === (this.order.status === OrderStatus.SemiReturned ? OrderStatus.Delivered : this.order.status));\r\n        this.returnedState = this.order.statusHistory.find(s => s.status === OrderStatus.SemiReturned);\r\n        this.deliveredItems = this.order.items.filter(i =>(!(!!i.returned)));\r\n        this.returnedItems = this.returnedState ? this.order.items.filter(i =>(!!i.returned)) : null;\r\n    }\r\n\r\n    public wrapItem(i: any): any {\r\n        return { item: i };\r\n    }\r\n\r\n    public async cancelClicked(): Promise<void> {\r\n        try \r\n        {\r\n            const result = await this.orderService.cancelOrder(this.order._id).toPromise();           \r\n            this.order.status = result.status;\r\n            this.order.modifiedDate = result.modifiedDate;\r\n        }\r\n        catch(ex) \r\n        {\r\n            this.notificationService.showMessage(NotificationMessageKeys.OrderCancellationError);\r\n        }\r\n    }\r\n\r\n    public get isProductSupportEnabled(): boolean {\r\n        return this._configuration.productSupport;\r\n    }\r\n\r\n    public get isReturnItemsEnabled(): boolean {\r\n        return this._configuration.returnItems;\r\n    }\r\n\r\n    public get isReviewProductEnabled(): boolean {\r\n        return this._configuration.showReview;\r\n    }\r\n\r\n    public get isTrackable(): boolean {\r\n        return this._trackableOrderStates.includes(this.order.status);\r\n    }\r\n\r\n    public get showRedirectToPayment(): boolean {       \r\n       return this.order.status === OrderStatus.Failed;    \r\n    }\r\n\r\n    public get hideButtons(): boolean {\r\n        return this.order.status === OrderStatus.Cancelled;\r\n    }\r\n\r\n    public async onItemClick(item: any): Promise<void> {        \r\n    }\r\n\r\n    public async onWriteProductReview(): Promise<void> {\r\n        let url = '';\r\n        let currentUrl = this.template === 'LIST' ? RouteKeys.AccountOrders : `/account/order/${this.order._id}`;\r\n\r\n        if (Array.isArray(this.order.items) && this.order.items.length === 1) {\r\n            url = `/review/product/${this.order.items[0]._id}/order/${this.order._id}`;\r\n        } else {\r\n            url = `/reviews/order/${this.order._id}`;\r\n        }\r\n        await this.navigationService.navigateForUrl(url, currentUrl, this.isMobile);\r\n    }\r\n\r\n    public async onGetProductSupport(): Promise<void> {        \r\n    }\r\n\r\n    public async onReturnItems(): Promise<void> {        \r\n    }\r\n\r\n    public async onTrackOrder(): Promise<void> {        \r\n    }\r\n\r\n    public imageUrl(item: any): string {\r\n        if (item && Array.isArray(item.images)){\r\n            const image = item.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    } \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    border: $border;\r\n    border-color: transparent;\r\n    padding: 20px;\r\n    padding-top: 7px;\r\n\r\n    .mobile-container {\r\n        --wrapper-grid-template-columns: 1fr;\r\n        --buttons-margin-top: 20px;\r\n    }\r\n\r\n    .desktop-container {\r\n        --wrapper-grid-template-columns: 3fr 1fr;\r\n        --buttons-margin-top: 0;\r\n    }\r\n\r\n    ui-order-status {\r\n        display: block;\r\n    }\r\n\r\n    .wrapper {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: var(--wrapper-grid-template-columns);\r\n        grid-column-gap: 20px;\r\n        \r\n        .items-wrapper {\r\n            margin-top: 10px;\r\n\r\n            .item-wrapper {\r\n                display: grid;\r\n                grid-auto-flow: column;\r\n                grid-column-gap: 10px;\r\n                grid-template-columns: 30% auto;\r\n                \r\n                &:not(:first-child) {\r\n                    margin-top: 20px;\r\n                }\r\n\r\n                .detail {\r\n                    display: grid;\r\n                    grid-auto-flow: row;\r\n                    grid-row-gap: 5px;\r\n                    align-content: flex-start;\r\n\r\n                    .currency {\r\n                        color: #aa1b04;\r\n                    }\r\n\r\n                    .description {\r\n                        font-weight: 500;\r\n                    }\r\n                }\r\n\r\n                figure {\r\n                    @include small-product-image(60px, 60px);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .buttons {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-row-gap: 5px;\r\n        align-content: flex-start;\r\n        margin-top: var(--buttons-margin-top);\r\n\r\n        .btn {\r\n            font-weight: 500;\r\n            font-size: 0.85rem;\r\n            box-shadow: 0 2px 8px #c0c0c0;\r\n            max-height: 2.2rem;\r\n\r\n            &-primary {\r\n                box-shadow: 0 2px 8px #f5ab95;\r\n\r\n                &:hover {\r\n                    opacity: 0.9;\r\n                }\r\n            }\r\n        }\r\n    }    \r\n}\r\n.mt-40 {\r\n    margin-top: 40px;\r\n}",
                    "styleUrl": "./order-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "orderService",
                        "type": "OrderService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orderService",
                        "type": "OrderService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "isProductSupportEnabled": {
                    "name": "isProductSupportEnabled",
                    "getSignature": {
                        "name": "isProductSupportEnabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 68
                    }
                },
                "isReturnItemsEnabled": {
                    "name": "isReturnItemsEnabled",
                    "getSignature": {
                        "name": "isReturnItemsEnabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 72
                    }
                },
                "isReviewProductEnabled": {
                    "name": "isReviewProductEnabled",
                    "getSignature": {
                        "name": "isReviewProductEnabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 76
                    }
                },
                "isTrackable": {
                    "name": "isTrackable",
                    "getSignature": {
                        "name": "isTrackable",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 80
                    }
                },
                "showRedirectToPayment": {
                    "name": "showRedirectToPayment",
                    "getSignature": {
                        "name": "showRedirectToPayment",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 84
                    }
                },
                "hideButtons": {
                    "name": "hideButtons",
                    "getSignature": {
                        "name": "hideButtons",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <ng-container *ngIf=\"deliveredItems && deliveredItems.length > 0\">\r\n        <ng-container>\r\n            <ui-order-status [metadata]=\"metadata\" [status]=\"currentState.status\" [modifiedDate]=\"currentState.statusDate\" [slot]=\"slot\"></ui-order-status>\r\n        </ng-container>        \r\n        <div class=\"wrapper\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile }\">\r\n            <div class=\"items-wrapper\">               \r\n                <ng-container *ngFor=\"let i of deliveredItems\">\r\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: wrapItem(i)\"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"returnedItems && returnedItems.length > 0\">\r\n                    <ui-order-status class=\"mt-40\" [metadata]=\"metadata\" [status]=\"returnedState.status\" [modifiedDate]=\"returnedState.statusDate\" [slot]=\"slot\"></ui-order-status>\r\n                </ng-container>\r\n                <ng-container *ngFor=\"let i of returnedItems\">\r\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: wrapItem(i)\"></ng-container>\r\n                </ng-container>         \r\n            </div>\r\n            <div class=\"buttons\">\r\n                <ng-container *ngTemplateOutlet=\"buttonsTemplate\" ></ng-container>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #itemTemplate let-item=\"item\">    \r\n    <div class=\"item-wrapper\">\r\n        <figure (click)=\"onItemClick(item)\">\r\n            <img [src]=\"imageUrl(item)\" />\r\n        </figure>\r\n        <div class=\"detail\">\r\n            <div class=\"description\">{{item.description}}</div>\r\n            <div *ngIf=\"item.returnableDate\" class=\"returnable\">\r\n                {{metadata && metadata.eligibleForReurn && metadata.eligibleForReurn.label}} {{item.returnableDate | date: 'd MMM YYYY'}}\r\n            </div>\r\n            <div class=\"currency\">{{item.pricing.retail | currency: 'INR' }}</div>\r\n        </div>        \r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #buttonsTemplate>\r\n    <ng-container *ngIf=\"!hideButtons\">\r\n        <ng-container *ngIf= \"!showRedirectToPayment\">\r\n            <button *ngIf=\"isReviewProductEnabled\" class=\"btn btn-primary\" (click)=\"onWriteProductReview()\">\r\n                {{metadata && metadata.productReview && metadata.productReview.label}}\r\n            </button>\r\n            <button *ngIf=\"isProductSupportEnabled\" class=\"btn btn-light btn-light-bordered\" (click)=\"onGetProductSupport()\">\r\n                {{metadata && metadata.productSupport && metadata.productSupport.label}}\r\n            </button>    \r\n            <button *ngIf=\"isReturnItemsEnabled\" class=\"btn btn-light btn-light-bordered\" (click)=\"onReturnItems()\">\r\n                {{metadata && metadata.returnItems && metadata.returnItems.label}}\r\n            </button>\r\n                \r\n            <button *ngIf=\"isTrackable\" class=\"btn btn-light btn-light-bordered\" (click)=\"onTrackOrder()\">\r\n                {{metadata && metadata.trackOrder && metadata.trackOrder.label}}\r\n            </button>\r\n        </ng-container>\r\n        <ng-container *ngIf= \"showRedirectToPayment\">\r\n            <button  class=\"btn btn-primary\">\r\n                {{metadata && metadata.redirectToPayment && metadata.redirectToPayment.label}}\r\n            </button>\r\n            <button class=\"btn btn-light btn-light-bordered\" (click)=\"cancelClicked()\">\r\n                {{metadata && metadata.cancelOrder && metadata.cancelOrder.label}}\r\n            </button>  \r\n        </ng-container>\r\n    </ng-container>\r\n</ng-template>\r\n"
        },
        {
            "name": "OrderHeaderComponent",
            "id": "component-OrderHeaderComponent-3a83362258cac2af9919bf399eaec1c5",
            "file": "projects/customer/src/lib/components/account/orders/child-components/order-header/order-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-header-component",
            "styleUrls": [
                "./order-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 22,
                    "type": "any"
                },
                {
                    "name": "order",
                    "line": 20,
                    "type": "any"
                },
                {
                    "name": "slot",
                    "line": 21,
                    "type": "any"
                },
                {
                    "name": "template",
                    "defaultValue": "'LIST'",
                    "line": 23,
                    "type": "\"LIST\" | \"DETAIL\""
                }
            ],
            "outputsClass": [
                {
                    "name": "showDetail",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 25,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deliveryAddress",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "showDeliveryAddress",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showInvoiceOptions",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "onDeliveryClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onDetailsClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onShowDetailClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 90,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport {\r\n    AddressService,\r\n    AuthService,\r\n    BaseComponent,\r\n    DataStoreService,\r\n    MenuStateService,\r\n    NavigationService,\r\n    RouteKeys,\r\n    WINDOW\r\n} from \"@common/src/public-api\";\r\n\r\n@Component({\r\n    selector: 'ui-order-header-component',\r\n    templateUrl: './order-header.component.html',\r\n    styleUrls: ['./order-header.component.scss']\r\n})\r\nexport class OrderHeaderComponent extends BaseComponent {\r\n    @Input() order: any;\r\n    @Input() slot: any;\r\n    @Input() metadata: any;\r\n    @Input() template: 'LIST' | 'DETAIL' = 'LIST';\r\n    \r\n    @Output() showDetail: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    deliveryAddress: any;\r\n    showDeliveryAddress: boolean = false;\r\n    showInvoiceOptions: boolean = false;\r\n    show: boolean = false;\r\n\r\n    constructor (\r\n        router: Router,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        @Inject(WINDOW) window: any,\r\n        private authService: AuthService,\r\n        private addressService: AddressService,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n    }\r\n\r\n    public get showDocuments(): boolean {\r\n        return this.order.invoice;\r\n    }\r\n\r\n    public get showCreditNote(): boolean {\r\n        return this.order.creditNote;\r\n    }\r\n\r\n    public get fullName(): string {\r\n        return `${this.authService.user.firstName} ${this.authService.user.lastName}`;\r\n    }\r\n\r\n    public get paymentMode(): string {\r\n        return this.order && this.order.payment.mode;\r\n    }\r\n\r\n    public get bankCode(): string {\r\n        return this.order && this.order.payment.bankCode.toLowerCase();\r\n    }\r\n\r\n    public get paymentInfo(): string {\r\n        if (this.order) {\r\n            const payment = this.order.payment;\r\n\r\n            switch (payment.mode) {\r\n                case 'CC':\r\n                    return `**** ${payment.cardNum.slice(payment.cardNum.length - 4)}`;\r\n                default:\r\n                    return '';\r\n            }\r\n        }\r\n        \r\n        return '';\r\n    }\r\n\r\n    public async onDeliveryClick(): Promise<void> {\r\n        this.showDeliveryAddress = !this.showDeliveryAddress;\r\n\r\n        if (this.showDeliveryAddress && !this.deliveryAddress) {\r\n            try {\r\n                this.deliveryAddress = await this.addressService.getById(this.order.addressID);\r\n            } catch (e) {\r\n            }\r\n        }        \r\n    }\r\n\r\n    public async onShowDetailClick(): Promise<void> {\r\n        this.show = !this.show;\r\n        this.showInvoiceOptions = false;\r\n        this.showDetail.emit(this.show);\r\n    }\r\n\r\n    public async onDetailsClick(): Promise<void> {\r\n        await this.navigationService.navigateForUrl(`${RouteKeys.AccountOrderDetail}${this.order._id}`, this.currentPage, this.isMobile);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {    \r\n    width: 100%;\r\n\r\n    .mobile-container {\r\n        --header-item-group-grid-auto-flow: column;\r\n        --header-item-group-column-gap: 20px;\r\n        --header-item-group-row-gap: 0;\r\n        --header-list-container-grid-template-columns: 1fr;\r\n        --header-list-container-grid-auto-flow: row;\r\n        --header-list-container-justify-items: start;\r\n        --show-hide-detail-position: absolute;\r\n        --show-hide-detail-right: 0;\r\n        --header-detail-container-grid-auto-flow: row;\r\n        --header-detail-container-grid-template-columns: 1fr;\r\n        --header-item-margin-top: 10px;\r\n    }\r\n\r\n    .desktop-container {\r\n        --header-item-group-grid-auto-flow: row;\r\n        --header-item-group-column-gap: 0;\r\n        --header-item-group-row-gap: 10px;\r\n        --header-list-container-grid-template-columns: 1fr 1fr 1fr 3fr 20px;\r\n        --header-list-container-grid-auto-flow: row;\r\n        --header-list-container-justify-items: center;\r\n        --show-hide-detail-position: relative;\r\n        --show-hide-detail-right: unset;\r\n        --header-detail-container-grid-auto-flow: column;\r\n        --header-detail-container-grid-template-columns: 1.5fr 1.5fr 2fr;\r\n        --header-item-margin-top: 10px;\r\n    }\r\n\r\n    .header-detail-container,\r\n    .header-list-container {\r\n        display: grid;\r\n        width: 100%;\r\n        padding: 11px ;\r\n        column-gap: 5px;\r\n        row-gap: 5px;\r\n        border: $border;\r\n        border-color: transparent;\r\n        border-radius: $border-radius;\r\n        justify-items: var(--header-list-container-justify-items);\r\n        background-color: #f1f1f1;\r\n        position: relative;\r\n    }\r\n\r\n    .header-detail-container {\r\n        grid-template-columns: var(--header-detail-container-grid-template-columns);\r\n        grid-auto-flow: var(--header-detail-container-grid-auto-flow);\r\n    }\r\n\r\n    .section-container {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: 1fr;\r\n        margin: 0 0 10px 0;\r\n        box-shadow: 4px 4px 6px #f1f1f1;\r\n        padding: 10px;\r\n        width: 100%;\r\n        border: 1px solid transparent;\r\n        border-radius: $border-radius;\r\n    }\r\n\r\n    .header-item {\r\n        font-size: 0.9rem;\r\n        color: #555;\r\n        width: 100%;\r\n        position: relative;\r\n        \r\n        > span:not(:first-child) {\r\n            font-weight: normal;\r\n            font-size: 0.8rem;\r\n            white-space: nowrap;\r\n            margin-left: 10px;\r\n            padding-top: 2px;\r\n        }\r\n\r\n        \r\n\r\n        &.summary,\r\n        &.shipping,\r\n        &.payment-method {\r\n            margin-top: var(--header-item-margin-top);\r\n            padding-top: 10px;\r\n        }\r\n\r\n        &.shipping {\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n            > div {\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n\r\n        &.payment-method {\r\n            img {\r\n                height: 16px;\r\n                border: $border;\r\n                vertical-align: top;\r\n            }\r\n        }\r\n\r\n        &.summary {\r\n            justify-content: flex-end;\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: 1fr;\r\n            align-content: start;\r\n            row-gap: 5px;\r\n\r\n            .summary-item {\r\n                display: grid;\r\n                grid-auto-flow: column;\r\n                justify-content: stretch;\r\n                font-weight: normal;\r\n\r\n                span:first-child {\r\n                    text-align: left;\r\n                }\r\n\r\n                span:last-child {\r\n                    text-align: right;\r\n                }\r\n\r\n                &:last-child {\r\n                    font-weight: 500;\r\n                    margin-top: 10px;\r\n                }\r\n            }\r\n        }\r\n\r\n        a {\r\n            position: relative;\r\n            color: #0000ff;\r\n            cursor: pointer;\r\n            font-size: 0.85rem;\r\n\r\n            &.down-arrow:after {\r\n                @include down-arrow(-15px, 1px);\r\n            }\r\n\r\n            + span {\r\n                margin: 0 10px;\r\n                border-right: 1px inset #c0c0c0;\r\n                margin-top: 3px;\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        .delivery {\r\n            position: absolute;\r\n            width: 200px;;\r\n            border: $border;\r\n            padding: 11px;\r\n            left: 0;\r\n            top: 22px;\r\n            background-color: white;\r\n            z-index: 1;\r\n            box-shadow: 0 4px 16px #c0c0c0;\r\n\r\n            &:after {\r\n                @include up-indicator(78px, #fff);\r\n            }\r\n        }\r\n    }\r\n\r\n    .header-list-container {\r\n        grid-auto-flow: var(--header-list-container-grid-auto-flow);\r\n        grid-template-columns: var(--header-list-container-grid-template-columns);\r\n\r\n        .header-item-group {\r\n            display: grid;\r\n            grid-auto-flow: var(--header-item-group-grid-auto-flow);\r\n            row-gap: var(--header-item-group-row-gap);\r\n            column-gap: var(--header-item-group-column-gap);\r\n\r\n            &.order-number {\r\n                grid-auto-flow: row;\r\n\r\n                div:not(:first-child) {\r\n                    padding-top: 5px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .show-hide-detail {\r\n        position: var(--show-hide-detail-position);\r\n        right: var(--show-hide-detail-right);\r\n        \r\n        i {\r\n            transform: rotate(-90deg);\r\n            transition: 1s;\r\n            margin-left: 15px;\r\n            cursor: pointer;\r\n\r\n            &.show {\r\n                transform: rotate(90deg);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.flex-start {\r\n    justify-content: flex-start;\r\n}\r\n\r\n.flex-end {\r\n    justify-content: flex-end;\r\n}\r\n\r\n.flex-center {\r\n    justify-content: center;\r\n}\r\n\r\n.bold {\r\n    font-weight: 500;\r\n}",
                    "styleUrl": "./order-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressService",
                        "type": "AddressService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "showDocuments": {
                    "name": "showDocuments",
                    "getSignature": {
                        "name": "showDocuments",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 44
                    }
                },
                "showCreditNote": {
                    "name": "showCreditNote",
                    "getSignature": {
                        "name": "showCreditNote",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 48
                    }
                },
                "fullName": {
                    "name": "fullName",
                    "getSignature": {
                        "name": "fullName",
                        "type": "string",
                        "returnType": "string",
                        "line": 52
                    }
                },
                "paymentMode": {
                    "name": "paymentMode",
                    "getSignature": {
                        "name": "paymentMode",
                        "type": "string",
                        "returnType": "string",
                        "line": 56
                    }
                },
                "bankCode": {
                    "name": "bankCode",
                    "getSignature": {
                        "name": "bankCode",
                        "type": "string",
                        "returnType": "string",
                        "line": 60
                    }
                },
                "paymentInfo": {
                    "name": "paymentInfo",
                    "getSignature": {
                        "name": "paymentInfo",
                        "type": "string",
                        "returnType": "string",
                        "line": 64
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <ng-container *ngIf=\"template === 'LIST'\">\r\n        <ng-container *ngTemplateOutlet=\"listTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"template === 'DETAIL'\">\r\n        <ng-container *ngTemplateOutlet=\"detailTemplate\"></ng-container>\r\n    </ng-container>\r\n</div>\r\n\r\n<ng-template #listTemplate>\r\n    <div class=\"header-list-container\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile }\">\r\n        <div class=\"header-item-group\">\r\n            <div class=\"header-item bold flex-start\">{{metadata && metadata.orderDate && metadata.orderDate.label}}</div>\r\n            <div class=\"header-item flex-start\">{{order.dateCreated | date: 'd MMM YYYY'}}</div>\r\n        </div>\r\n        <div class=\"header-item-group\">\r\n            <div class=\"header-item bold flex-center\">{{metadata && metadata.amount && metadata.amount.label}}</div>\r\n            <div class=\"header-item flex-center\">{{order.amount | currency : 'INR'}}</div>\r\n        </div>\r\n        <div class=\"header-item-group\">\r\n            <div class=\"header-item bold flex-center\">{{metadata && metadata.delivery && metadata.delivery.label}}</div>\r\n            <div class=\"header-item flex-center\">\r\n                <a \r\n                    class=\"down-arrow\"\r\n                    (mouseenter)=\"onDeliveryClick()\"\r\n                    (mouseleave)=\"onDeliveryClick()\"\r\n                >{{fullName}}</a>\r\n                <div [hidden]=\"!showDeliveryAddress\" class=\"delivery\">\r\n                    <span *ngIf=\"!deliveryAddress\" class=\"loader\">loading</span>\r\n                    <ui-address-preview-component *ngIf=\"deliveryAddress\" [deliveryAddress]=\"deliveryAddress\"></ui-address-preview-component>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"header-item-group order-number\">\r\n            <div class=\"header-item flex-end\">\r\n                <span class=\"bold\">{{metadata && metadata.orderNumber && metadata.orderNumber.label}}</span>\r\n                <span>{{order.orderNumber}}</span>\r\n            </div>\r\n            <div class=\"header-item flex-end p-r-15\">\r\n                <a (click)=\"onDetailsClick()\">{{metadata && metadata.orderDetails && metadata.orderDetails.label}}</a>\r\n                <span></span>\r\n                <ng-container *ngIf=\"showDocuments\">\r\n                    <ui-order-invoice-component [metadata]=\"metadata\" [show]=\"showInvoiceOptions\" [showCreditNote]=\"showCreditNote\" [orderID]=\"order._id\"></ui-order-invoice-component>\r\n                </ng-container>               \r\n            </div>\r\n        </div>\r\n        <div class=\"show-hide-detail\">\r\n            <i class=\"material-icons\" [ngClass]=\"{ 'show': show === true }\" (click)=\"onShowDetailClick()\">chevron_left</i>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #paymentMethodTemplate>\r\n    <ng-container *ngIf=\"paymentMode === 'CC'\">\r\n        <span><img [src]=\"'assets/images/payment/' +  bankCode + '.svg'\"/> {{paymentInfo}}</span>\r\n    </ng-container>    \r\n</ng-template>\r\n\r\n<ng-template #detailTemplate>\r\n    <div class=\"header-detail-container\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile }\">\r\n        <div [ngClass]=\"{'section-container': isMobile }\">\r\n            <div class=\"header-item bold flex-start\">{{metadata && metadata.shipping && metadata.shipping.label}}</div>\r\n            <div class=\"header-item flex-start shipping\">\r\n                <div>{{order && order.fullName}}</div>\r\n                <ui-address-preview-component *ngIf=\"order && order.address\" [compact]=\"true\" [deliveryAddress]=\"order.address\"></ui-address-preview-component>\r\n            </div>\r\n        </div>\r\n        <div [ngClass]=\"{'section-container': isMobile }\">\r\n            <div class=\"header-item bold flex-start\">{{metadata && metadata.paymentMethod && metadata.paymentMethod.label}}</div>\r\n            <div class=\"header-item bold flex-start payment-method\">\r\n                <ng-container *ngTemplateOutlet=\"paymentMethodTemplate\"></ng-container>\r\n            </div>\r\n        </div>\r\n        <div [ngClass]=\"{'section-container': isMobile }\">\r\n            <div class=\"header-item bold flex-start\">{{metadata && metadata.summary && metadata.summary.label}}</div>\r\n            <div class=\"header-item bold flex-end summary\">\r\n                <div class=\"summary-item\">\r\n                    <span>{{metadata && metadata.subTotal && metadata.subTotal.label}}</span>\r\n                    <span>{{order && order.amount | currency : 'INR'}}</span>\r\n                </div>\r\n                <div class=\"summary-item\">\r\n                    <span>{{metadata && metadata.shipping && metadata.shipping.label}}</span>\r\n                    <span>{{order && order.shipping || 0 | currency : 'INR'}}</span>\r\n                </div>\r\n                <div *ngIf=\"order && order.loyaltyPoints\" class=\"summary-item\">\r\n                    <span>{{metadata && metadata.loyaltyPoints && metadata.loyaltyPoints.label}}</span>\r\n                    <span>{{order.loyaltyPoints | currency : 'INR'}}</span>\r\n                </div>\r\n                <div *ngIf=\"order && order.promotions\" class=\"summary-item\">\r\n                    <span>{{metadata && metadata.promotions && metadata.promotions.label}}</span>\r\n                    <span>{{order.promotions | currency : 'INR'}}</span>\r\n                </div>\r\n                <div class=\"summary-item\">\r\n                    <span>{{metadata && metadata.total && metadata.total.label}}</span>\r\n                    <span>{{order && order.amount | currency : 'INR'}}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "OrderListComponent",
            "id": "component-OrderListComponent-ea860a0eb37c065751378a7b6e2aef6c",
            "file": "projects/customer/src/lib/components/account/orders/order-list/order-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-list-component",
            "styleUrls": [
                "order-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "order-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hasMorePages",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_periodOptions",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "filteredOrders",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedPeriod",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "showDetail",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "showPeriodDropdown",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "slots",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "getSlot",
                    "args": [
                        {
                            "name": "slotId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "slotId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onPeriodOptionClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShowDetail",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 99,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "filter",
                            "type": "literal type"
                        },
                        {
                            "name": "clear",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clear",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "wrapOrder",
                    "args": [
                        {
                            "name": "o",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        120
                    ],
                    "inheritance": {
                        "file": "BaseAccountComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { interval } from \"rxjs\";\r\nimport { debounce, filter, first, takeUntil } from \"rxjs/operators\";\r\n\r\nimport { DataStoreService, InfiniteScrollService, MenuStateService, WINDOW, OrderService, HistoryService, Order } from \"@common/src/public-api\";\r\nimport { OrderFilterService } from '../../../../services/order-filter.service';\r\nimport { BaseAccountComponent } from \"../../base-account.component\";\r\n\r\n@Component({\r\n    selector: 'ui-order-list-component',\r\n    templateUrl: 'order-list.component.html',\r\n    styleUrls: ['order-list.component.scss']\r\n})\r\nexport class OrderListComponent extends BaseAccountComponent {\r\n    private _periodOptions: Array<{ key: string, value: string}>;\r\n    private _pageNumber: number;\r\n    private _loading: boolean = false;\r\n    private _hasMorePages: boolean = true;\r\n\r\n    metadata: any;\r\n    selectedPeriod: string;\r\n    showPeriodDropdown: boolean = false;\r\n    filteredOrders: Array<any>;\r\n    count: number;\r\n    showDetail: boolean = false;\r\n    slots: Array<any>;\r\n    \r\n\r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        historyService: HistoryService,\r\n        private orderService: OrderService,        \r\n        private orderFilterService: OrderFilterService,\r\n        private infiniteScrollService: InfiniteScrollService,\r\n        private activatedRoute: ActivatedRoute\r\n    ) {\r\n        super(historyService, router, window, menuStateService, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this._pageNumber = 1;\r\n        this.activatedRoute.data.pipe(\r\n            first(),\r\n            takeUntil(this.$destroy),\r\n        )\r\n        .subscribe((data) => {\r\n            this.metadata = data.metadata['AccountOrders'];\r\n            this._periodOptions = this.metadata.periodOptions;\r\n            this.slots = data.orderList.slots;\r\n            this.filteredOrders = data.orderList.orders.items;          \r\n            this.count = data.orderList.orders.count;\r\n            this._hasMorePages = Array.isArray(data.orderList.orders.items) && data.orderList.orders.items.length > 0;\r\n        });\r\n\r\n        this.infiniteScrollService.onScrolledDown\r\n                .pipe(\r\n                    filter(() => this._hasMorePages),\r\n                    debounce(() => interval(200)),\r\n                    takeUntil(this.$destroy))\r\n                .subscribe(() => {\r\n                    if (!this._loading) {\r\n                        this._loading = true;\r\n                        const filter = this.orderFilterService.getFilter(this.selectedPeriod);\r\n                        this._pageNumber++;\r\n                        this.search(filter);\r\n                    }\r\n            });\r\n\r\n        this.selectedPeriod = await this.dataStoreService.get('order-filter') ?? 'last 30 days';\r\n        super.init();\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public get periodOptions(): Array<any> {\r\n        return this._periodOptions;\r\n    }\r\n\r\n    public get breadcrumbs(): Array<any> {\r\n        return this.metadata && this.metadata.breadcrumb;\r\n    } \r\n\r\n    public async onPeriodOptionClick(option: any): Promise<void> {\r\n        this._pageNumber = 1;\r\n        this.selectedPeriod = option.value;\r\n        await this.dataStoreService.push('order-filter', option.key);\r\n        const filter = this.orderFilterService.getFilter(option.key);\r\n        this.search(filter, true);\r\n    }\r\n\r\n    public wrapOrder(o: any): any {\r\n        return { order: o };\r\n    }\r\n\r\n    public async onShowDetail(show: boolean): Promise<void> {\r\n        this.showDetail = show;\r\n    }\r\n\r\n    public getSlot(slotId: string): any {    \r\n        return this.slots.find(s => s._id === slotId);\r\n      } \r\n\r\n    private search(filter: { from: number, to: number }, clear: boolean = false): void {\r\n        this.orderService.search(this._pageNumber++, filter.from, filter.to)\r\n            .pipe(takeUntil(this.$destroy))\r\n            .subscribe((result: any) => {\r\n                this._hasMorePages = Array.isArray(result.items) && result.items.length > 0;\r\n                if (clear) {\r\n                    this.filteredOrders = [];\r\n                }\r\n                this.filteredOrders = this.filteredOrders.concat(result.items);\r\n                this.count = result.count\r\n                this._loading = false;\r\n            });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n    \r\n    .header {\r\n        color: #333;\r\n        margin-top: 14px;\r\n        font-weight: 600;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .desktop-container {\r\n        .filter-container {\r\n            --filter-container-wdith: 280px;\r\n            --filter-container-margin-top: 30px;\r\n            --filter-container-display: grid;\r\n            --filter-container-grid-auto-flow: column;\r\n            --filter-container-grid-template-columns: 1fr 1fr;\r\n            --filter-container-align-items: stretch;\r\n\r\n            .filter {\r\n                --filter-height: unset;\r\n            }\r\n\r\n            .order-count {\r\n                --order-count-text-align: end;\r\n                --order-count-margin-right: 4px;\r\n                --order-count-padding-top: 13px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .mobile-container {\r\n        .filter-container {\r\n            --filter-container-wdith: 100%;\r\n            --filter-container-margin-top: 30px;\r\n            --filter-container-display: grid;\r\n            --filter-container-grid-auto-flow: row;\r\n            --filter-container-grid-template-columns: 1fr;\r\n            --filter-container-align-items: stretch;\r\n\r\n            .filter {\r\n                --filter-height: 3.5rem;\r\n            }\r\n\r\n            .order-count {\r\n                --order-count-text-align: start;\r\n                --order-count-margin-right: 0;\r\n                --order-count-padding-top: 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    .filter-container {\r\n        width: var(--filter-container-width);\r\n        margin-top: var(--filter-container-margin-top);\r\n        display: var(--filter-container-display);\r\n        grid-auto-flow: var(--filter-container-grid-auto-flow);\r\n        grid-template-columns: var(--filter-container-grid-template-columns);\r\n        align-items: var(--filter-container-align-items);\r\n\r\n        .filter {\r\n            height: var(--filter-height);\r\n        }\r\n\r\n        .orders-placed {\r\n            font-weight: 500;\r\n        }\r\n\r\n        .period {\r\n            padding: 7px 22px 7px 7px;\r\n            border: 1px solid #d1d1d1;\r\n            margin-top: 5px;\r\n            position: relative;\r\n            cursor: pointer;\r\n            background-color: #f1f1f1;\r\n            display: inline-block;\r\n\r\n            &:after {\r\n                @include down-arrow(5px, 10px);\r\n            }\r\n\r\n            .dropdown {\r\n                position: absolute;                \r\n                left: 0;\r\n                width: 180px;\r\n                top: 35px;\r\n                z-index: 1;\r\n\r\n                .dropdown-container {\r\n                    position: relative;\r\n                    border: $border;\r\n                    padding: 0;\r\n                    background-color: #fff;\r\n                    width: 100%;\r\n\r\n                    &:after {\r\n                        @include up-indicator(66px, #fff, unset);\r\n                    }\r\n\r\n                    li {\r\n                        height: 45px;\r\n                        padding: 15px 20px;\r\n                        border-bottom: 1px solid #e1e1e1;\r\n\r\n                        &.selected {\r\n                            background-color: $tertiary-color;\r\n                            color: white;\r\n                        }\r\n\r\n                        &:hover {\r\n                            background-color: #f1f1f1;\r\n                            color: #555;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        .order-count {\r\n            text-align: var(--order-count-text-align);\r\n            font-weight: 500;\r\n            margin-right: var(--order-count-margin-right);\r\n            padding-top: var(--order-count-padding-top);\r\n        }\r\n    }\r\n\r\n    .order-wrapper {\r\n        margin: 40px 0;\r\n        border: $border;\r\n        border-color: #ccc;\r\n        border-radius: $border-radius;\r\n\r\n        ui-order-detail-component {\r\n            .container {\r\n                ::ng-deep & {\r\n                    min-height: 0;\r\n                    max-height: 0;\r\n                    overflow-y: hidden;\r\n                    transition: 1s;\r\n                    padding: 0;\r\n                }\r\n            }\r\n\r\n            &.show {\r\n                .container {\r\n                    ::ng-deep & {\r\n                        max-height: fit-content;\r\n                        padding: 20px;\r\n                        padding-top: 7px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "order-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "orderService",
                        "type": "OrderService"
                    },
                    {
                        "name": "orderFilterService",
                        "type": "OrderFilterService"
                    },
                    {
                        "name": "infiniteScrollService",
                        "type": "InfiniteScrollService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orderService",
                        "type": "OrderService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orderFilterService",
                        "type": "OrderFilterService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "infiniteScrollService",
                        "type": "InfiniteScrollService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseAccountComponent",
            "accessors": {
                "periodOptions": {
                    "name": "periodOptions",
                    "getSignature": {
                        "name": "periodOptions",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 79
                    }
                },
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 83
                    }
                }
            },
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n    <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <div class=\"header\">{{metadata && metadata.myOrders && metadata.myOrders.label}}</div>\r\n\r\n    <div [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile}\">\r\n        <ng-container *ngTemplateOutlet=\"filterTemplate\"></ng-container>\r\n        <ng-container *ngFor=\"let o of filteredOrders\">\r\n            <ui-order-wrapper-component [metadata]=\"metadata\" [order]=\"o\" [slot]=\"getSlot(o.slotId)\"></ui-order-wrapper-component>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #filterTemplate>\r\n    <div class=\"filter-container\">\r\n        <div class=\"filter\">\r\n            <span class=\"orders-placed\">{{metadata && metadata.showOrdersPlaced && metadata.showOrdersPlaced.label}}</span> {{metadata && metadata.in && metadata.in.label}}\r\n            <span class=\"period\"\r\n                (click)=\"showPeriodDropdown = !showPeriodDropdown\"\r\n            >\r\n                <span>{{selectedPeriod}}</span>\r\n                <div *ngIf=\"showPeriodDropdown\" class=\"dropdown\">\r\n                    <div class=\"dropdown-container\">\r\n                        <ul>\r\n                            <li *ngFor=\"let o of periodOptions\" [ngClass]=\"{'selected': o.value === selectedPeriod }\"  (click)=\"onPeriodOptionClick(o)\">{{o.value}}</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </span>\r\n        </div>\r\n        \r\n        <div class=\"order-count\">{{metadata && metadata.ordersPlaced && metadata.ordersPlaced.label}}: {{count}}</div>\r\n    </div>\r\n</ng-template>\r\n"
        },
        {
            "name": "OrderStatusComponent",
            "id": "component-OrderStatusComponent-140710a0a8c2636fe37c4a4dfb2c715e",
            "file": "projects/customer/src/lib/components/account/orders/child-components/order-status/order-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-status",
            "styleUrls": [
                "./order-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 14,
                    "type": "any"
                },
                {
                    "name": "modifiedDate",
                    "line": 12,
                    "type": "any"
                },
                {
                    "name": "slot",
                    "line": 13,
                    "type": "any"
                },
                {
                    "name": "status",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dictionary",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "model",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showFailedText",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        112,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { OrderStatus } from '../../../../../../../../common/src/lib/types/order-status';\r\n\r\n@Component({\r\n  selector: 'ui-order-status',\r\n  templateUrl: './order-status.component.html',\r\n  styleUrls: ['./order-status.component.scss']\r\n})\r\nexport class OrderStatusComponent implements OnInit, OnChanges{\r\n    private readonly dictionary: { [status: string]: { showDate: boolean, showDeliveryDate: boolean, status: string }} = {}\r\n    @Input() status: any;\r\n    @Input() modifiedDate: any;\r\n    @Input() slot: any;\r\n    @Input() metadata: any;\r\n\r\n    model: { showDate: boolean, showDeliveryDate: boolean, status: string };\r\n    showFailedText: boolean = false;\r\n  \r\n    constructor() {      \r\n    }\r\n\r\n    async ngOnChanges(changes: SimpleChanges): Promise<void> {\r\n        if (changes && changes['status']?.firstChange === false) {\r\n            await this.setStatus();\r\n        }\r\n    }\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.dictionary[ OrderStatus.Open] = { showDate: false, showDeliveryDate: true, status: this.metadata.picking.label };\r\n        this.dictionary[ OrderStatus.Picking] = { showDate: false, showDeliveryDate: true, status: this.metadata.picking.label };\r\n        this.dictionary[ OrderStatus.Dispatch] = { showDate: false, showDeliveryDate: true, status: this.metadata.picking.label };\r\n        this.dictionary[ OrderStatus.PaymentInProgress] = { showDate: false, showDeliveryDate: false, status: this.metadata.paymentInProgress.label };\r\n        this.dictionary[ OrderStatus.Failed] = { showDate: true, showDeliveryDate: false, status: this.metadata.failed.label };\r\n        this.dictionary[ OrderStatus.Delivered] = { showDate: true, showDeliveryDate: false, status: this.metadata.delivered.label };\r\n        this.dictionary[ OrderStatus.Returned] = { showDate: true, showDeliveryDate: false, status: this.metadata.returned.label };\r\n        this.dictionary[ OrderStatus.SemiReturned] = { showDate: true, showDeliveryDate: false, status: this.metadata.semiReturned.label };\r\n        this.dictionary[ OrderStatus.Closed] = { showDate: true, showDeliveryDate: false, status: this.metadata.closed.label };\r\n        this.dictionary[ OrderStatus.Cancelled] = { showDate: true, showDeliveryDate: false, status: this.metadata.cancelled.label };\r\n        \r\n        await this.setStatus();\r\n    }\r\n\r\n    private async setStatus(): Promise<void> {\r\n        this.model = this.dictionary[this.status];\r\n        if(this.status === OrderStatus.Failed) {\r\n            this.showFailedText = true;\r\n        }\r\n        else {\r\n            this.showFailedText = false;\r\n        }\r\n           \r\n        await Promise.resolve();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n\r\n.display-status {\r\n    font-weight: 500;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n}\r\n.failed-text {\r\n    color: $error-text-color;\r\n}",
                    "styleUrl": "./order-status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div  class=\"display-status\" *ngIf=\"model && model.showDate\" [ngClass]=\"{'failed-text' : showFailedText }\">\r\n    {{ model && model.status | uppercase }}\r\n    {{ modifiedDate | date: 'd MMM YYYY' }}\r\n</div>\r\n<div  class=\"display-status\" *ngIf=\"model && model.showDeliveryDate && !model.showDate\">\r\n    {{ model && model.status | uppercase }}\r\n    {{ slot.deliveryDate | date: 'd MMM YYYY' }} {{metadata && metadata.between && metadata.between.label}} {{ slot.startTime }}:00 - {{ slot.endTime }}:00\r\n</div>\r\n<div  class=\"display-status\" *ngIf=\"model && !model.showDate && !model.showDeliveryDate\">\r\n    {{ model && model.status | uppercase }}\r\n</div>\r\n"
        },
        {
            "name": "OrderWrapperComponent",
            "id": "component-OrderWrapperComponent-9bdc552533f887d224e28cf0d92d3dfa",
            "file": "projects/customer/src/lib/components/account/orders/child-components/order-wrapper/order-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-order-wrapper-component",
            "styleUrls": [
                "./order-wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./order-wrapper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "order",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "slot",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "template",
                    "defaultValue": "'LIST'",
                    "line": 12,
                    "type": "\"LIST\" | \"DETAIL\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showDetail",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onShowDetail",
                    "args": [
                        {
                            "name": "show",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "show",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ui-order-wrapper-component',\r\n    templateUrl: './order-wrapper.component.html',\r\n    styleUrls: ['./order-wrapper.component.scss']\r\n})\r\nexport class OrderWrapperComponent implements OnInit {\r\n    @Input() order: any;\r\n    @Input() slot: any;\r\n    @Input() metadata: any;\r\n    @Input() template: 'LIST' | 'DETAIL' = 'LIST';\r\n\r\n    showDetail: boolean = false;\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.showDetail =  this.template === 'DETAIL' ? true : false;\r\n    }\r\n    \r\n    public async onShowDetail(show: boolean): Promise<void> {\r\n        this.showDetail =  this.template === 'DETAIL' ? true : show;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n\r\n@mixin border {\r\n    border: $border;\r\n    border-color: #ccc;\r\n    border-radius: $border-radius;\r\n}\r\n.order-wrapper {\r\n        margin: 40px 0;\r\n        \r\n        &.list-order-wrapper {\r\n            @include border;\r\n        }\r\n\r\n        ui-order-detail-component {\r\n            .container {\r\n                ::ng-deep & {\r\n                    min-height: 0;\r\n                    max-height: 0;\r\n                    overflow-y: hidden;\r\n                    transition: 1s;\r\n                    padding: 0;\r\n                    margin-top: -2px;\r\n                }\r\n            }\r\n\r\n            &.show {\r\n                .container {\r\n                    ::ng-deep & {\r\n                        max-height: fit-content;\r\n                        padding: 20px;\r\n                        padding-top: 7px;\r\n                        margin-top: 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        &.detail-order-wrapper {\r\n            .detail-wrapper,\r\n            .header-wrapper {\r\n                @include border()\r\n            }\r\n\r\n            .header-wrapper {\r\n                margin-bottom: 10px;\r\n\r\n                ui-order-header-component {\r\n                    .container {\r\n                        .header-detail-container {\r\n                            ::ng-deep & {\r\n                                background-color: #fff;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n",
                    "styleUrl": "./order-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"template === 'LIST'\" class=\"order-wrapper list-order-wrapper\">\r\n    <ui-order-header-component [template]=\"template\" (showDetail)=\"onShowDetail($event)\" [metadata]=\"metadata && metadata.header\" [order]=\"order\"></ui-order-header-component>\r\n    <ui-order-detail-component [template]=\"template\" [ngClass]=\"{ 'show': showDetail === true }\" [metadata]=\"metadata && metadata.detail\" [order]=\"order\" [slot]=\"slot\"></ui-order-detail-component>\r\n</div>\r\n\r\n<div *ngIf=\"template === 'DETAIL'\" class=\"order-wrapper detail-order-wrapper\">\r\n    <div class=\"header-wrapper\">\r\n        <ui-order-header-component [template]=\"template\" (showDetail)=\"onShowDetail($event)\" [metadata]=\"metadata && metadata.header\" [order]=\"order\"></ui-order-header-component>\r\n    </div>\r\n    <div class=\"detail-wrapper\">\r\n        <ui-order-detail-component [template]=\"template\" [ngClass]=\"{ 'show': showDetail === true }\" [metadata]=\"metadata && metadata.detail\" [order]=\"order\"  [slot]=\"slot\"></ui-order-detail-component>\r\n    </div>\r\n</div>"
        },
        {
            "name": "OtpVerificationComponent",
            "id": "component-OtpVerificationComponent-9cfbee8ad008968d60092b790afee133",
            "file": "projects/customer/src/lib/components/otp-verification/otp-verification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-otp-verification-component",
            "styleUrls": [
                "./otp-verification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./otp-verification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "expired",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "ignoreMediaQueries",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "otp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "timeInSeconds",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "type",
                    "defaultValue": "'Mobile'",
                    "type": "ProfileChangeProperty",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "verificationFailure",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "verified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "verify",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "verifyOtpModel",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPasswordSubmitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onResendClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onVerifyClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showVerified",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 157,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "verifyOtp",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 140,
                    "modifierKind": [
                        112,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NotificationMessageKeys } from '@common/src/lib/constants/notification.message.keys';\r\nimport {\r\n    AuthService,\r\n    BaseComponent,\r\n    DataStoreService,\r\n    HttpStatusCode,\r\n    IInputValue,\r\n    NavigationService,\r\n    NotificationService,\r\n    RouteKeys,\r\n    VerificationService,\r\n    VerificationType,\r\n    WINDOW,\r\n} from '@common/src/public-api';\r\nimport { ProfileChangeProperty } from 'projects/typings/custom';\r\nimport { from, timer } from 'rxjs';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-otp-verification-component',\r\n    templateUrl: './otp-verification.component.html',\r\n    styleUrls: ['./otp-verification.component.scss'],\r\n})\r\nexport class OtpVerificationComponent extends BaseComponent {\r\n    otp: string;\r\n    password: string;\r\n    metadata: any;\r\n    errors: Array<any> = [];\r\n    isValid: boolean;\r\n    ignoreMediaQueries: boolean;\r\n    verifyOtpModel: any;\r\n    verify: boolean;\r\n    verified: boolean;\r\n    verificationFailure: boolean;\r\n    expired: boolean;\r\n    timeInSeconds: number;\r\n    type: ProfileChangeProperty = 'Mobile';\r\n\r\n    private debug: boolean = false;\r\n\r\n    constructor(\r\n        private navigationService: NavigationService,\r\n        private verificationService: VerificationService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.setState('verify');\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['OtpVerification'];\r\n        this.verifyOtpModel = this.activatedRoute.snapshot.data.verifyOtpModel;\r\n        this.type = this.verifyOtpModel.email ? 'Email' : this.type;\r\n        this.otp = '';\r\n        this.password = '';\r\n    }\r\n\r\n    public async onResendClick(): Promise<void> {\r\n        if (this.type === 'Mobile'){\r\n            await this.verificationService.resendMobileOtp(\r\n                this.verifyOtpModel.verificationType,\r\n                this.verifyOtpModel.isoCode,\r\n                this.verifyOtpModel.mobile\r\n            );\r\n        } else {\r\n            await this.verificationService.resendEmailOtp(\r\n                this.verifyOtpModel.verificationType,\r\n                this.verifyOtpModel.currentEmailID,\r\n                this.verifyOtpModel.email                \r\n            );\r\n        }\r\n        this.notificationService.showMessage(NotificationMessageKeys.OtpResend);\r\n        this.setState('verify');\r\n    }\r\n    public async onVerifyClick(): Promise<void> {\r\n        try {\r\n            await this.verifyOtp()            \r\n            this.setState('verified');\r\n            await this.dataStoreService.push('verify-otp', null);\r\n            \r\n            if (this.verifyOtpModel.verificationType !== VerificationType.ProfileChange) {\r\n                await this.showVerified();\r\n            } else {\r\n                await this.authService.logout();\r\n            }\r\n        } catch (e) {\r\n            this.otp = '';\r\n            if (e.status === HttpStatusCode.BadRequest && e.error && e.error.state === 'Expired') {\r\n                this.setState('expired');\r\n            } else {\r\n                this.setState('failure');\r\n                this.dataStoreService.push('verify-otp', null);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onValueChange(inputValue: IInputValue): void {\r\n        if (inputValue.name === 'otp') {\r\n            this.otp = inputValue.value;\r\n            this.isValid = this.otp && this.otp.trim().length === 8;\r\n        }\r\n\r\n        if (inputValue.name === 'password') {\r\n            this.password = inputValue.value;\r\n        }\r\n    }\r\n\r\n    public onKeyUp($event: any): void {\r\n        this.isValid = $event.target.value.length === 8;\r\n    }\r\n\r\n    public async onPasswordSubmitClick(): Promise<void> {\r\n        const username = this.type === 'Email' ? this.verifyOtpModel.email : this.verifyOtpModel.mobile;\r\n        await this.authService.login(this.type, this.verifyOtpModel.isoCode, username, this.password);\r\n        await this.navigationService.back();\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return this.errors.length > 0;\r\n    }\r\n\r\n    get isProfileChange(): boolean {\r\n        return this.verifyOtpModel.verificationType === VerificationType.ProfileChange;\r\n    }\r\n\r\n    private setState(state: string): void {\r\n        this.verify = this.debug || state === 'verify' || state === 'expired';\r\n        this.verificationFailure = this.debug || state === 'failure';\r\n        this.verified = this.debug || state === 'verified';\r\n        this.expired = this.debug || state === 'expired';\r\n    }\r\n\r\n    private async verifyOtp(): Promise<void> {\r\n        if (this.type === 'Mobile') {\r\n            await this.verificationService.verifyMobileOtp(\r\n                this.verifyOtpModel.verificationType,\r\n                this.verifyOtpModel.isoCode,\r\n                this.verifyOtpModel.mobile,\r\n                this.otp\r\n            );\r\n        } else {\r\n            await this.verificationService.verifyEmailOtp(\r\n                this.verifyOtpModel.verificationType,\r\n                this.verifyOtpModel.email,\r\n                this.otp\r\n            );\r\n        }\r\n    }\r\n\r\n    private async showVerified(): Promise<void> {\r\n        this.timeInSeconds = this.metadata.autoRedirect.time;\r\n        timer(1000, 1000)\r\n            .pipe(take(2), takeUntil(this.$destroy))\r\n            .subscribe((_) => --this.timeInSeconds);\r\n        from([0])\r\n            .pipe(delay(3000), takeUntil(this.$destroy))\r\n            .subscribe(async (_) => {\r\n                const redirect =\r\n                    this.verifyOtpModel.verificationType === VerificationType.NewAccountVerify\r\n                        ? RouteKeys.Signin : RouteKeys.PasswordReset;\r\n                this.otp = '';\r\n                await this.navigationService.navigateForUrl(redirect);\r\n            });\r\n        \r\n        if (this.verifyOtpModel.verificationType === VerificationType.ResetPassword) {\r\n            await this.dataStoreService.push('pr-user', {\r\n                mode: 'Mobile',\r\n                isoCode: this.verifyOtpModel.isoCode,\r\n                userName: this.verifyOtpModel.mobile,\r\n            });\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n@import '../../../../../ui/src/assets/fonts/material-icons/material-icons.css';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    max-width: 30rem;\r\n    position: relative;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    margin: 20px auto;\r\n\r\n    > * {\r\n        margin: 0;\r\n    }\r\n\r\n    .form-container {\r\n        .header {\r\n            color: $highlight;\r\n            margin-bottom: 10px;\r\n            font-weight: 500;\r\n            font-size: 1.5em;\r\n        }\r\n\r\n        .error {\r\n            span:not(:first-child) {\r\n                color: $mobile-regular-color;\r\n                margin-top: 8px;\r\n                display: block;\r\n            }\r\n\r\n            span:first-child {\r\n                font-weight: 500;\r\n                font-size: 1.1em;\r\n            }\r\n        }\r\n\r\n        .row {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .btn {\r\n            margin-top: 20px;\r\n        }\r\n\r\n        .description {\r\n            margin-top: 20px;\r\n            font-size: 0.9em;\r\n            color: $mobile-regular-color;\r\n\r\n            .email,\r\n            .mobile {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n        .verification-failure,\r\n        .acceptance {\r\n            margin-top: 20px;\r\n            font-size: 0.8em;\r\n        }\r\n\r\n        .verified,\r\n        .expired,\r\n        .verification-failure {\r\n            font-size: 0.9em;\r\n        }\r\n\r\n        .verified {\r\n            margin-top: 20px;\r\n            line-height: 23px;\r\n\r\n            .success {\r\n                color: $success-text-color;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        .expired {\r\n            margin-top: 20px;\r\n            line-height: 23px;\r\n            color: $error-text-color;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .verification-failure {\r\n            .failure {\r\n                ::ng-deep & {\r\n                    color: $error-text-color;\r\n                    font-weight: bold;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./otp-verification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 125
                    }
                },
                "isProfileChange": {
                    "name": "isProfileChange",
                    "getSignature": {
                        "name": "isProfileChange",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 129
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div class=\"form-container\">\r\n        <h4 class=\"header\">\r\n            {{ metadata && metadata.header && metadata.header.label }}\r\n        </h4>\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"verify\">\r\n            <ng-container *ngTemplateOutlet=\"verifyTemplate\"></ng-container>\r\n            <ng-container *ngTemplateOutlet=\"expiredTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"verificationFailure\">\r\n            <ng-container *ngTemplateOutlet=\"failureTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"verified\">\r\n            <ng-container *ngTemplateOutlet=\"verifiedTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"metadata && metadata.acceptance && metadata.acceptance.statement\">\r\n            <div class=\"acceptance\">\r\n                <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.acceptance\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n\r\n<ng-template #verifyTemplate>\r\n    <div class=\"description\">\r\n        <span>{{ metadata && metadata.description && metadata.description.label }}</span>\r\n        <span *ngIf=\"type === 'Mobile'\" class=\"mobile\"\r\n            >{{ verifyOtpModel && verifyOtpModel.isoCode }}{{ verifyOtpModel && verifyOtpModel.mobile | mask: 4 }}</span\r\n        >\r\n        <span *ngIf=\"type === 'Email'\" class=\"email\"\r\n            >{{ verifyOtpModel && verifyOtpModel.email | mask:null:true }}</span\r\n        >\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"onValueChange($event)\"\r\n            (keyboardKeyup)=\"onKeyUp($event)\"\r\n            [value]=\"otp\"\r\n            type=\"text\"\r\n            name=\"otp\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.otp\"\r\n        ></ui-textbox-component>\r\n    </div>\r\n\r\n    <button\r\n        uiRecaptcha\r\n        class=\"btn btn-primary\"\r\n        [disabled]=\"!isValid\"\r\n        [hidden]=\"expired\"\r\n        [action]=\"metadata && metadata.verify && metadata.verify.action\"\r\n        (execute)=\"onVerifyClick()\"\r\n    >\r\n        {{ metadata && metadata.verify && metadata.verify.label }}\r\n    </button>\r\n\r\n    <button\r\n        uiRecaptcha\r\n        class=\"btn btn-light btn-light-bordered\"\r\n        [action]=\"metadata && metadata.resend && metadata.resend.action\"\r\n        (execute)=\"onResendClick()\"\r\n    >\r\n        {{ metadata && metadata.resend && metadata.resend.label }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #failureTemplate>\r\n    <ng-container *ngIf=\"metadata && metadata.verificationFailure && metadata.verificationFailure.statement\">\r\n        <div class=\"verification-failure\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.verificationFailure\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #verifiedTemplate>\r\n    <div class=\"row\" [hidden]=\"!isProfileChange\">\r\n        <ui-textbox-component\r\n            (valueChange)=\"onValueChange($event)\"\r\n            [value]=\"password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.password\"\r\n        >\r\n        </ui-textbox-component>\r\n    </div>\r\n    <div class=\"row\" [hidden]=\"!isProfileChange\">\r\n        <button\r\n            uiRecaptcha\r\n            class=\"btn btn-primary\"\r\n            [action]=\"metadata && metadata.passwordSubmit && metadata.passwordSubmit.action\"\r\n            (execute)=\"onPasswordSubmitClick()\"\r\n        >\r\n            {{ metadata && metadata.passwordSubmit && metadata.passwordSubmit.label }}\r\n        </button>\r\n    </div>\r\n    <div class=\"verified\" [hidden]=\"isProfileChange\">\r\n        <span class=\"success\">{{ metadata && metadata.otpVerifySuccess && metadata.otpVerifySuccess.label }}</span>\r\n        <span\r\n            >{{ metadata && metadata.autoRedirect && metadata.autoRedirect.label }} {{ timeInSeconds || '' }}\r\n            {{ metadata && metadata.autoRedirect && metadata.autoRedirect.timeComponent }}</span\r\n        >\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #expiredTemplate>\r\n    <div [hidden]=\"!expired\" class=\"expired\">{{ metadata && metadata.otpExpired && metadata.otpExpired.label }}</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-458a0bd074cddd3932cfcb5b086aeb0d",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-c017e7cac81f0237fc967071d8bbf898",
            "file": "projects/shell/src/lib/components/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-page-not-found",
            "styleUrls": [
                "./page-not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'ui-page-not-found',\r\n    templateUrl: './page-not-found.component.html',\r\n    styleUrls: ['./page-not-found.component.scss'],\r\n})\r\nexport class PageNotFoundComponent implements OnInit {\r\n    errorType: string;\r\n\r\n    constructor(private titleService: Title) {}\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.titleService.setTitle('Amreet Bazzar - Not Found');\r\n\r\n        await Promise.resolve();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        },
        {
            "name": "PasswordResetComponent",
            "id": "component-PasswordResetComponent-9b8ab4114d77bbbebc9c8e913241a30e",
            "file": "projects/customer/src/lib/components/password-reset/password-reset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-password-reset-component",
            "styleUrls": [
                "./password-reset.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password-reset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkAllInputs",
                    "type": "CheckAllInputsValidDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CheckAllInputsValidDirective"
                        }
                    ]
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "failure",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "ignoreMediaQueries",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "model",
                    "type": "ChangePasswordModel",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showChangePassword",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "success",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "timeInSeconds",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onChangePasswordClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "resetModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Inject, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { delay, take, takeUntil } from 'rxjs/operators';\r\nimport { CustomerService } from '../../services/customer.service';\r\nimport {\r\n    BaseComponent,\r\n    CheckAllInputsValidDirective,\r\n    IInputValue,\r\n    RouteKeys,\r\n    WINDOW,\r\n} from '@common/src/public-api';\r\nimport { ChangePasswordModel, ChangePasswordState } from '../../models';\r\nimport { from, timer } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'ui-password-reset-component',\r\n    templateUrl: './password-reset.component.html',\r\n    styleUrls: ['./password-reset.component.scss'],\r\n})\r\nexport class PasswordResetComponent extends BaseComponent implements AfterViewInit {\r\n    errors: Array<any> = [];\r\n    metadata: any;\r\n    ignoreMediaQueries: boolean;\r\n    model: ChangePasswordModel;\r\n    @ViewChild(CheckAllInputsValidDirective) checkAllInputs: CheckAllInputsValidDirective;\r\n\r\n    isValid: boolean;\r\n    showChangePassword: boolean = true;\r\n    success: boolean;\r\n    failure: boolean;\r\n    timeInSeconds: number;\r\n\r\n    private debug: boolean = false;\r\n\r\n    constructor(\r\n        private customerService: CustomerService,\r\n        private activatedRoute: ActivatedRoute,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['PasswordReset'];\r\n        this.reset();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.checkAllInputs.validationStateChange.pipe(takeUntil(this.$destroy)).subscribe((state) => {\r\n            this.isValid = state;\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onValueChange(inputValue: IInputValue): void {\r\n        this.model[inputValue.name] = inputValue.value;\r\n    }\r\n\r\n    public async onChangePasswordClick(): Promise<void> {\r\n        if (this.isValid) {\r\n            this.errors = [];\r\n\r\n            try {\r\n                await this.tokenService.xsrf();\r\n                const changeState: { state: ChangePasswordState } = await this.customerService.changePassword(\r\n                    this.model\r\n                );\r\n\r\n                if (changeState.state === ChangePasswordState.Success) {\r\n                    timer(1000, 1000)\r\n                        .pipe(take(2), takeUntil(this.$destroy))\r\n                        .subscribe((_) => --this.timeInSeconds);\r\n                    from([0])\r\n                        .pipe(delay(3000), takeUntil(this.$destroy))\r\n                        .subscribe(async (_) => {\r\n                            const redirect = '/signin';\r\n                            this.router.navigateByUrl(redirect);\r\n                        });\r\n                    this.setState('success');\r\n                } else if (changeState.state === ChangePasswordState.PasswordInPreviousSet) {\r\n                    this.errors = this.metadata.errorMessages.filter((e) => e.state === changeState.state);\r\n                } else {\r\n                    this.setState('failure');\r\n                }\r\n            } catch (e) {\r\n                if (e.status === 400) {\r\n                    this.errors = e.error;\r\n                } else {\r\n                    this.router.navigateByUrl(RouteKeys.ErrorFatal);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return this.debug || this.errors.length > 0;\r\n    }\r\n\r\n    private reset(): void {\r\n        this.timeInSeconds =\r\n            this.metadata && this.metadata.changePassword && this.metadata.changePassword.success.autoRedirect.time;\r\n        this.setState('show');\r\n        this.resetModel();\r\n    }\r\n\r\n    private resetModel(): void {\r\n        this.model = { mode: '', isoCode: '', userName: '', password: '', confirmPassword: '' };\r\n    }\r\n\r\n    private setState(state: string): void {\r\n        this.success = this.debug || state === 'success';\r\n        this.failure = this.debug || state === 'failure';\r\n        this.showChangePassword = this.debug || state === 'show';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n@import '../../../../../ui/src/scss/mixins';\r\n@import '../../../../../ui/src/assets/fonts/material-icons/material-icons.css';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    position: relative;\r\n    height: 100%;\r\n    background-color: #fff;\r\n    margin: 20px auto;\r\n    color: $mobile-regular-color;\r\n\r\n    > * {\r\n        margin: 0;\r\n    }\r\n\r\n    .form-container {\r\n        .header {\r\n            color: $highlight;\r\n            margin-bottom: 10px;\r\n            font-weight: 500;\r\n            font-size: 1.5em;\r\n        }\r\n\r\n        .acceptance,\r\n        .btn,\r\n        .content,\r\n        .error,\r\n        .password-change-success,\r\n        .password-change-failure,\r\n        .row {\r\n            margin-top: 20px;\r\n            line-height: 23px;\r\n            font-size: 0.9em;\r\n        }\r\n\r\n        .error {\r\n            span:not(:first-child) {\r\n                color: $mobile-regular-color;\r\n                margin-top: 8px;\r\n                display: block;\r\n            }\r\n\r\n            span:first-child {\r\n                font-weight: 500;\r\n                font-size: 1.1em;\r\n            }\r\n        }\r\n\r\n        .content {\r\n            font-size: 0.85em;\r\n            line-height: 20px;\r\n        }\r\n\r\n        .acceptance {\r\n            font-size: 0.8em;\r\n            border-top: 3px solid #f1f1f1;\r\n            padding-top: 10px;\r\n        }\r\n\r\n        .information {\r\n            background-color: #fcfcfc;\r\n            border: 1px solid transparent;\r\n            padding: 6px 11px;\r\n            box-shadow: 2px 2px #f1f1f1;\r\n\r\n            span {\r\n                line-height: 17px;\r\n                font-size: 0.65em;\r\n                display: block;\r\n                font-weight: 500;\r\n                color: #555;\r\n            }\r\n        }\r\n\r\n        .password-change-success {\r\n            .success {\r\n                color: $success-text-color;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        .password-change-failure {\r\n            .failure {\r\n                ::ng-deep & {\r\n                    color: $error-text-color;\r\n                    font-weight: bold;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./password-reset.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "customerService",
                        "type": "CustomerService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "customerService",
                        "type": "CustomerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 99
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div uiCheckAllInputsValid class=\"form-container\">\r\n        <h4 class=\"header\">\r\n            {{ metadata && metadata.header && metadata.header.label }}\r\n        </h4>\r\n        <div *ngIf=\"showChangePassword\" class=\"content\">\r\n            {{ metadata && metadata.header && metadata.header.content }}\r\n        </div>\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"showChangePassword\">\r\n            <ng-container *ngTemplateOutlet=\"changePasswordTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"success\">\r\n            <ng-container *ngTemplateOutlet=\"successTemplate\"></ng-container>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"failure\">\r\n            <ng-container *ngTemplateOutlet=\"failureTemplate\"></ng-container>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"metadata && metadata.acceptance && metadata.acceptance.statement\">\r\n            <div class=\"acceptance\">\r\n                <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.acceptance\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #successTemplate>\r\n    <div class=\"password-change-success\">\r\n        <span class=\"success\">{{ metadata && metadata.changePassword && metadata.changePassword.success.label }}</span>\r\n        <span\r\n            >{{\r\n                metadata &&\r\n                    metadata.changePassword &&\r\n                    metadata.changePassword.success.autoRedirect &&\r\n                    metadata.changePassword.success.autoRedirect.label\r\n            }}\r\n            {{ timeInSeconds || '' }}\r\n            {{\r\n                metadata && metadata.changePassword && metadata.changePassword.success.autoRedirect.timeComponent\r\n            }}</span\r\n        >\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #changePasswordTemplate>\r\n    <div class=\"row\">\r\n        <div class=\"information\">\r\n            <span *ngFor=\"let i of metadata && metadata.passwordInformation\">{{ i }}</span>\r\n        </div>\r\n        <ui-textbox-component\r\n            (valueChange)=\"onValueChange($event)\"\r\n            [value]=\"model && model.password\"\r\n            type=\"password\"\r\n            name=\"password\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.password\"\r\n        >\r\n        </ui-textbox-component>\r\n    </div>\r\n    <div class=\"row\">\r\n        <ui-confirm-textbox-component\r\n            (valueChange)=\"onValueChange($event)\"\r\n            [value]=\"model && model.confirmPassword\"\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.confirmPassword\"\r\n        >\r\n        </ui-confirm-textbox-component>\r\n    </div>\r\n\r\n    <button class=\"btn btn-primary\" [disabled]=\"!isValid\" (click)=\"onChangePasswordClick()\">\r\n        {{ metadata && metadata.changePassword && metadata.changePassword.label }}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #failureTemplate>\r\n    <ng-container\r\n        *ngIf=\"\r\n            metadata &&\r\n            metadata.changePassword &&\r\n            metadata.changePassword.failure &&\r\n            metadata.changePassword.failure.statement\r\n        \"\r\n    ></ng-container>\r\n    <div class=\"password-change-failure\">\r\n        <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.changePassword.failure\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n"
        },
        {
            "name": "PaymentFailureComponent",
            "id": "component-PaymentFailureComponent-5360873a797aa19931b8d9e1365e8fb4",
            "file": "projects/checkout/src/lib/components/child-components/payment/failure/payment-failure.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-payment-failure-component",
            "styleUrls": [
                "./payment-failure.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./payment-failure.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "paymentResponse",
                    "type": "PaymentCompleteResponse",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PaymentCompleteResponse } from '@checkout/src/lib/types/payment-complete-response';\r\nimport { BaseComponent, DataStoreService, MenuStateService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-payment-failure-component',\r\n    templateUrl: './payment-failure.component.html',\r\n    styleUrls: ['./payment-failure.component.scss'],\r\n})\r\nexport class PaymentFailureComponent extends BaseComponent {\r\n    metadata: any;\r\n    paymentResponse: PaymentCompleteResponse;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        dataStoreService: DataStoreService,\r\n        menuStateService: MenuStateService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n        this.menuStateService.changeShowMainMenu(true);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['PaymentFailure'];\r\n        this.paymentResponse = await this.dataStoreService.get('payment-result') as PaymentCompleteResponse;\r\n        await this.dataStoreService.push('payment-result', null);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n$loader-size: 7em;\r\n$height: $loader-size/2;\r\n$width: $height/2;\r\n$left: ($loader-size/6 + $loader-size/12);\r\n$thickness: 3px;\r\n$color: $error-text-color;\r\n\r\n.container {\r\n    @include non-content-container;\r\n    margin-top: 40px;\r\n    text-align: center;\r\n\r\n    .item,\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.1em;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .failure-circle {\r\n        i {\r\n            color: $color;\r\n            font-size: 7em;\r\n        }\r\n    }\r\n\r\n    .item {\r\n        font-size: 1em;\r\n    }\r\n\r\n    .failure-message {\r\n        text-align: center;\r\n    }\r\n\r\n    .failure-message {\r\n        .failure {\r\n            ::ng-deep & {\r\n                color: $error-text-color;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n\r\n        .statement-container {\r\n            ::ng-deep & {\r\n                text-align: center!important;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes checkmark {\r\n    0% {\r\n      height: 0;\r\n      width: 0;\r\n      opacity: 1;\r\n    }\r\n    20% {\r\n      height: 0;\r\n      width: $width;\r\n      opacity: 1;\r\n    }\r\n    40% {\r\n      height: $height;\r\n      width: $width;\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      height: $height;\r\n      width: $width;\r\n      opacity: 1;\r\n    }\r\n}",
                    "styleUrl": "./payment-failure.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"container\">\r\n    <div class=\"title\">{{ metadata && metadata.section }}</div>\r\n\r\n    <div class=\"failure-circle\">\r\n        <i class=\"material-icons\">highlight_off</i>\r\n    </div>\r\n\r\n    <div *ngIf=\"paymentResponse\" class=\"item\">{{metadata && metadata.transactionId && metadata.transactionId.label}}: {{paymentResponse.orderNumber}}</div>\r\n\r\n    <div class=\"failure-message\">\r\n        <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.failureMessage\"></ng-container>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>"
        },
        {
            "name": "PaymentSuccessComponent",
            "id": "component-PaymentSuccessComponent-bc2b000cfe7d2d339154d20558626a48",
            "file": "projects/checkout/src/lib/components/child-components/payment/success/payment-success.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-payment-success-component",
            "styleUrls": [
                "./payment-success.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./payment-success.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "paymentResponse",
                    "type": "PaymentCompleteResponse",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        113,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PaymentCompleteResponse } from '@checkout/src/lib/types/payment-complete-response';\r\nimport { BaseComponent, DataStoreService, MenuStateService, ShoppingCartStateService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-payment-success-component',\r\n    templateUrl: './payment-success.component.html',\r\n    styleUrls: ['./payment-success.component.scss'],\r\n})\r\nexport class PaymentSuccessComponent extends BaseComponent {\r\n    metadata: any;\r\n    paymentResponse: PaymentCompleteResponse;\r\n\r\n    constructor(\r\n        dataStoreService: DataStoreService,\r\n        menuStateService: MenuStateService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private shoppingCartStateService: ShoppingCartStateService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n        this.menuStateService.changeShowMainMenu(true);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['PaymentSuccess'];\r\n        this.paymentResponse = await this.dataStoreService.get('payment-result') as PaymentCompleteResponse;\r\n        await this.dataStoreService.push('payment-result', null);\r\n        this.shoppingCartStateService.reset();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n$loader-size: 7em;\r\n$check-height: $loader-size/2;\r\n$check-width: $check-height/2;\r\n$check-left: ($loader-size/6 + $loader-size/12);\r\n$check-thickness: 3px;\r\n$check-color: $success;\r\n\r\n.container {\r\n    @include non-content-container;\r\n    margin-top: 40px;\r\n    text-align: center;\r\n\r\n    .item,\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.1em;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .success-circle {\r\n        margin-bottom: $loader-size/2;\r\n        border: 3px solid rgba(0, 0, 0, 0.2);\r\n        border-left-color: $check-color;\r\n        position: relative;\r\n        display: inline-block;\r\n        vertical-align: top;\r\n        border-radius: 50%;\r\n        width: $loader-size;\r\n        height: $loader-size;\r\n        border-color: $check-color;\r\n        transition: border 1s ease-out;\r\n\r\n        .checkmark {            \r\n            &:after {\r\n              opacity: 1;\r\n              height: $check-height;\r\n              width: $check-width;\r\n              transform-origin: left top;\r\n              border-right: $check-thickness solid $check-color;\r\n              border-top: $check-thickness solid $check-color;\r\n              content: '';\r\n              left: $check-left;\r\n              top: $check-height;\r\n              position: absolute;\r\n              animation-duration: 800ms;\r\n              animation-timing-function: ease;\r\n              animation-name: checkmark;\r\n              transform: scaleX(-1) rotate(135deg);\r\n            }\r\n        }\r\n    }\r\n\r\n    .item {\r\n        font-size: 1em;\r\n    }\r\n}\r\n\r\n@keyframes checkmark {\r\n    0% {\r\n      height: 0;\r\n      width: 0;\r\n      opacity: 1;\r\n    }\r\n    20% {\r\n      height: 0;\r\n      width: $check-width;\r\n      opacity: 1;\r\n    }\r\n    40% {\r\n      height: $check-height;\r\n      width: $check-width;\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      height: $check-height;\r\n      width: $check-width;\r\n      opacity: 1;\r\n    }\r\n}",
                    "styleUrl": "./payment-success.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "shoppingCartStateService",
                        "type": "ShoppingCartStateService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingCartStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"container\">\r\n    <div class=\"title\">{{ metadata && metadata.section }}</div>\r\n\r\n    <div class=\"success-circle\">\r\n        <div class=\"checkmark\"></div>\r\n    </div>\r\n\r\n    <div *ngIf=\"paymentResponse\" class=\"item\">{{metadata && metadata.transactionId && metadata.transactionId.label}}: {{paymentResponse.orderNumber}}</div>\r\n    <div *ngIf=\"paymentResponse\" class=\"item\">{{metadata && metadata.bankRefNumber && metadata.bankRefNumber.label}}: {{paymentResponse.bankReferenceNumber}}</div>\r\n</div>"
        },
        {
            "name": "PreviewComponent",
            "id": "component-PreviewComponent-fb8deb5b24fe2da2afc808efc98fd7f6",
            "file": "projects/checkout/src/lib/components/child-components/preview/preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-checkout-preview-component",
            "styleUrls": [
                "./preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "acceptance",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "appliedPromotions",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "availableLoyaltyPoints",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "currencySymbol",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "currentOrderLoyaltyPointsGain",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "deliveryAddress",
                    "type": "Address",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deliveryCharge",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "items",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loyaltyPoints",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "loyaltyPointsRedeem",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "minimumOrderValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "orderSubTotal",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "payuMode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pointsToRedeem",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pointsToRedeem'"
                        }
                    ]
                },
                {
                    "name": "promotions",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "slot",
                    "type": "AvailableSlot",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "usePaymentTestData",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateDeliveryCharge",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "calculatePromotionDiscount",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 128,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "getPointsToRedeem",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 110
                },
                {
                    "name": "handleInvalidRedeemPoints",
                    "args": [
                        {
                            "name": "e",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onContinueClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "processPaymentResponse",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, ViewChild } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { CheckoutStateService } from '../../../services/checkout-state.service';\r\nimport { Address, AvailableSlot, BaseComponent, ConfigService, DataStoreService, HttpStatusCode, RouteKeys, WINDOW } from '@common/src/public-api';\r\nimport { PaymentService } from '@checkout/src/lib/services/payment.service';\r\nimport { from } from 'rxjs';\r\nimport { delay, first } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-checkout-preview-component',\r\n    templateUrl: './preview.component.html',\r\n    styleUrls: ['./preview.component.scss']\r\n})\r\nexport class PreviewComponent extends BaseComponent {\r\n    private payuMode: string;\r\n    private usePaymentTestData: boolean;\r\n\r\n    @ViewChild('pointsToRedeem') pointsToRedeem: HTMLInputElement;\r\n\r\n    deliveryAddress: Address;\r\n    metadata: any;\r\n    items: Array<{title: string, quantity: number, totalPrice: string, price: string, country: string, imageSrc: string}>\r\n    slot: AvailableSlot;\r\n    acceptance: any;\r\n    currencySymbol: string;\r\n    orderSubTotal: string;\r\n    deliveryCharge: string;\r\n    minimumOrderValue: string;\r\n    promotions: string;\r\n    appliedPromotions: Array<any>; //TODO \r\n    availableLoyaltyPoints: number;\r\n    currentOrderLoyaltyPointsGain: number;\r\n    loyaltyPointsRedeem: number = 0;\r\n    errors: Array<any> = [];\r\n    loyaltyPoints: boolean;\r\n\r\n    constructor(\r\n        private checkoutStateService: CheckoutStateService,\r\n        private paymentService: PaymentService,\r\n        private activatedRoute: ActivatedRoute,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n        dataStoreService: DataStoreService,\r\n        configService: ConfigService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n        const configuration = configService.getConfiguration();\r\n        this.currencySymbol = configuration.currencySymbol;\r\n        this.payuMode = configuration.payuMode;\r\n        this.usePaymentTestData =  configuration.usePaymentTestData;\r\n        this.loyaltyPoints = configuration.loyaltyPoints;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        await this.checkoutStateService.setState();\r\n\r\n        this.availableLoyaltyPoints = this.loyaltyPoints ? this.activatedRoute.snapshot.data.loyalty.points : 0;\r\n        this.deliveryAddress = this.checkoutStateService.selectedAddress;\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['Checkout'].preview;\r\n        this.acceptance = this.activatedRoute.snapshot.data.metadata['Checkout'].acceptance;\r\n        this.items = this.checkoutStateService.items;\r\n        this.slot = this.checkoutStateService.selectedSlot;\r\n        this.minimumOrderValue = Number(this.activatedRoute.snapshot.data.deliveryOptions.freeDeliveryMinOrderValue).toFixed(2);\r\n        this.orderSubTotal = this.items.map(i => Number(i.totalPrice)).reduce((acc, item) => acc + item).toFixed(2);\r\n        this.deliveryCharge = this.calculateDeliveryCharge();\r\n        this.promotions = this.calculatePromotionDiscount();\r\n        this.currentOrderLoyaltyPointsGain = Math.floor(Number(this.orderTotal) / 100);\r\n    }\r\n\r\n    async onContinueClick(): Promise<void> {\r\n        try {\r\n            const response = await this.paymentService.initiatePayment(\r\n                this.checkoutStateService.selectedAddress._id,\r\n                Number(this.orderTotal), this.loyaltyPointsRedeem, []);\r\n\r\n            if (this.payuMode !== 'redirect') {\r\n                const handler = { responseHandler: (BOLT: any) => this.processPaymentResponse(BOLT.response) };\r\n                if (!this.usePaymentTestData) {\r\n                    // @ts-ignore\r\n                    bolt.launch(response, handler);\r\n                } else {\r\n                    this.processPaymentResponse(this.paymentTestData);\r\n                }\r\n            } else {\r\n                if (!this.usePaymentTestData) {\r\n                    this.window.location.href = response.url;\r\n                } else {\r\n                    this.processPaymentResponse(this.paymentTestData);\r\n                }\r\n            }\r\n        } catch(e) {\r\n            if (e.status === HttpStatusCode.BadRequest && e.error.name === 'InvalidRedeemPoints') {\r\n                this.handleInvalidRedeemPoints(e);\r\n            } else {\r\n                this.router.navigateByUrl(RouteKeys.ErrorPayment);\r\n            }\r\n        }\r\n        await Promise.resolve();\r\n    }\r\n\r\n    get orderTotal(): string {\r\n        return (Number(this.orderSubTotal) + Number(this.deliveryCharge) - Number(this.promotions) - Number(this.loyaltyPointsRedeem)).toFixed(2);\r\n    }\r\n    \r\n    get hasErrors(): boolean {\r\n        return this.errors.length > 0;\r\n    }\r\n\r\n    getPointsToRedeem(): string {\r\n        if (!this.loyaltyPoints) return Number(0).toFixed(2);\r\n\r\n        let value = Number(this.loyaltyPointsRedeem);\r\n\r\n        if (isNaN(value)) return Number(0).toFixed(2);\r\n        if (value < 0) { \r\n            value = 0;\r\n            this.loyaltyPointsRedeem = value;\r\n        }\r\n        if (value > this.availableLoyaltyPoints) {\r\n             value = this.availableLoyaltyPoints;\r\n             this.loyaltyPointsRedeem = value;\r\n        }\r\n\r\n        return value.toFixed(2)\r\n    }\r\n\r\n    protected async destroy(): Promise<void> {\r\n        await this.checkoutStateService.clearState();\r\n    }\r\n\r\n    private calculateDeliveryCharge(): string {\r\n        return Number(this.minimumOrderValue) < Number(this.orderSubTotal) ? Number(0).toFixed(2) : Number(80).toFixed(2);\r\n    }\r\n\r\n    private calculatePromotionDiscount(): string {\r\n        return Number(0).toFixed(2);\r\n    }\r\n\r\n    private get paymentTestData(): any {\r\n        return { \"country\":\"\",\"udf10\":\"\",\"discount\":\"0.00\",\"mode\":\"CC\",\"cardhash\":\"This field is no longer supported in postback params.\",\"error_Message\":\"No Error\",\"state\":\"\",\"bankcode\":\"VISA\",\"txnid\":\"5fc2f966db5b3530fa8e62c5\",\"surl\":\"\\\"https://localhost/api/v1.0/payment/success\",\"net_amount_debit\":\"718.1\",\"lastname\":\"\",\"zipcode\":\"\",\"phone\":\"7595473800\",\"productinfo\":\"Amreet Bazaar\",\"hash\":\"75df2682552ede255c319cc4f91dfe3085fef702ada35e11692805fb5ac2aec9d37792bfd0326c2ddf7acf64423654b06964dff03877d7f88408157a4c271321\",\"status\":\"success\",\"firstname\":\"Anis\",\"city\":\"\",\"isConsentPayment\":\"0\",\"error\":\"E000\",\"addedon\":\"2020-11-29 07:02:18\",\"udf9\":\"\",\"udf7\":\"\",\"udf8\":\"\",\"encryptedPaymentId\":\"06C42458D8053DCFB563A79DA137B796\",\"bank_ref_num\":\"326518227617874\",\"key\":\"LJRhtlC8\",\"email\":\"batliwalaa@hotmail.com\",\"amount\":\"718.10\",\"unmappedstatus\":\"captured\",\"address2\":\"\",\"payuMoneyId\":\"250668230\",\"address1\":\"\",\"udf5\":\"BOLT_KIT_NODE_JS\",\"mihpayid\":\"9084082488\",\"udf6\":\"\",\"udf3\":\"\",\"udf4\":\"\",\"udf1\":\"\",\"udf2\":\"\",\"giftCardIssued\":\"true\",\"field1\":\"548471327917\",\"cardnum\":\"401200XXXXXX1112\",\"field7\":\"AUTHPOSITIVE\",\"field6\":\"\",\"furl\":\"\\\"https://localhost/api/v1.0/payment/failure\",\"field9\":\"\",\"field8\":\"\",\"amount_split\":\"{\\\"PAYU\\\":\\\"718.10\\\"}\",\"field3\":\"326518227617874\",\"field2\":\"749779\",\"field5\":\"05\",\"PG_TYPE\":\"HDFCPG\",\"field4\":\"dTdEUnV5RGgwa3lNV3VWblMyZFM=\",\"name_on_card\":\"Test\",\"txnStatus\":\"SUCCESS\",\"txnMessage\":\"Transaction Successful\" };\r\n    }\r\n\r\n    private processPaymentResponse(data: any): void {\r\n        this.paymentService.paymentResponse(data).subscribe((result: any) => {\r\n            if (result.status !== 'PaymentCancelled') {\r\n                this.dataStoreService.push('payment-result', result);                        \r\n                const url = (result.status === 'PaymentSuccess' ? RouteKeys.PaymentSuccess : RouteKeys.PaymentFailure);\r\n                this.router.navigate([url]);\r\n            }                        \r\n        }, (e: any) => {\r\n            if (e.status === HttpStatusCode.BadRequest && e.error.name === 'InvalidRedeemPoints') {\r\n                this.handleInvalidRedeemPoints(e);                \r\n            } else {\r\n                this.dataStoreService.push('payment-result', e);\r\n                this.router.navigate([RouteKeys.PaymentFailure]);\r\n            }\r\n        });\r\n    }\r\n\r\n    private handleInvalidRedeemPoints(e: any): void {\r\n        this.errors.push({ key: 'Invalid redeem points', error: 'Please enter points to redeem' });\r\n        this.availableLoyaltyPoints = e.error.availablePoints;\r\n        this.loyaltyPointsRedeem = 0;\r\n        this.pointsToRedeem.focus();\r\n        from([0]).pipe(delay(3000), first()).subscribe(_ => this.errors = []);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    margin-bottom: 40px;\r\n\r\n    .error {\r\n        margin-bottom: 20px;\r\n    }\r\n\r\n    .value {\r\n        color: #aa1b04;\r\n        font-weight: normal;\r\n    }\r\n\r\n    .title {\r\n        margin: 16px 0;\r\n        color: #555;\r\n        font-size: 1.5em;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .section-title {\r\n        font-size: 1.1em;\r\n        font-weight: bold;\r\n        margin-bottom: 7px;\r\n        color: $mobile-regular-color;        \r\n    }\r\n\r\n    .address-slot-section {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        justify-content: stretch;\r\n        justify-items: stretch;\r\n        align-items: stretch;\r\n        row-gap: 20px;\r\n        margin-bottom: 20px;\r\n\r\n        .item {\r\n            font-size: 1rem;\r\n            line-height: 1.2rem;\r\n            color: #777;\r\n        }\r\n\r\n        .free {\r\n            color: $success-text-color;\r\n        }\r\n    }\r\n\r\n    .order-items-section {\r\n        margin-bottom: 20px;\r\n\r\n        ul {\r\n            font-size: small;\r\n            color: #777;\r\n\r\n            li {\r\n                display: grid;\r\n                grid-auto-flow: column;\r\n                grid-template-columns: 50px auto;\r\n                column-gap: 10px;\r\n                border: 1px solid transparent;\r\n                border-top: 1px solid #f1f1f1;\r\n                padding: 10px;\r\n\r\n                &:first-child {\r\n                    border-top: 1px solid transparent;\r\n                }\r\n\r\n                div {\r\n                    justify-self: left;\r\n                    align-self: center;\r\n\r\n                    &.item-description {\r\n                        font-size: 0.9rem;;\r\n                    }\r\n\r\n                    img {\r\n                        width: 50px;\r\n                    }\r\n    \r\n                    span {\r\n                        display: block;\r\n                        line-height: 17px;\r\n                    }\r\n                }                \r\n            }\r\n        }\r\n    }\r\n\r\n    .order-loyalty-section {        \r\n        margin-bottom: 20px;\r\n        border: 1px solid transparent;\r\n        border-top: 1px solid #c0c0c0;\r\n        border-bottom: 1px solid #c0c0c0;\r\n        padding: 11px;\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        row-gap: 20px;\r\n\r\n        .order-total-section {\r\n            text-align: right;\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: auto 80px;\r\n\r\n            div:last-child,\r\n            div.total {\r\n                margin-top: 10px;\r\n            }\r\n        }\r\n\r\n        .loyalty-gained-section {\r\n            color: #777;\r\n\r\n            .points-gain {\r\n                span {\r\n                    color: $success-text-color;\r\n                }\r\n            }\r\n        }\r\n\r\n        div {\r\n            font-size: 0.85em;\r\n            line-height: 17px;\r\n\r\n            &.delivery-charge,\r\n            &.points-to-redeem,\r\n            &.total,\r\n            &.sub-total {\r\n                font-weight: bold;\r\n                color: #777;\r\n            }\r\n\r\n            &.points-to-redeem {\r\n                input {\r\n                    border: 1px solid #c0c0c0;\r\n                    height: 20px;\r\n                    width: 45px;\r\n                    font-size: 1em;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    .change {\r\n        margin: 20px;\r\n        font-size: 0.9em;\r\n        font-weight: 500;\r\n        color: $mobile-regular-color;\r\n        cursor: pointer;\r\n        color: blue;\r\n\r\n        a:hover {\r\n            text-decoration: underline;\r\n        }\r\n    }\r\n\r\n    .btn {\r\n        margin-bottom: 40px;\r\n    }\r\n\r\n    .acceptance {\r\n        margin-top: 20px;\r\n        font-size: 0.8em;\r\n        padding-top: 10px;\r\n        border-top: 3px solid #f1f1f1;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .address-slot-section {\r\n        grid-auto-flow: column;\r\n        row-gap: unset;\r\n        grid-template-columns: 1fr 1fr;\r\n        \r\n        ui-address-preview-component {\r\n            .address {\r\n                ::ng-deep & {\r\n                    justify-self: left;\r\n                }                \r\n            }\r\n        }\r\n\r\n        .slot {\r\n            justify-self: end;\r\n        }\r\n    }\r\n\r\n    .order-loyalty-section {\r\n        grid-auto-flow: column;\r\n        row-gap: unset;\r\n        grid-template-columns: auto 200px;\r\n    }\r\n}",
                    "styleUrl": "./preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService"
                    },
                    {
                        "name": "paymentService",
                        "type": "PaymentService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "checkoutStateService",
                        "type": "CheckoutStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paymentService",
                        "type": "PaymentService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "orderTotal": {
                    "name": "orderTotal",
                    "getSignature": {
                        "name": "orderTotal",
                        "type": "string",
                        "returnType": "string",
                        "line": 102
                    }
                },
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 106
                    }
                },
                "paymentTestData": {
                    "name": "paymentTestData",
                    "getSignature": {
                        "name": "paymentTestData",
                        "type": "any",
                        "returnType": "any",
                        "line": 140
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"metadata\">\r\n    <div class=\"container\">\r\n        <div class=\"title\">{{ metadata.section }}</div>\r\n\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n        </div>\r\n        \r\n        <div class=\"address-slot-section\">\r\n            <ui-address-preview-component [metadata]=\"metadata\" [deliveryAddress]=\"deliveryAddress\"></ui-address-preview-component>\r\n            \r\n\r\n            <div class=\"slot\">\r\n                <div class=\"section-title\">{{metadata.delivery && metadata.delivery.label}}</div>\r\n                <div class=\"item\">Delivery date: {{slot.deliveryDate | date}}</div>\r\n                <div class=\"item\">Delivery slot: {{slot.startTime}}:00 - {{slot.endTime}}:00</div>\r\n                <div class=\"item\">\r\n                    {{metadata.minimumOrder && metadata.minimumOrder.label}} \r\n                    <span class=\"free\">{{metadata.free && metadata.free.label}} {{metadata.delivery && metadata.delivery.label}}:</span> \r\n                    <span class=\"value\">{{currencySymbol}}{{minimumOrderValue}}</span>                     \r\n                </div>\r\n                <div class=\"item\">{{metadata.deliveryCharge && metadata.deliveryCharge.label }}: <span class=\"value\">{{currencySymbol}}{{deliveryCharge}}</span></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"order-items-section\">\r\n            <div class=\"section-title\">{{metadata.orderItems && metadata.orderItems.label}}</div>            \r\n            <ng-container *ngTemplateOutlet=\"changeTemplate\"></ng-container>\r\n            <ul class=\"items\">\r\n                <li *ngFor=\"let item of items\">\r\n                    <div class=\"item-image\">\r\n                        <img [src]=\"item.imageSrc\">\r\n                    </div>\r\n                    <div class=\"item-description\">\r\n                        <span>{{item.title}}</span>\r\n                        <span><label class=\"value\">{{currencySymbol}}{{item.totalPrice}} ({{currencySymbol}}{{item.price}} /1 item)</label> - Quantity: {{item.quantity}}</span>\r\n                        <span>Country of origin: {{item.country}}</span>\r\n                        <span>{{metadata.taxInformation && metadata.taxInformation.label}}</span>\r\n                    </div>                    \r\n                </li>\r\n            </ul>\r\n            <ng-container *ngTemplateOutlet=\"changeTemplate\"></ng-container>\r\n        </div>\r\n\r\n        <div class=\"order-loyalty-section\">\r\n            <div class=\"loyalty-gained-section\">\r\n                <div class=\"points-gain\" *ngIf=\"loyaltyPoints\">{{metadata.loyaltyPointsGain && metadata.loyaltyPointsGain.label}}: <span class=\"\">{{currentOrderLoyaltyPointsGain}} points</span></div>\r\n                <div class=\"loyalty-info\" *ngIf=\"loyaltyPoints\">{{metadata.loyaltyPointsInfo && metadata.loyaltyPointsInfo.label}}</div>\r\n            </div>\r\n            <div class=\"order-total-section\">\r\n                <div class=\"sub-total\">{{metadata.subtotal && metadata.subtotal.label}}:</div>\r\n                <div class=\"value\">{{orderSubTotal}}</div>\r\n                <div class=\"delivery-charge\">{{metadata.deliveryCharge && metadata.deliveryCharge.label}}:</div>\r\n                <div class=\"value\">{{deliveryCharge}}</div>\r\n                <ng-container *ngIf=\"availableLoyaltyPoints > 0\">\r\n                    <div class=\"points-to-redeem\">\r\n                        {{availableLoyaltyPoints}} points\r\n                    </div>\r\n                    <div class=\"value\"></div>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"availableLoyaltyPoints > 0\">\r\n                    <div class=\"points-to-redeem\">\r\n                        {{metadata.pointsToRedeem && metadata.pointsToRedeem.label}}: <input #pointsToRedeem type=\"number\" min=\"0\" [max]=\"availableLoyaltyPoints\" [(ngModel)]=\"loyaltyPointsRedeem\" />\r\n                    </div>\r\n                    <div class=\"value\">-{{getPointsToRedeem()}}</div>\r\n                </ng-container>\r\n                <div class=\"total\">{{metadata.total && metadata.total.label}}:</div>\r\n                <div class=\"value\">{{currencySymbol}}{{orderTotal}}</div>\r\n            </div>\r\n        </div>\r\n\r\n        <button\r\n            uiRecaptcha\r\n            [action]=\"metadata && metadata.continue && metadata.continue.action\"\r\n            class=\"btn btn-primary\"\r\n            (execute)=\"onContinueClick()\"\r\n        >\r\n            {{ metadata && metadata.continue && metadata.continue.label }}\r\n        </button>\r\n\r\n        <ng-container *ngIf=\"acceptance && acceptance.statement\">\r\n            <div class=\"acceptance\">\r\n                <ng-container *ngTemplateOutlet=\"statementTemplate; context: acceptance\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #changeTemplate>\r\n    <div class=\"change\">\r\n        <a [routerLink]=\"['/shoppingcart']\">{{metadata.change && metadata.change.label}}</a>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>\r\n"
        },
        {
            "name": "PricingComponent",
            "id": "component-PricingComponent-c9e463da70b155e5c13015a74a358a0e",
            "file": "projects/content/src/lib/components/pricing/pricing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-pricing-component",
            "styleUrls": [
                "./pricing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pricing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "pricing",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDiscountPercent",
                    "args": [
                        {
                            "name": "discount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "discount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toFixed",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-pricing-component',\r\n    templateUrl: './pricing.component.html',\r\n    styleUrls: ['./pricing.component.scss'],\r\n})\r\nexport class PricingComponent {\r\n    @Input() pricing: any;\r\n    @Input() metadata: any;\r\n\r\n    getDiscountPercent(discount: number): string {\r\n        if (discount === 0 || discount === null || isNaN(discount)) {\r\n            return '';\r\n        }\r\n\r\n        return `(${discount}%)`;\r\n    }\r\n\r\n    toFixed(value: number): string {\r\n        if (value) {\r\n            return value.toFixed(2);\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.pricing-container {\r\n    color: #aa1b04;\r\n    font-size: $font-size;\r\n    font-weight: 500;\r\n    line-height: 14px;\r\n\r\n    .pricing-item {\r\n        .taxes-inclusive,\r\n        .list {\r\n            color: $footertop-background-color;\r\n            text-decoration: line-through;\r\n            font-weight: 400;\r\n            font-size: $font-size;\r\n            margin-left: 5px;\r\n\r\n            .currency-symbol {\r\n                vertical-align: baseline;\r\n            }\r\n        }\r\n        .taxes-inclusive {\r\n            margin-left: 0;\r\n            margin-bottom: 2px;\r\n            text-decoration: none;\r\n            font-size: 0.9em;\r\n            display: block;\r\n        }\r\n\r\n        .save {\r\n            font-size: $font-size;\r\n            color: $mobile-regular-color;\r\n            text-transform: lowercase;\r\n            margin-right: 5px;\r\n        }\r\n\r\n        .price-save {\r\n            font-size: $font-size;\r\n\r\n            .currency-symbol {\r\n                vertical-align: baseline;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./pricing.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"pricing-container\">\r\n    <div class=\"pricing-item\">\r\n        <span class=\"taxes-inclusive\">({{ metadata && metadata.taxesInclusive && metadata.taxesInclusive.label }})</span>\r\n        <span class=\"retail\"><span class=\"currency-symbol\">&#x20B9;</span>{{ toFixed(pricing.retail) }}</span>\r\n        <span class=\"list\"><span class=\"currency-symbol\">&#x20B9;</span>{{ toFixed(pricing.list) }}</span>\r\n    </div>\r\n    <div class=\"pricing-item\">\r\n        <span class=\"save\">{{ metadata && metadata.savings && metadata.savings.label }}:</span>\r\n        <span class=\"price-save\">\r\n            <span class=\"currency-symbol\">&#x20B9;</span>\r\n            {{toFixed(pricing.savings)}} {{getDiscountPercent(pricing.discountPercent)}}\r\n        </span>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ProceedToBuyComponent",
            "id": "component-ProceedToBuyComponent-799363b20e19758c8939689cb408e08f",
            "file": "projects/content/src/lib/components/shopping-cart/child-components/proceed-to-buy/proceed-to-buy.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-proceed-to-buy",
            "styleUrls": [
                "./proceed-to-buy.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./proceed-to-buy.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 15,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currencySymbol",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalQty",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalToPay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "buyNowClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "refreshCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport {  Router } from '@angular/router';\r\n\r\nimport { BaseComponent, ConfigService, NavigationService, RouteKeys, ShoppingCartStateService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-proceed-to-buy',\r\n    templateUrl: './proceed-to-buy.component.html',\r\n    styleUrls: ['./proceed-to-buy.component.scss'],\r\n})\r\nexport class ProceedToBuyComponent extends BaseComponent {\r\n    totalToPay: string;\r\n    totalQty = 0;\r\n    currencySymbol: string;\r\n    @Input() metadata: any;\r\n\r\n    constructor(\r\n        private shoppingcartStateService: ShoppingCartStateService,\r\n        private navigationService: NavigationService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        configService: ConfigService\r\n    ) {\r\n        super(router, window);\r\n        \r\n        this.currencySymbol = configService.getConfiguration().currencySymbol;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.refreshCart();\r\n\r\n        this.shoppingcartStateService.cartStateChange.subscribe((state) => {\r\n            if (state) {\r\n                this.refreshCart();\r\n            }\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private refreshCart(): void {\r\n        let total = 0;\r\n        let qty = 0;\r\n\r\n        this.shoppingcartStateService.groupBasketItems.subscribe((s) => {\r\n            s.forEach((i) => {\r\n                total += i.quantity * i.pricing.retail;\r\n                qty += i.quantity;\r\n            });\r\n\r\n            this.totalToPay = (Math.round(total * 100) / 100).toFixed(2);\r\n            this.totalQty = qty;\r\n        });\r\n    }\r\n\r\n    public async buyNowClick(): Promise<void> {\r\n        await this.navigationService.clear();\r\n        await this.navigationService.navigateForUrl(RouteKeys.Checkout);\r\n        // this.router.navigate([RouteKeys.Checkout]);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    .basket-total {\r\n        color: $price-color;\r\n\r\n        .currency-symbol {\r\n            vertical-align: baseline;\r\n            font-weight: 500;\r\n        }\r\n\r\n        span:first-child {\r\n            color: $mobile-regular-color;\r\n        }\r\n    }\r\n\r\n    .btn {\r\n        margin-top: 7px;\r\n        font-size: 1em;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: 450px) {\r\n    .container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-end;\r\n\r\n        .basket-total {\r\n            padding-top: 8px;\r\n        }\r\n\r\n        .btn {\r\n            width: 190px;\r\n            align-self: flex-end;\r\n            margin-left: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./proceed-to-buy.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"container\">\r\n    <div class=\"basket-total\">\r\n        <span\r\n            >{{ metadata && metadata.itemsTotal && metadata.itemsTotal.label }} ({{ totalQty }}\r\n            {{ metadata && metadata.items && metadata.items.label }}):\r\n        </span>\r\n        <span class=\"currency-symbol\">{{ currencySymbol }}</span>\r\n        <span>{{ totalToPay }}</span>\r\n    </div>\r\n    <button class=\"btn btn-primary\" (click)=\"buyNowClick()\">\r\n        {{ metadata && metadata.proceedToBuy && metadata.proceedToBuy.label }}\r\n    </button>\r\n</div>\r\n"
        },
        {
            "name": "ProfileChangeComponent",
            "id": "component-ProfileChangeComponent-9d99dce2c187e2cbdc867142a1498dea",
            "file": "projects/customer/src/lib/components/account/profile/child-components/profile-change/profile-change.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-account-profile-change",
            "styleUrls": [
                "./profile-change.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-change.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 38,
                    "type": "any"
                },
                {
                    "name": "profile",
                    "line": 37,
                    "type": "any"
                },
                {
                    "name": "type",
                    "line": 36,
                    "type": "ProfileChangeProperty"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "resendOtp",
                    "defaultValue": "new EventEmitter<ProfileChangeProperty>()",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkAllInputs",
                    "type": "CheckAllInputsValidDirective",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CheckAllInputsValidDirective"
                        }
                    ]
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "emailControl",
                    "type": "TextboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'emailControl'"
                        }
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "expired",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "ignoreMediaQueries",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isoNumbers",
                    "defaultValue": "[{ id: '+91', value: 'IN +91' }]",
                    "type": "Array<ILookup>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "mobileControl",
                    "type": "TextboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mobileControl'"
                        }
                    ]
                },
                {
                    "name": "model",
                    "defaultValue": "{ isoCode: '+91' }",
                    "type": "ProfileChange",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "verificationFailure",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "changeProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 142,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onResendClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onSubmitClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "input",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setState",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateOldWithNewValues",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Inject, Input, Output, ViewChild } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { delay, first, takeUntil } from \"rxjs/operators\";\r\n\r\nimport { \r\n    BaseComponent,\r\n    CheckAllInputsValidDirective,\r\n    DataStoreService,\r\n    HttpStatusCode,\r\n    IInputValue,\r\n    ILookup,\r\n    NavigationService,\r\n    NotificationService,\r\n    RouteKeys,\r\n    TextboxComponent,\r\n    VerificationService,\r\n    VerificationType,\r\n    WINDOW\r\n} from \"@common/src/public-api\";\r\nimport { ProfileChange } from \"../../models/profile-change.model\";\r\nimport { CustomerService } from \"@customer/src/lib/services/customer.service\";\r\nimport { ProfileChangeProperty } from \"../../../../../../../../typings/custom\";\r\nimport { from } from \"rxjs\";\r\nimport { NotificationMessageKeys } from \"@common/src/lib/constants/notification.message.keys\";\r\n\r\n\r\n@Component({\r\n    selector: 'ui-account-profile-change',\r\n    templateUrl: './profile-change.component.html',\r\n    styleUrls: ['./profile-change.component.scss']\r\n})\r\nexport class ProfileChangeComponent extends BaseComponent implements AfterViewInit {\r\n    @Output() cancel = new EventEmitter<void>();\r\n    @Output() resendOtp = new EventEmitter<ProfileChangeProperty>();\r\n\r\n    @Input() type: ProfileChangeProperty;\r\n    @Input() profile: any;\r\n    @Input() metadata: any;\r\n    \r\n    @ViewChild(CheckAllInputsValidDirective) checkAllInputs: CheckAllInputsValidDirective;\r\n    @ViewChild('emailControl') emailControl: TextboxComponent;\r\n    @ViewChild('mobileControl') mobileControl: TextboxComponent;\r\n\r\n    isValid: boolean;\r\n    ignoreMediaQueries: boolean;\r\n    model: ProfileChange = { isoCode: '+91' };\r\n    isoNumbers: Array<ILookup> = [{ id: '+91', value: 'IN +91' }];\r\n    errors: Array<any> = [];\r\n    verificationFailure: boolean;\r\n    expired: boolean;\r\n    \r\n    private debug: boolean = false;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        dataStoreService: DataStoreService,\r\n        private verificationService: VerificationService,\r\n        private customerService: CustomerService,\r\n        private navigationService: NavigationService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    get hasErrors(): boolean {\r\n        return this.errors.length > 0;\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        this.checkAllInputs.validationStateChange.pipe(takeUntil(this.$destroy)).subscribe((state: any) => {\r\n            this.isValid = state;\r\n        });\r\n\r\n        this.model.type = this.type;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public async onValueChange(input: IInputValue): Promise<void> {\r\n        this.model[input.name] = input.value;\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onCancelClick(): Promise<void> {\r\n        this.errors = [];\r\n        this.model = { isoCode: '+91' };\r\n        this.cancel.emit();\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onResendClick(): Promise<void> {\r\n        this.resendOtp.emit(this.type);\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onSubmitClick(): Promise<void> {\r\n        if (this.isValid && this.validateOldWithNewValues()) {\r\n            try {\r\n                await this.verificationService.verifyProfileChangeOtp(this.model.otp, this.model.type);\r\n                await this.changeProfile();\r\n            } catch(e){\r\n                if (e.status === HttpStatusCode.BadRequest && e.error && e.error.state === 'Expired') {\r\n                    this.setState('expired');\r\n                } else {\r\n                    this.setState('failure');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private setState(state: string): void {\r\n        this.verificationFailure = this.debug || state === 'failure';\r\n        this.expired = this.debug || state === 'expired';\r\n    }\r\n\r\n    private validateOldWithNewValues(): boolean {\r\n        let valid = true;\r\n        if (this.model.type === 'Email') {            \r\n            valid = this.profile.emailId !== this.model.email;\r\n\r\n            if (!valid) {\r\n                this.emailControl.focus();\r\n                this.errors.push({ key: 'Email', error: 'current and new email id cannot be same. '})\r\n            }\r\n        } else {\r\n            valid = this.profile.mobile !== this.model.mobile;\r\n\r\n            if (!valid) {\r\n                this.mobileControl.focus();\r\n                this.errors.push({ key: 'Mobile', error: 'current and new mobile cannot be same. '})\r\n            }\r\n        }\r\n\r\n        if(!valid) {\r\n            from([0]).pipe(delay(30000), first()).subscribe(_ => this.errors = []);\r\n        }\r\n\r\n        return valid;\r\n    }\r\n\r\n    private async changeProfile(): Promise<void> {\r\n        try {\r\n            await this.customerService.tempProfileChange(this.type, (this.type === 'Email' ? this.model.email : this.model.mobile));\r\n            await this.dataStoreService.push('verify-otp', {\r\n                isoCode: (this.type === 'Email' ? null : this.model.isoCode),\r\n                mobile: (this.type === 'Email' ? null : this.model.mobile),\r\n                email: (this.type === 'Email' ? this.model.email : null),\r\n                currentEmailID: (this.type === 'Email' ? this.profile.emailId : null),\r\n                verificationType: VerificationType.ProfileChange,\r\n            });\r\n            await this.onCancelClick();\r\n            \r\n            this.navigationService.navigateForUrl(RouteKeys.VerifyOtp, this.currentPage, true);\r\n\r\n        } catch (e) {\r\n            if (e.status === HttpStatusCode.BadRequest) {\r\n                // TODO: show error message\r\n            } else {\r\n                this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n            }\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n\r\n    &.desktop-container {\r\n        --buttons-grid-template-columns: 1fr 1fr 1fr;\r\n    }\r\n\r\n    &.mobile-container {\r\n        --buttons-grid-template-columns: 1fr;\r\n    }\r\n\r\n    .buttons {\r\n        width: 100%;\r\n        display: grid;\r\n        grid-template-columns: var(--buttons-grid-template-columns);\r\n        column-gap: 10px;\r\n        row-gap: 10px;\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .mobile-number {\r\n        display: grid;\r\n        grid-template-columns: 80px auto;\r\n        margin-top: 13px;\r\n\r\n        ui-dropdown-component {\r\n            select {\r\n                ::ng-deep & {\r\n                    padding-left: 1px;\r\n                }\r\n            }\r\n\r\n            label {\r\n                ::ng-deep & {\r\n                    padding-left: 7px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .row {\r\n        &.message {\r\n            height: 2rem;\r\n            margin: 5px 0;\r\n            background-color: #fff3ee;\r\n            padding: 8px 11px;\r\n            font-size: 0.8rem;\r\n            font-weight: 600;\r\n            color: #d08e94;\r\n        }\r\n\r\n        &.description {\r\n            margin-top: 20px;\r\n            font-size: 0.9em;\r\n            color: $mobile-regular-color;\r\n\r\n            .email,\r\n            .mobile {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n    }\r\n\r\n    .verification-failure,\r\n    .acceptance {\r\n        margin-top: 20px;\r\n        font-size: 0.8em;\r\n    }\r\n\r\n    .expired,\r\n    .verification-failure {\r\n        font-size: 0.9em;\r\n    }\r\n\r\n    .expired {\r\n        margin-top: 20px;\r\n        line-height: 23px;\r\n        color: $error-text-color;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .verification-failure {\r\n        .failure {\r\n            ::ng-deep & {\r\n                color: $error-text-color;\r\n                font-weight: bold;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
                    "styleUrl": "./profile-change.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "customerService",
                        "type": "CustomerService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customerService",
                        "type": "CustomerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 66
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"type\">\r\n    <div uiCheckAllInputsValid class=\"container\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile}\">\r\n        <div class=\"error\" [hidden]=\"!hasErrors\">\r\n            <span>{{ metadata && metadata.errorHeader && metadata.errorHeader.label }}</span>\r\n            <span *ngFor=\"let e of errors\">{{ e.key | titlecase }}: {{ e.error }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"type === 'Email'\">\r\n            <ng-container *ngTemplateOutlet=\"emailTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"type === 'Mobile'\">\r\n            <ng-container *ngTemplateOutlet=\"mobileTemplate\"></ng-container>\r\n        </ng-container>\r\n\r\n        <div class=\"row description\">\r\n            <span>{{ metadata && metadata.description && metadata.description.label }}</span>\r\n            <span class=\"mobile\" *ngIf=\"type === 'Mobile'\">{{ profile && profile.isoCode }}{{ profile && profile.mobile}}</span>\r\n            <span class=\"email\" *ngIf=\"type === 'Email'\">{{ profile && profile.emailId}}</span>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <ui-textbox-component\r\n                (valueChange)=\"onValueChange($event)\"\r\n                [value]=\"model.otp\"\r\n                type=\"text\"\r\n                name=\"otp\"\r\n                [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n                [metadata]=\"metadata && metadata.otp\"\r\n            ></ui-textbox-component>\r\n        </div>\r\n        \r\n        <div class=\"row message\">\r\n            <span>{{metadata && metadata.otpValidMessage && metadata.otpValidMessage.label}}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"expired\">\r\n            <ng-container *ngTemplateOutlet=\"expiredTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"verificationFailure\">\r\n            <ng-container *ngTemplateOutlet=\"failureTemplate\"></ng-container>\r\n        </ng-container>\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-light btn-box-shadow\" (click)=\"onCancelClick()\">{{metadata && metadata.cancel && metadata.cancel.label}}</button>            \r\n            <button\r\n                uiRecaptcha\r\n                class=\"btn btn-light btn-box-shadow\"\r\n                (execute)=\"onResendClick()\"\r\n                [action]=\"metadata && metadata.resend && metadata.resend.action\"\r\n            >\r\n                {{metadata && metadata.resend && metadata.resend.label}}\r\n            </button>\r\n            <button\r\n                uiRecaptcha\r\n                class=\"btn btn-primary btn-box-shadow\"\r\n                (execute)=\"onSubmitClick()\"\r\n                [action]=\"metadata && metadata.submit && metadata.submit.action\"\r\n                [valid]=\"isValid\"\r\n            >\r\n                {{metadata && metadata.submit && metadata.submit.label}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n    \r\n</ng-container>\r\n\r\n<ng-template #emailTemplate>\r\n    <div class=\"row\">\r\n        <ui-textbox-component\r\n            #emailControl\r\n            (valueChange)=\"onValueChange($event)\"\r\n            [value]=\"model.email\"\r\n            type=\"text\"\r\n            name=\"email\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.email\"\r\n        ></ui-textbox-component>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #mobileTemplate>\r\n    <div class=\"row mobile-number\">\r\n        <ui-dropdown-component\r\n            (valueChange)=\"onValueChange($event)\"\r\n            [value]=\"model.isoCode\"\r\n            type=\"dropdown\"\r\n            name=\"isoCode\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [style]=\"{\r\n                'background-color': '#e1e1e1',\r\n                'border-right': '1px solid transparent'\r\n            }\"\r\n            [metadata]=\"metadata && metadata.isoCode\"\r\n            [items]=\"isoNumbers\"\r\n        >\r\n        </ui-dropdown-component>\r\n        <ui-textbox-component\r\n            #mobileControl\r\n            (valueChange)=\"onValueChange($event)\"\r\n            [value]=\"model.mobile\"\r\n            type=\"text\"\r\n            name=\"mobile\"\r\n            [ignoreMediaQueries]=\"ignoreMediaQueries\"\r\n            [metadata]=\"metadata && metadata.mobile\"\r\n        >\r\n        </ui-textbox-component>\r\n    </div>\r\n</ng-template>\r\n\r\n\r\n<ng-template #failureTemplate>\r\n    <ng-container *ngIf=\"metadata && metadata.verificationFailure && metadata.verificationFailure.statement\">\r\n        <div class=\"verification-failure\">\r\n            <ng-container *ngTemplateOutlet=\"statementTemplate; context: metadata.verificationFailure\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #expiredTemplate>\r\n    <div class=\"expired\">{{ metadata && metadata.otpExpired && metadata.otpExpired.label }}</div>\r\n</ng-template>\r\n\r\n<ng-template #statementTemplate let-statement=\"statement\">\r\n    <ui-statement-component [metadata]=\"statement\"></ui-statement-component>\r\n</ng-template>"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-a8e74ead55c5853d0391acff73b67bab",
            "file": "projects/customer/src/lib/components/account/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-profile-component",
            "styleUrls": [
                "profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "profile",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showChange",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "type": "ProfileChangeProperty",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResendOtpClick",
                    "args": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ProfileChangeProperty",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        113,
                        120
                    ],
                    "inheritance": {
                        "file": "BaseAccountComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { NotificationMessageKeys } from \"@common/src/lib/constants/notification.message.keys\";\r\n\r\nimport { DataStoreService, HistoryService, NotificationService, VerificationService, WINDOW } from \"@common/src/public-api\";\r\nimport { ProfileChangeProperty } from \"../../../../../../typings/custom\";\r\nimport { BaseAccountComponent } from \"../base-account.component\";\r\n\r\n@Component({\r\n    selector: 'ui-profile-component',\r\n    templateUrl: 'profile.component.html',\r\n    styleUrls: ['profile.component.scss']\r\n})\r\nexport class ProfileComponent extends BaseAccountComponent {\r\n    metadata: any;\r\n    profile: any;\r\n    showChange: boolean;\r\n    type: ProfileChangeProperty;\r\n    \r\n\r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        dataStoreService: DataStoreService,\r\n        historyService: HistoryService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private verificationService: VerificationService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        super (historyService, router, window, null, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata.AccountProfile;\r\n        this.profile = this.activatedRoute.snapshot.data.profile;\r\n        this.showChange = (await this.dataStoreService.get('profile-show-change', true)) ?? true;\r\n        this.type = (await this.dataStoreService.get('profile-type', true)) ?? undefined;\r\n        await super.init();\r\n    }\r\n\r\n    public async onClick(type: ProfileChangeProperty): Promise<void> {\r\n        try {\r\n            await this.verificationService.profileChangeOtp(type);\r\n\r\n            this.showChange = false;\r\n            this.type = type;\r\n            \r\n            await this.dataStoreService.push('profile-show-change', this.showChange, true);\r\n            await this.dataStoreService.push('profile-type', type, true);\r\n        } catch(e) {\r\n            this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n        }\r\n    }\r\n\r\n    public async onResendOtpClick(type: ProfileChangeProperty): Promise<void> {\r\n        try {\r\n            await this.verificationService.profileChangeOtp(type);\r\n            this.notificationService.showMessage(NotificationMessageKeys.OtpResend);\r\n        } catch(e) {\r\n            this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n        }\r\n    }\r\n\r\n    public async onCancel(): Promise<void> {\r\n        this.showChange = true;\r\n        this.type = undefined;\r\n        \r\n        await this.dataStoreService.push('profile-show-change', null, true);\r\n        await this.dataStoreService.push('profile-type', null, true);\r\n\r\n        await Promise.resolve();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n    \r\n    .mobile-container {\r\n        --profile-item-grid-auto-flow: row;\r\n        --profile-item-grid-template-columns: 1fr;\r\n        --profile-item-justify-content: stretch;\r\n        --ui-account-profile-change-grid-column-start: unset;\r\n        --ui-account-profile-change-grid-column-end: unset;\r\n        --ui-account-profile-change-padding: 0;\r\n    }\r\n\r\n    .desktop-container {\r\n        --profile-item-grid-auto-flow: row;\r\n        --profile-item-grid-template-columns: repeat(2, 1fr) 2fr;\r\n        --profile-item-justify-content: stretch;\r\n        --ui-account-profile-change-grid-column-start: 1;\r\n        --ui-account-profile-change-grid-column-end: 4;\r\n        --ui-account-profile-change-padding: 11px;\r\n    }\r\n\r\n    .header {\r\n        color: #333;\r\n        margin-top: 14px;\r\n        font-weight: 600;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .profile-container {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: 1fr;\r\n        row-gap: 15px;\r\n        justify-content: stretch;\r\n        margin-top: 20px;\r\n\r\n        .profile-item {\r\n            display: grid;\r\n            grid-auto-flow: var(--profile-item-grid-auto-flow);\r\n            grid-template-columns: var(--profile-item-grid-template-columns);\r\n            column-gap: 15px;\r\n            row-gap: 10px;\r\n            justify-content: var(--profile-item-justify-content);\r\n            padding: 11px;\r\n            border: 1px solid transparent;\r\n            border-radius: $border-radius;\r\n            box-shadow: 2px 2px 8px #f1f1f1;\r\n            align-items: center;\r\n\r\n            .label {\r\n                font-weight: 550;\r\n            }\r\n\r\n            .text {\r\n                span:not(:first-child) {\r\n                    margin-left: 5px;\r\n                }\r\n            }\r\n\r\n            ui-account-profile-change {\r\n                grid-column-start: var(--ui-account-profile-change-grid-column-start);\r\n                grid-column-end: var(--ui-account-profile-change-grid-column-end);\r\n                padding: var(--ui-account-profile-change-padding);\r\n                max-width: 40rem;\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "historyService",
                        "type": "HistoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "verificationService",
                        "type": "VerificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseAccountComponent",
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n    <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n\r\n<div class=\"container\">\r\n    <div class=\"header\">{{metadata && metadata.myProfile && metadata.myProfile.label}}</div>\r\n\r\n    <ng-container *ngIf=\"profile\">\r\n        <div class=\"profile-container\" [ngClass]=\"{'mobile-container': isMobile, 'desktop-container': !isMobile}\">\r\n            <div class=\"profile-item\">\r\n                <div class=\"label\">{{metadata && metadata.firstName && metadata.firstName.label}}:</div>\r\n                <div class=\"text\">{{profile.firstName}}</div>\r\n                <div></div>\r\n            </div>\r\n            <div class=\"profile-item\">\r\n                <div class=\"label\">{{metadata && metadata.lastName && metadata.lastName.label}}:</div>\r\n                <div class=\"text\">{{profile.lastName}}</div>\r\n                <div></div>\r\n            </div>\r\n            <div class=\"profile-item\">\r\n                <div class=\"label\">{{metadata && metadata.mobile && metadata.mobile.label}}:</div>\r\n                <div class=\"text\">\r\n                    <span>{{profile.isoCode}}</span>\r\n                    <span>{{profile.mobile}}</span>\r\n                </div>\r\n                <div>\r\n                    <button \r\n                        [hidden]=\"!showChange\"\r\n                        class=\"btn btn-light btn-light-bordered btn-box-shadow\"\r\n                        uiRecaptcha\r\n                        [action]=\"metadata && metadata.change && metadata.change.action\"\r\n                        (execute)=\"onClick('Mobile')\"\r\n                    >\r\n                        {{metadata && metadata.change && metadata.change.label}}\r\n                    </button>\r\n                </div>\r\n                <ui-account-profile-change\r\n                    [hidden]=\"showChange || type === 'Email'\"\r\n                    [profile]=\"profile\"\r\n                    [type]=\"'Mobile'\"\r\n                    [metadata]=\"metadata && metadata.profileChange\"\r\n                    (cancel)=\"onCancel()\"\r\n                    (resendOtp)=\"onResendOtpClick($event)\"\r\n                ></ui-account-profile-change>\r\n            </div>\r\n            <div class=\"profile-item\">\r\n                <div class=\"label\">{{metadata && metadata.email && metadata.email.label}}:</div>\r\n                <div class=\"text\">{{profile.emailId}}</div>\r\n                <div>\r\n                    <button\r\n                        [hidden]=\"!showChange\"\r\n                        class=\"btn btn-light btn-light-bordered btn-box-shadow\"\r\n                        uiRecaptcha\r\n                        [action]=\"metadata && metadata.change && metadata.change.action\"\r\n                        (execute)=\"onClick('Email')\"\r\n                    >\r\n                        {{metadata && metadata.change && metadata.change.label}}\r\n                    </button>\r\n                </div>\r\n                <ui-account-profile-change\r\n                    [hidden]=\"showChange || type === 'Mobile'\"\r\n                    [profile]=\"profile\"\r\n                    [type]=\"'Email'\"\r\n                    [metadata]=\"metadata && metadata.profileChange\"\r\n                    (cancel)=\"onCancel()\"\r\n                    (resendOtp)=\"onResendOtpClick($event)\"\r\n                ></ui-account-profile-change>\r\n            </div>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "QuickSearchComponent",
            "id": "component-QuickSearchComponent-58ef3c6ae218d5c6583a4b77d0ec77f1",
            "file": "projects/search/src/lib/components/quick-search/quick-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-quick-search",
            "styleUrls": [
                "./quick-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchInput",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'search'"
                        }
                    ]
                },
                {
                    "name": "searchTerm",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onSearchClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Inject, Input, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { BaseComponent, DataStoreService, RouteKeys, SearchMap, SearchStateService, WINDOW } from '@common/src/public-api';\r\nimport { fromEvent } from 'rxjs';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-quick-search',\r\n    templateUrl: './quick-search.component.html',\r\n    styleUrls: ['./quick-search.component.scss'],\r\n})\r\nexport class QuickSearchComponent extends BaseComponent implements AfterViewInit {\r\n    searchTerm: string;\r\n\r\n    @Input() metadata: any;\r\n    @ViewChild('search') searchInput: ElementRef<HTMLInputElement>;\r\n    \r\n    constructor(\r\n        dataStoreService: DataStoreService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,        \r\n        private searchStateService: SearchStateService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n    }\r\n\r\n    async ngAfterViewInit(): Promise<void> {\r\n        if (this.searchInput) {\r\n            fromEvent(this.searchInput.nativeElement, 'keyup')\r\n            .pipe(\r\n                filter((event: KeyboardEvent) => event.key === 'Enter'),\r\n                takeUntil(this.$destroy)\r\n            ).subscribe(_ => this.onSearchClick());\r\n        }\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.searchStateService.clearQuickSearch$\r\n            .pipe(\r\n                takeUntil(this.$destroy)\r\n            ). subscribe(() => this.searchTerm = '');\r\n    }\r\n\r\n    async onSearchClick(): Promise<void> {\r\n        if (!!this.searchTerm && this.searchTerm.length > 2) {\r\n            const query: SearchMap = { searchString: this.searchTerm };            \r\n            await this.dataStoreService.push('sidebar-query', query);\r\n            this.router.navigateByUrl(`${RouteKeys.ProductList}${btoa(JSON.stringify(query))}`);\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.search {\r\n    padding: 1px 0;\r\n    border: 1px solid $border-color;\r\n    border-radius: $border-radius;\r\n    position: relative;\r\n\r\n    span.icon {\r\n        position: absolute;\r\n        right: -1px;\r\n        background-color: $secondary-color;\r\n        top: -1px;\r\n        width: 50px;\r\n        height: 39px;\r\n        box-sizing: border-box;\r\n        border: 1px solid transparent;\r\n        border-top-right-radius: $border-radius;\r\n        border-bottom-right-radius: $border-radius;\r\n        cursor: pointer;\r\n        \r\n        i {\r\n            background-color: $secondary-color;\r\n            color: white;\r\n            position: absolute;\r\n            right: 9px;\r\n            top: 8px;\r\n        }\r\n    }\r\n\r\n    .search-textbox {\r\n        border: 1px solid transparent;\r\n        border-radius: $border-radius;\r\n        font-size: 0.9em;\r\n        color: $mobile-regular-color;\r\n        padding-right: 55px;\r\n        width: 100%;\r\n        height: 36px;\r\n    }\r\n\r\n    .search-textbox::placeholder {\r\n        color: $placeholder-color;\r\n        font-size: $font-size;\r\n        font-family: FontAwesome, Times 'Times New Roman', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    }\r\n}\r\n",
                    "styleUrl": "./quick-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"search\">\r\n    <input #search type=\"text\" [(ngModel)]=\"searchTerm\" [attr.placeholder]=\"metadata && metadata.search && metadata.search.label\" class=\"search-textbox\"/>\r\n    <span class=\"icon\" (click)=\"onSearchClick()\">\r\n        <i class=\"material-icons\">search</i>\r\n    </span>\r\n</div>"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-adabc612e1307283ce7234f7b0e4e625",
            "file": "projects/common/src/lib/component/common/input/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-radio-component",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "smallRadio",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isValid",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onRadioClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\n\r\n@Component({\r\n    selector: 'ui-radio-component',\r\n    templateUrl: './radio.component.html',\r\n    styleUrls: ['./radio.component.scss'],\r\n})\r\nexport class RadioComponent extends BaseInputComponent {\r\n    isValid = true;\r\n    @Input() smallRadio: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    onRadioClick(): void {\r\n        if (!this.disabled) {\r\n            this.data = true;\r\n            this.valueChange.emit({ name: this.name, value: this.data });\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n\r\n.radio-container {\r\n    position: relative;\r\n    height: 100%;\r\n\r\n    .control-row {\r\n        margin-top: unset;\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        left: -15px;\r\n    }\r\n}\r\n\r\n.control-row .control {\r\n    border: $border-transparent;\r\n\r\n    &.disabled {\r\n        div.radio-small,\r\n        div.radio {\r\n            border: $disabled-border;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "extends": "BaseInputComponent",
            "templateData": "<div class=\"radio-container\">\r\n    <div class=\"control-row\">\r\n        <div class=\"control\" [class.disabled]=\"disabled\" [class.radio]=\"!smallRadio\" [class.radio-small]=\"smallRadio\">\r\n            <div tabindex=\"0\" [class.radio]=\"!smallRadio\" [class.radio-small]=\"smallRadio\">\r\n                <span\r\n                    [class.radio]=\"!smallRadio\"\r\n                    [class.radio-small]=\"smallRadio\"\r\n                    [ngClass]=\"{ checked: data === true }\"\r\n                    (click)=\"onRadioClick()\"\r\n                ></span>\r\n                <label>{{ metadata && metadata.label }}</label>\r\n            </div>\r\n            <div class=\"information\" [hidden]=\"!showInfo\">\r\n                <div *ngFor=\"let text of metadata && metadata.information\">\r\n                    {{ text }}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "RatingReviewComponent",
            "id": "component-RatingReviewComponent-73faa8124e13eae35b1840a8bcd682b3",
            "file": "projects/common/src/lib/component/review/rating/rating-review.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-rating-review-component",
            "styleUrls": [
                "./rating-review.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rating-review.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 14,
                    "type": "any"
                },
                {
                    "name": "reviewSummary",
                    "line": 13,
                    "type": "ReviewSummary"
                }
            ],
            "outputsClass": [
                {
                    "name": "reviewClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 15,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onStarClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { WINDOW } from '@common/src/lib/services/window.service';\r\nimport { ReviewSummary } from '@common/src/lib/types/review-summary';\r\nimport { BaseComponent } from '../../base.component';\r\n\r\n@Component({\r\n    selector: 'ui-rating-review-component',\r\n    templateUrl: './rating-review.component.html',\r\n    styleUrls: ['./rating-review.component.scss']\r\n})\r\nexport class RatingReviewComponent extends BaseComponent {\r\n    @Input() reviewSummary: ReviewSummary;\r\n    @Input() metadata: any;\r\n    @Output() reviewClick: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n    get rating(): string {\r\n        return `--rating: ${this.reviewSummary && this.reviewSummary.averageRating || 0}`;\r\n    }\r\n\r\n    constructor (\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    onStarClick(): void {\r\n        this.reviewClick.emit();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui//src/scss/variables';\r\n\r\n.container {\r\n    position: relative;\r\n\r\n    .text-average-rating {\r\n        font-size: 0.8em;\r\n        color: $mobile-regular-color;\r\n        position: absolute;\r\n        left: 105px;\r\n        top: 9px;\r\n    }\r\n\r\n    .no-reviews {\r\n        cursor: default;\r\n    }\r\n}",
                    "styleUrl": "./rating-review.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "rating": {
                    "name": "rating",
                    "getSignature": {
                        "name": "rating",
                        "type": "string",
                        "returnType": "string",
                        "line": 17
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <span class=\"stars\" (click)=\"onStarClick()\" [attr.style]=\"rating\" [ngClass]=\"{ 'no-reviews': !reviewSummary || reviewSummary.averageRating === 0 }\"></span>\r\n    <span *ngIf=\"reviewSummary && reviewSummary.averageRating > 0\"\r\n        class=\"text-average-rating\">\r\n        {{metadata && metadata.average && metadata.average.label}} {{reviewSummary && reviewSummary.averageRating}} {{metadata && metadata.of && metadata.of.label}} {{reviewSummary && reviewSummary.totalRatings}} {{metadata && metadata.reviews && metadata.reviews.label}}\r\n    </span>\r\n    <span *ngIf=\"!reviewSummary || reviewSummary.averageRating === 0\"\r\n        class=\"text-average-rating\">\r\n        {{metadata && metadata.average && metadata.noreviews.label}}\r\n    </span>\r\n</div>\r\n"
        },
        {
            "name": "RecaptchaProtectedComponent",
            "id": "component-RecaptchaProtectedComponent-6379ddb78e355ce043674f181451feac",
            "file": "projects/common/src/lib/component/common/recaptcha/recaptcha-protected.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-recaptcha-protected",
            "styleUrls": [
                "./recaptcha-protected.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"container\">        <small\n            >This site is protected by reCAPTCHA and the Google\n            <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and\n            <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\n        </small>\n    </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ui-recaptcha-protected',\r\n    template: `<div class=\"container\">\r\n        <small\r\n            >This site is protected by reCAPTCHA and the Google\r\n            <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and\r\n            <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\r\n        </small>\r\n    </div> `,\r\n    styleUrls: ['./recaptcha-protected.component.scss'],\r\n})\r\nexport class RecaptchaProtectedComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    width: 100vw;\r\n    margin: 20px auto;\r\n    color: #aaa;\r\n    font-size: 0.75em;\r\n    text-align: center;\r\n\r\n    a {\r\n        color: #9595ef;\r\n    }\r\n}\r\n",
                    "styleUrl": "./recaptcha-protected.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ReviewComponent",
            "id": "component-ReviewComponent-996a1b2c08fc4e8bb8d7176639408e51",
            "file": "projects/content/src/lib/components/reviews/review/review.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-review-component",
            "styleUrls": [
                "./review.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./review.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 40,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_type",
                    "defaultValue": "'CAMERA'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "beginTakePhoto",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "cameraInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cameraInput'"
                        }
                    ]
                },
                {
                    "name": "hasMediaDevice",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "imageOptions",
                    "defaultValue": "IMAGE_OPTIONS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "mediaRecorder",
                    "type": "MediaRecorder",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "recording",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "review",
                    "type": "Review",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "stream",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "takePhoto",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "takeVideo",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "capturePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 191,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onCapture",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 216,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onFeatureRatingChange",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "$event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 120,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "result",
                            "type": "ImageResult | VideoResult"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 138,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "ImageResult | VideoResult",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onlightboxClose",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 181,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRatingChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 112,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTakePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 199,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "input",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 131,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openLightbox",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 185,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRecording",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "stopRecording",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "stopTracks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "updateReview",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 298,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, Input, ViewChild } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { ImageResult } from 'ngx-image2dataurl';\r\nimport { DOCUMENT } from \"@angular/common\";\r\nimport { from, fromEvent, interval } from \"rxjs\";\r\nimport { delay, first, takeUntil } from \"rxjs/operators\";\r\nimport {\r\n    BaseComponent,\r\n    DataStoreService,\r\n    IInputValue,\r\n    MenuStateService,\r\n    Product,\r\n    ProductRating,\r\n    Review,\r\n    WINDOW,\r\n    IMAGE_OPTIONS,\r\n    VideoResult,\r\n    LightboxService,\r\n    ProductReviewService,\r\n    FileService,\r\n    NotificationService\r\n} from \"@common/src/public-api\";\r\nimport { NotificationMessageKeys } from \"@common/src/lib/constants/notification.message.keys\";\r\n\r\n@Component({\r\n    selector: 'ui-review-component',\r\n    templateUrl: './review.component.html',\r\n    styleUrls: ['./review.component.scss']\r\n})\r\nexport class ReviewComponent extends BaseComponent {\r\n    product: Product;\r\n    review: Review;\r\n    imageOptions = IMAGE_OPTIONS;\r\n    hasMediaDevice: boolean = false;\r\n    takeVideo: boolean = false;\r\n    takePhoto: boolean = true;\r\n    beginTakePhoto: boolean = false;\r\n    recording: boolean;\r\n\r\n    @Input() metadata: any;\r\n    @ViewChild('cameraInput') cameraInput: ElementRef;\r\n\r\n    private stream: any;\r\n    private _type: string = 'CAMERA';\r\n    // @ts-ignore\r\n    private mediaRecorder: MediaRecorder;\r\n\r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        @Inject(DOCUMENT) private document: any,\r\n        private activatedRoute: ActivatedRoute,        \r\n        private lightboxService: LightboxService,\r\n        private productReviewService: ProductReviewService,\r\n        private fileService: FileService,\r\n        private notificationService: NotificationService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);        \r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.hasMediaDevice = !!(this.window && this.window.navigator && this.window.navigator.mediaDevices);\r\n        const data = this.activatedRoute.snapshot.data;\r\n\r\n        this.metadata = data.metadata['AddEditReview'];\r\n        this.product = data.detail;\r\n        this.review = data.review;\r\n\r\n        interval(100).pipe(takeUntil(this.$destroy)).subscribe(async _ => {\r\n            this.menuStateService.changeShowMainMenu(!this.isMobile);\r\n            this.menuStateService.changeShowSubMenu(this.menuStateService.getShowMainMenu());\r\n        });\r\n    }\r\n\r\n    protected async destroy(): Promise<void> {\r\n        if (this.mediaRecorder) {\r\n            try {\r\n                this.mediaRecorder.stop();\r\n            } catch {}\r\n\r\n            this.mediaRecorder = null;\r\n        }\r\n    }\r\n\r\n    get featureRatings(): Array<{ feature: string, rating: ProductRating }> {\r\n        if (this.product && Array.isArray(this.product.features) && this.product.features.length > 0){\r\n            if (this.review && Array.isArray(this.review.featuresRating) && this.review.featuresRating.length === 0) {\r\n                this.review.featuresRating = this.product.features.map(f => {\r\n                    return { feature: f, rating: ProductRating.NoStar };\r\n                });\r\n            }\r\n\r\n            return this.review.featuresRating;\r\n        }\r\n        \r\n        return [];\r\n    }\r\n\r\n    get imageUrl(): string {\r\n        if (this.product && Array.isArray(this.product.images)){\r\n            const image = this.product.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    public async onRatingChange($event: { selected: boolean, value: number }): Promise<void> {\r\n        const review = { ...this.review }\r\n        review.rating = this.review.rating === 1 && $event.value === 1 && !$event.selected ? 0 : $event.value;\r\n\r\n        await this.updateReview(review);\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onFeatureRatingChange(index: number, $event: { selected: boolean, value: number }): Promise<void> {\r\n        const review = { ...this.review }\r\n        const fr = review.featuresRating[index];\r\n\r\n        if (fr) {\r\n            fr.rating = fr.rating === 1 && $event.value === 1 && !$event.selected ? 0 : $event.value;\r\n\r\n            await this.updateReview(review);\r\n        }\r\n    }\r\n\r\n    public async onValueChange(input: IInputValue): Promise<void> {\r\n        const review = { ...this.review };\r\n        review[input.name] = input.value;\r\n        \r\n        await this.updateReview(review);\r\n    }\r\n\r\n    public async onFileChange(result: ImageResult | VideoResult): Promise<void> {\r\n        if (!result.error) {\r\n            if (result as ImageResult) {\r\n                try {\r\n                    const ir = result as ImageResult;\r\n                    const fileType = ir.file && ir.file.type || ir.resized.type;\r\n                    const filename = ir.file && ir.file.name || `${Date.now()}.jpg`\r\n                    await this.tokenService.xsrf();\r\n                    const response = await this.fileService.upload(\r\n                        'product', this.review.productID, this.review._id, ir.dataURL, fileType, filename).toPromise();\r\n\r\n                    if (response && response.url) {\r\n                        if (!this.review.urls) {\r\n                            this.review.urls = [];\r\n                        }\r\n                        const review = { ...this.review };\r\n                        review.urls.push({ type: 'image', src: response.url });\r\n\r\n                        await this.updateReview(review);\r\n                    }\r\n                } catch {\r\n                    //TODO: error handling\r\n                }\r\n            }\r\n        }        \r\n    }\r\n\r\n    public async removeImage(index: number): Promise<void> {\r\n        const review = { ...this.review };\r\n        const items = review.urls.splice(index, 1);\r\n\r\n        if (Array.isArray(items) && items.length === 1) {\r\n            try {\r\n                await this.updateReview(review);\r\n\r\n                const filename = items[0].src.substring(items[0].src.lastIndexOf('/') +1 );\r\n                await this.fileService.remove('product', this.review.productID, this.review._id, filename).toPromise();\r\n\r\n            } catch {\r\n            }\r\n        }\r\n    }\r\n\r\n    public async onlightboxClose(id: string): Promise<void> {\r\n        this.lightboxService.close(id);\r\n    }\r\n\r\n    public async openLightbox(id: string): Promise<void> {\r\n        this.lightboxService.open(id);\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onCancel(): Promise<void> {\r\n        this.beginTakePhoto = false;\r\n        this.stopTracks();\r\n        this.lightboxService.close('take-photo-or-video');\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onTakePhoto(): Promise<void> {\r\n        this.beginTakePhoto = true;\r\n        this.lightboxService.open('take-photo-or-video');\r\n\r\n        await from([0]).pipe(delay(0), first()).toPromise();\r\n        \r\n        this.stream = await this.window.navigator.mediaDevices.getUserMedia({ video: true, audio: false });\r\n        const mediaStreamTrack: MediaStreamTrack = this.stream.getVideoTracks()[0];\r\n        this.stream = new MediaStream([mediaStreamTrack]);\r\n        if (HTMLMediaElement) {\r\n            this.cameraInput.nativeElement.srcObject = this.stream;\r\n        } else {\r\n            this.cameraInput.nativeElement.src = URL.createObjectURL(this.stream);\r\n        }\r\n        this.cameraInput.nativeElement.play();\r\n    }\r\n\r\n    public async onCapture(): Promise<void> {\r\n        if (this._type === 'CAMERA') {\r\n            this.capturePhoto();            \r\n            this.lightboxService.close('take-photo-or-video');\r\n        } else {\r\n            if (this.recording) {\r\n                this.stopRecording();\r\n            } else {\r\n                this.startRecording();\r\n            }\r\n        }\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    private startRecording(): void {\r\n        this.recording = true;\r\n        let chunks = [];\r\n\r\n        // @ts-ignore\r\n        this.mediaRecorder = new MediaRecorder(this.stream);\r\n        this.mediaRecorder.addEventListener('dataavailable', $event => {\r\n            if ($event.data.size > 0) {\r\n                chunks.push($event.data);\r\n            }\r\n        });\r\n\r\n        this.mediaRecorder.addEventListener('stop', _ => {\r\n            const blob = new Blob(chunks, { type: 'video/mp4' });\r\n            const file = new File([blob], 'video.mp4');\r\n            const result: VideoResult = { file: file, type: 'video/mp4' };\r\n\r\n            this.stopTracks();\r\n            this.beginTakePhoto = false;\r\n\r\n            if (FileReader) {\r\n                const reader = new FileReader();\r\n                fromEvent(reader, 'load').subscribe(_ => {\r\n                    result.dataURL = reader.result as string;\r\n                    this.onFileChange(result);\r\n                });\r\n                reader.readAsDataURL(file);\r\n            }\r\n        });\r\n        this.mediaRecorder.start();\r\n    }\r\n\r\n    private stopRecording(): void {\r\n        this.recording = false;\r\n        this.mediaRecorder.stop();\r\n    }\r\n\r\n    private capturePhoto(): void {\r\n        const canvas = this.document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const height = this.cameraInput.nativeElement.videoHeight;\r\n        const width = this.cameraInput.nativeElement.videoWidth;\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        ctx.drawImage(this.cameraInput.nativeElement, 0, 0, width, height);\r\n        this.beginTakePhoto = false;\r\n        this.stopTracks();\r\n\r\n        const dataUrl = canvas.toDataURL('image/jpeg');\r\n        const result: ImageResult = {\r\n            file: null,\r\n            dataURL: dataUrl,\r\n            url: null,\r\n            resized: { dataURL: dataUrl, type: 'image/jpeg' }\r\n        };\r\n\r\n        this.onFileChange(result);\r\n    }\r\n\r\n    private stopTracks(): void {\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n        }\r\n    }\r\n\r\n    private async updateReview(review: Review): Promise<void> {\r\n        try {\r\n            await this.tokenService.xsrf();\r\n            this.review = await this.productReviewService.saveReview(review).toPromise();\r\n        } catch {\r\n            this.notificationService.showMessage(NotificationMessageKeys.GenericError);\r\n        }\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../ui/src/scss/mixins';\r\n@import '../mixins.scss';\r\n\r\n.review-container {\r\n    @include non-content-container;\r\n    padding: 0 10px;\r\n\r\n    .reviewer {\r\n        @include reviewer;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .header {\r\n        @include header;\r\n    }\r\n\r\n    .product {\r\n        display: flex;\r\n        column-gap: 20px;\r\n\r\n        figure {\r\n            @include small-product-image(60px, 60px);\r\n        }\r\n\r\n        .description {\r\n            font-size: 0.9rem;\r\n            font-weight: 500;\r\n            width: 100%;\r\n            position: relative;\r\n\r\n            span {\r\n                position: absolute;\r\n                left: 0;\r\n                top: 40%;\r\n                transform: translateY(-50%);\r\n            }\r\n        }\r\n    }\r\n    \r\n    .product-images {\r\n        .add-take-photo {\r\n            margin-top: 20px;\r\n            display: flex;\r\n\r\n            button,\r\n            button {\r\n                border: 1px solid transparent;\r\n                background-color: #fafafa;\r\n                cursor: pointer;\r\n                border-radius: $border-radius;\r\n                display: flex;\r\n                padding-left: 9px;\r\n                padding-top: 4px;\r\n\r\n                i {\r\n                    font-size: 3rem;\r\n                    color: #777;\r\n                }\r\n\r\n                &:hover {                    \r\n                    background-color: #e1e1e1;\r\n                    box-shadow: 3px 4px 4px #a1a1a1;\r\n                }\r\n            }\r\n\r\n            .take-photo {\r\n                margin-left: 20px;\r\n            }\r\n        }\r\n\r\n        .reviews {\r\n            display: flex;\r\n            margin-top: 20px;\r\n            flex-direction: row;\r\n            flex-flow: wrap;\r\n            column-gap: 15px;\r\n            row-gap: 15px;\r\n            justify-content: flex-start;\r\n\r\n            figure {\r\n                @include small-product-image(60px, 60px);\r\n                border: 1px solid #f1f1f1;\r\n                border-radius: $border-radius;\r\n                box-shadow: 1px 3px 4px #a1a1a1;\r\n                cursor: default;\r\n                position: relative;\r\n\r\n                .cross {\r\n                    position: absolute;\r\n                    right: -11px;\r\n                    top: -10px;\r\n                    font-size: 19px;\r\n                    color: #777;\r\n                    cursor: pointer;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .product-images,\r\n    .review-description,\r\n    .headline,\r\n    .overall-rating,\r\n    .features-rating,\r\n    .product {\r\n        margin-top: 35px;\r\n        padding: 10px;\r\n        border: 1px solid #fafafa;\r\n        box-shadow: 3px 6px 5px #ccc;\r\n\r\n        .header {\r\n            font-size: 1.2rem;\r\n        }\r\n    }\r\n\r\n    .features-rating,\r\n    .overall-rating {\r\n        ui-star-rating-component {\r\n            .container {\r\n                ::ng-deep & {\r\n                    margin-top: 7px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .features-rating {\r\n        .feature-rating-item {\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: 1fr;\r\n            align-items: center;\r\n            margin-top: 25px;\r\n\r\n            &:first-child {\r\n                margin-top: 15px;\r\n            }\r\n\r\n            .feature {\r\n                font-size: 0.85rem;\r\n            }\r\n        }\r\n\r\n        ui-star-rating-component {\r\n            .container {\r\n                ui-star-component {\r\n                    .one-star {\r\n                        ::ng-deep & {\r\n                            --star-size: 2rem;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nui-lightbox-component {\r\n    .lightbox-body {\r\n        ::ng-deep & {\r\n            margin: 40px auto!important;\r\n            width: fit-content;\r\n        }\r\n    }\r\n\r\n    .take-photo-or-video {\r\n        .take-photo-or-video-container {\r\n            position: absolute;\r\n                left: 50%;\r\n                top: calc(100vh - 150px);\r\n                text-align: center;\r\n                transform: translateX(-50%);\r\n\r\n                a {\r\n                    color: white;\r\n                    text-decoration: none;\r\n                    background-color: transparent;\r\n                    user-select: none;\r\n                    cursor: pointer;\r\n                    font-weight: 200;\r\n                    font-size: 1.25rem;\r\n\r\n                    &.selected {\r\n                        color: #d7c407;\r\n                    }\r\n                }\r\n\r\n                &-action {\r\n                    margin-top: 3rem;\r\n                    font-size: 1.5rem;\r\n                    font-weight: normal;\r\n                    width: 12rem;\r\n                    height: 3rem;\r\n                    display: inline-flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                    margin-left: -50%;\r\n\r\n                    .capture {\r\n                        width: 5rem;\r\n                        height: 5rem;\r\n                        border: 3px solid white;\r\n                        border-radius: 2.5rem;\r\n                        display: block;\r\n                        padding: 2px;\r\n                        position: relative;\r\n\r\n                        div {\r\n                            display: block;\r\n                            width: 4rem;\r\n                            height: 4rem;\r\n                            background-color: white;\r\n                            border: 1px solid transparent;\r\n                            border-radius: 2rem;\r\n                            position: absolute;\r\n                            left: 5px;\r\n                            top: 5px;\r\n                        }\r\n\r\n                        &.recording {\r\n                            border: 3px solid red;\r\n\r\n                            div {\r\n                                background-color: red;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .review-container {\r\n        .features-rating {\r\n            .feature-rating-item {\r\n                grid-auto-flow: column;\r\n                grid-template-columns: 1fr 1fr;\r\n                margin-top: 15px;\r\n                column-gap: 10px;\r\n\r\n                &:first-child {\r\n                    margin-top: 0;\r\n                }\r\n\r\n                ui-star-rating-component {\r\n                    .container {\r\n                        ::ng-deep & {\r\n                            margin-top: 0;\r\n                            margin-bottom: 5px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./review.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "lightboxService",
                        "type": "LightboxService"
                    },
                    {
                        "name": "productReviewService",
                        "type": "ProductReviewService"
                    },
                    {
                        "name": "fileService",
                        "type": "FileService"
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lightboxService",
                        "type": "LightboxService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productReviewService",
                        "type": "ProductReviewService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fileService",
                        "type": "FileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "featureRatings": {
                    "name": "featureRatings",
                    "getSignature": {
                        "name": "featureRatings",
                        "type": "",
                        "returnType": "Array<literal type>",
                        "line": 87
                    }
                },
                "imageUrl": {
                    "name": "imageUrl",
                    "getSignature": {
                        "name": "imageUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 101
                    }
                }
            },
            "templateData": "<div *ngIf=\"!isMobile\" class=\"bread-crumb\">\r\n    <ui-breadcrumb-component [items]=\"breadcrumbs\"></ui-breadcrumb-component>\r\n</div>\r\n\r\n<div class=\"review-container\">\r\n    <div class=\"reviewer\">\r\n        <i class=\"material-icons\">person</i>\r\n        {{review && review.user}}\r\n    </div>\r\n\r\n    <div class=\"header\">{{metadata && metadata.review && metadata.review.label}}</div>\r\n    \r\n    <div class=\"product\">\r\n        <figure>\r\n            <img [src]=\"imageUrl\" />\r\n        </figure>\r\n        <div class=\"description\">\r\n            <span>{{product && product.description}}</span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"overall-rating\">\r\n        <div class=\"header\">\r\n            {{metadata && metadata.overallRating && metadata.overallRating.label}}\r\n        </div>\r\n        <ui-star-rating-component (onChange)=\"onRatingChange($event)\" [rating]=\"review && review.rating\"></ui-star-rating-component>\r\n    </div>\r\n\r\n    <div *ngIf=\"featureRatings.length > 0\" class=\"features-rating\">\r\n        <div class=\"header\">\r\n            {{metadata && metadata.featureRating && metadata.featureRating.label}}\r\n        </div>\r\n        <div class=\"feature-rating-item\" *ngFor=\"let fr of featureRatings; let idx = index;\">\r\n            <span class=\"feature\">{{fr.feature}}</span>\r\n            <ui-star-rating-component (onChange)=\"onFeatureRatingChange(idx, $event)\" [rating]=\"fr.rating\"></ui-star-rating-component>\r\n        </div>\r\n    </div>\r\n    \r\n    <div class=\"product-images\">\r\n        <div class=\"header\">\r\n            {{metadata && metadata.photoOrVideo && metadata.photoOrVideo.label}}\r\n        </div>\r\n        <div class=\"reviews\" *ngIf=\"review && review.urls.length > 0\">\r\n            <ng-container *ngFor=\"let ir of review.urls;let idx = index;\">\r\n                <figure >\r\n                    <img (click)=\"openLightbox('ir-'+idx)\" [src]=\"ir.src\" />\r\n                    <i (click)=\"removeImage(idx)\" class=\"material-icons cross\">cancel</i>\r\n                    <ui-image-lightbox-component [id]=\"'ir-'+idx\" [src]=\"ir.src\" (close)=\"onlightboxClose('ir-'+idx)\"></ui-image-lightbox-component>\r\n                </figure>\r\n            </ng-container>            \r\n        </div>\r\n        <div class=\"add-take-photo\">\r\n            <div class=\"add-photo\">\r\n                <button (click)=\"imageGalleryInput.click()\">\r\n                    <i  class=\"material-icons\">insert_photo</i>\r\n                    <input\r\n                        #imageGalleryInput\r\n                        id=\"imageGallery\"\r\n                        type=\"file\"\r\n                        [hidden]=\"true\"\r\n                        [imageToDataUrl]=\"imageOptions\"\r\n                        (imageSelected)=\"onFileChange($event)\"\r\n                        accept=\"image/png,image/jpeg,image/jpg\"\r\n                    />\r\n                </button>\r\n            </div>\r\n            <div class=\"take-photo\" *ngIf=\"hasMediaDevice\">\r\n                <button (click)=\"onTakePhoto()\">\r\n                    <i class=\"material-icons\">photo_camera</i>\r\n                    <ng-container *ngTemplateOutlet=\"takePhotoOrVideoTemplate\"></ng-container>\r\n                </button>\r\n            </div>\r\n        </div>        \r\n    </div>\r\n    \r\n    <div class=\"headline\">\r\n        <div class=\"header\">\r\n            {{metadata && metadata.headline && metadata.headline.label}}\r\n        </div>\r\n        <ui-textbox-component\r\n            name=\"headline\"\r\n            [type]=\"'text'\"\r\n            [value]=\"review && review.headline\"\r\n            [metadata]=\"metadata && metadata.headline\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-textbox-component>\r\n    </div>\r\n    \r\n    <div class=\"review-description\">\r\n        <div class=\"header\">\r\n            {{metadata && metadata.description && metadata.description.label}}\r\n        </div>\r\n        <ui-textarea-component\r\n            name=\"review\"\r\n            [value]=\"review && review.review\"\r\n            [metadata]=\"metadata && metadata.description\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n        ></ui-textarea-component>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #takePhotoOrVideoTemplate>\r\n    <ui-lightbox-component [id]=\"'take-photo-or-video'\">\r\n        <div class=\"take-photo-or-video\">\r\n            <video #cameraInput id=\"video\"></video>\r\n            <div class=\"take-photo-or-video-container\">\r\n                <div class=\"take-photo-or-video-container-selector\">\r\n                    <a\r\n                        [hidden]=\"true\"\r\n                        [ngClass]=\"{ selected: takeVideo }\"\r\n                        (click)=\"takeVideo = true; takePhoto = false\"\r\n                    >\r\n                        VIDEO\r\n                    </a>\r\n                    <a\r\n                        [hidden]=\"!takePhoto\"\r\n                        [ngClass]=\"{ selected: takePhoto }\"\r\n                        (click)=\"takeVideo = false; takePhoto = true\"\r\n                    >\r\n                        PHOTO\r\n                    </a>\r\n                </div>\r\n                <div class=\"take-photo-or-video-container-action\">\r\n                    <a class=\"cancel\" (click)=\"onCancel()\">\r\n                        Cancel\r\n                    </a>\r\n                    <a\r\n                        class=\"capture\"\r\n                        [hidden]=\"!takePhoto && !takeVideo\"\r\n                        [ngClass]=\"{ recording: recording }\"\r\n                        (click)=\"onCapture()\"\r\n                    >\r\n                        <div></div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ui-lightbox-component>\r\n</ng-template>"
        },
        {
            "name": "ReviewSummaryComponent",
            "id": "component-ReviewSummaryComponent-5a54d55b70935883c7432043a626976c",
            "file": "projects/common/src/lib/component/review/summary/review-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-review-summary-component",
            "styleUrls": [
                "./review-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./review-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 16,
                    "type": "any"
                },
                {
                    "name": "reviewSummary",
                    "line": 15,
                    "type": "ReviewSummary"
                },
                {
                    "name": "showAverageRating",
                    "defaultValue": "true",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "showViewAll",
                    "defaultValue": "true",
                    "line": 17,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onViewReviews",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "percent",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ratingSummary",
                    "args": [
                        {
                            "name": "summary",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { RouteKeys } from '@common/src/lib/constants/route.keys';\r\nimport { WINDOW } from '@common/src/lib/services/window.service';\r\nimport { ProductRating } from '@common/src/lib/types/product-rating';\r\nimport { ReviewSummary } from '@common/src/lib/types/review-summary';\r\nimport { BaseComponent } from '../../base.component';\r\n\r\n@Component({\r\n    selector: 'ui-review-summary-component',\r\n    templateUrl: './review-summary.component.html',\r\n    styleUrls: ['./review-summary.component.scss']\r\n})\r\nexport class ReviewSummaryComponent extends BaseComponent {\r\n    @Input() reviewSummary: ReviewSummary;\r\n    @Input() metadata: any;\r\n    @Input() showViewAll: boolean = true;\r\n    @Input() showAverageRating: boolean = true;\r\n    \r\n    get rating(): string {\r\n        return `--rating: ${this.reviewSummary && this.reviewSummary.averageRating || 0}`;\r\n    }\r\n\r\n    constructor (\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n\r\n    ratingSummary(summary: { productRating: ProductRating, value: number }): string {\r\n        switch(summary.productRating) {\r\n            case ProductRating.OneStar:\r\n                return 'one-star';\r\n            case ProductRating.TwoStar:\r\n                return 'two-star';\r\n            case ProductRating.ThreeStar:\r\n                return 'three-star';\r\n            case ProductRating.FourStar:\r\n                return 'four-star';\r\n            case ProductRating.FiveStar:\r\n                return 'five-star';\r\n        }\r\n    }\r\n\r\n    percent(value: number): string {\r\n        return `--percent: ${value.toString()}%`;\r\n    }\r\n\r\n    public async onViewReviews(): Promise<void> {\r\n        this.router.navigateByUrl(`${RouteKeys.ProductDetail}${this.reviewSummary.productID}?vr=true`, { skipLocationChange: false, replaceUrl: true });\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui//src/scss/variables';\r\n\r\n.container {\r\n    position: relative;\r\n    background-color: #fff;\r\n    padding: 11px;\r\n    font-size: 0.85em;\r\n\r\n    .number-of-reviews,\r\n    .average-rating {\r\n        margin-bottom: 11px;\r\n    }\r\n\r\n    .rating-summary {\r\n        padding: 5px;\r\n        width: 100%;\r\n\r\n        .summary-line {\r\n            margin-bottom: 5px;\r\n            width: 100%;\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: 30% 45% 15%;\r\n            column-gap: 5%;\r\n            align-items: center;\r\n\r\n            .percent {\r\n                border: 1px inset #f1f1f1;\r\n                height: 10px;\r\n                background: linear-gradient(90deg, #fc0 var(--percent), #fff var(--percent));\r\n            }\r\n        }\r\n    }\r\n\r\n    .all-reviews {\r\n        border-top: 1px solid #f1f1f1;\r\n        margin-top: 10px;\r\n        padding: 11px;\r\n        text-align: center;\r\n        background-color: #fafafa;\r\n        color: #777;\r\n        font-size: 1rem;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: #f1f1f1;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./review-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "rating": {
                    "name": "rating",
                    "getSignature": {
                        "name": "rating",
                        "type": "string",
                        "returnType": "string",
                        "line": 20
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div *ngIf=\"showAverageRating\" class=\"average-rating\">\r\n        <span class=\"five-star\" [attr.style]=\"rating\"></span>\r\n        <span class=\"text\">{{reviewSummary.averageRating}} {{metadata && metadata.outOf && metadata.outOf.label}}</span>\r\n    </div>\r\n    <div class=\"number-of-reviews\">\r\n        {{reviewSummary.totalRatings}} {{metadata && metadata.reviewsOrRatings && metadata.reviewsOrRatings.label}}\r\n    </div>\r\n\r\n    <div class=\"rating-summary\">\r\n        <ng-container *ngFor=\"let item of reviewSummary.ratingSummary\">\r\n            <div class=\"summary-line\">\r\n                <span [ngClass]=\"ratingSummary(item)\" [attr.style]=\"'--rating: 100'\"></span>\r\n                <span class=\"percent\" [attr.style]=\"percent(item.value)\"></span>\r\n                <span class=\"percent-value\">{{item.value}}%</span>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div *ngIf=\"showViewAll\" class=\"all-reviews\" (click)=\"onViewReviews()\">\r\n        <span>{{metadata && metadata.viewAll && metadata.viewAll.label}}</span>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "ShellComponent",
            "id": "component-ShellComponent-d10d0c8a72908b3ee72bde0944936d44",
            "file": "projects/shell/src/lib/components/shell/shell.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-shell",
            "styleUrls": [
                "./shell.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shell.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filterNonContentRoutes",
                    "defaultValue": "[\r\n        'checkout/payment'\r\n    ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "navTopRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navTop'"
                        }
                    ]
                },
                {
                    "name": "nonContentRoutes",
                    "defaultValue": "[\r\n        'signin',\r\n        'checkout',\r\n        'error',\r\n        'register',\r\n        'verifyotp',\r\n        'email/link/verifyemail',\r\n        'forgotpassword',\r\n        'email/link/passwordreset',\r\n        'passwordreset',\r\n        'admin',\r\n        'notsupportedorientation'\r\n    ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "recaptchaUse",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showContentTemplate",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "scrollTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ElementRef, Inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\n\r\nimport { BaseComponent, ConfigService, DataStoreService, GlobalisationService, NavigationService, ResourceKeys, RouteKeys, SearchStateService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-shell',\r\n    templateUrl: './shell.component.html',\r\n    styleUrls: ['./shell.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n    \r\n})\r\nexport class ShellComponent extends BaseComponent {\r\n    @ViewChild('navTop') navTopRef: ElementRef;\r\n    showContentTemplate: any = null;\r\n    recaptchaUse: boolean;\r\n    metadata: any;\r\n\r\n    private nonContentRoutes = [\r\n        'signin',\r\n        'checkout',\r\n        'error',\r\n        'register',\r\n        'verifyotp',\r\n        'email/link/verifyemail',\r\n        'forgotpassword',\r\n        'email/link/passwordreset',\r\n        'passwordreset',\r\n        'admin',\r\n        'notsupportedorientation'\r\n    ];\r\n\r\n    private filterNonContentRoutes = [\r\n        'checkout/payment'\r\n    ]\r\n\r\n    constructor(\r\n        private searchStateService: SearchStateService,\r\n        private globalisationService: GlobalisationService,\r\n        private navigationService: NavigationService,        \r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        configService: ConfigService,\r\n        dataStoreService: DataStoreService\r\n    ) {\r\n        super(router, window, null, dataStoreService);\r\n        this.recaptchaUse = configService.getConfiguration().recaptchaUse;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.router.events\r\n            .pipe(\r\n                filter((navigation: any) => navigation.url),\r\n                takeUntil(this.$destroy),\r\n            )\r\n            .subscribe((navigation: NavigationStart) => {\r\n                this.showContentTemplate =\r\n                    this.nonContentRoutes.find((r) => navigation.url.toLowerCase().includes(r)) === undefined;\r\n                if (!this.showContentTemplate) {\r\n                    this.showContentTemplate = this.filterNonContentRoutes.find((r) => !navigation.url.toLowerCase().includes(r)) === undefined;\r\n                }\r\n                if (!this.showContentTemplate) {\r\n                    this.searchStateService.clearQuickSearch$.next();\r\n                }\r\n            });\r\n\r\n        this.globalisationService.get(ResourceKeys.Header).subscribe(md => this.metadata = md);\r\n        // @ts-ignore\r\n        if (this.window && this.window.DeviceOrientationEvent) {\r\n            this.window.addEventListener('deviceorientation', async (event: DeviceOrientationEvent) => {\r\n                if (\r\n                    ((event.alpha === 0 && event.beta === 90 && event.gamma === -90) || \r\n                    (event.alpha === 0 && event.beta === 90 && event.gamma === 90))\r\n                    && (this.isMobile)\r\n                ) {\r\n                    await this.navigationService.clear();\r\n                    this.router.navigateByUrl(RouteKeys.NotSupportedOrientation);\r\n                } else if (this.window.location.href.includes('notsupportedorientation')) {\r\n                    await this.navigationService.navigateHomeClick();\r\n                }\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    scrollTop(): void {\r\n        this.navTopRef.nativeElement.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.nav-top {\r\n    position: absolute;\r\n    left: 1px;\r\n    top: 1px;\r\n}\r\n\r\n.wrapper {\r\n    margin: 0;\r\n    background-color: #fff;\r\n    position: relative;\r\n    height: auto;\r\n\r\n    .header {\r\n        background-color: #fff;\r\n        z-index: 1;\r\n        min-height: 50px;\r\n    }\r\n\r\n    .sidebar {\r\n        display: none;\r\n    }\r\n\r\n    .content {\r\n        margin-bottom: 10px;\r\n    }\r\n}\r\n\r\n.wrapper {\r\n    .footer-top {\r\n        margin-top: 60px;\r\n        justify-content: center;\r\n        background-color: $footer-background-color;\r\n        height: 50px;\r\n\r\n        .go-top {\r\n            position: relative;\r\n\r\n            a {\r\n                color: #777;\r\n                position: absolute;\r\n                left: 50%;\r\n                top: 50%;\r\n                transform: translate(-50%, 25px);\r\n\r\n                span {\r\n                    padding: 7px 11px;\r\n                    transition: 0.5s;\r\n                    box-shadow: 0 2px 9px #a1a1a1;\r\n\r\n                    &:hover {\r\n                        box-shadow: 0 8px 18px #a1a1a1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .footer {\r\n        background-color: $footer-background-color;\r\n        color: $footer-color;\r\n    }\r\n\r\n    .footer-bottom {\r\n        justify-content: center;\r\n        background-color: $footer-background-color;\r\n        min-height: 50px;\r\n    }\r\n}\r\n\r\n.non-content-wrapper {\r\n    .content {\r\n        margin: 0;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .wrapper {\r\n        width: 100%;\r\n        margin: 0;\r\n\r\n        .sidebar {\r\n            display: block;\r\n            margin-bottom: 10px;\r\n            margin-right: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./shell.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService"
                    },
                    {
                        "name": "globalisationService",
                        "type": "GlobalisationService"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalisationService",
                        "type": "GlobalisationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<a class=\"nav-top\" #navTop></a>\r\n<ng-container *ngIf=\"showContentTemplate; else nonContentTemplate\">\r\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n</ng-container>\r\n\r\n<ng-template #contentTemplate>\r\n    <div class=\"wrapper\">\r\n        <ui-header [metadata]=\"metadata\" class=\"header\">Header</ui-header>\r\n        <div class=\"content\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n        <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #nonContentTemplate>\r\n    <div class=\"non-content-wrapper\">\r\n        <ui-non-content-header>Header</ui-non-content-header>\r\n        <div class=\"content\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n        <ui-recaptcha-protected *ngIf=\"recaptchaUse\"></ui-recaptcha-protected>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #footerTemplate>\r\n    <div class=\"footer-top\">\r\n        <div class=\"go-top\">\r\n            <a (click)=\"scrollTop()\"><span class=\"btn btn-light btn-light-bordered\" >Back to top</span></a>\r\n        </div>\r\n    </div>\r\n    <ui-footer class=\"footer\"></ui-footer>\r\n    <div class=\"footer-bottom\"></div>\r\n</ng-template>\r\n"
        },
        {
            "name": "ShoppingCartComponent",
            "id": "component-ShoppingCartComponent-33634459ef3681ab85cb0e8eff987d78",
            "file": "projects/content/src/lib/components/shopping-cart/shopping-cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-shopping-cart",
            "styleUrls": [
                "./shopping-cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "basketItems",
                    "defaultValue": "[]",
                    "type": "Array<ShoppingCartItemGroup>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showItems",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "totalQty",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalToPay",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "refreshCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { BaseComponent, ShoppingCartStateService, ShoppingCartItemGroup, WINDOW } from '@common/src/public-api';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'ui-shopping-cart',\r\n    templateUrl: './shopping-cart.component.html',\r\n    styleUrls: ['./shopping-cart.component.scss'],\r\n})\r\nexport class ShoppingCartComponent extends BaseComponent {\r\n    basketItems: Array<ShoppingCartItemGroup> = [];\r\n    totalToPay: string;\r\n    totalQty = 0;\r\n    showItems = false;\r\n    metadata: any;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private checkoutStateService: ShoppingCartStateService,\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.metadata = this.activatedRoute.snapshot.data.metadata['ShoppingCart'];\r\n        this.checkoutStateService.cartStateChange.pipe(takeUntil(this.$destroy)).subscribe((state) => {\r\n            if (state) {\r\n                this.refreshCart();\r\n            }\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private refreshCart(): void {\r\n        this.basketItems = [];\r\n        let total = 0;\r\n        let qty = 0;\r\n        this.showItems = !!this.checkoutStateService.shoppingCart && this.checkoutStateService.shoppingCart.items.length !== 0\r\n        if (this.showItems) {\r\n            this.checkoutStateService.groupBasketItems.subscribe((s) => {\r\n                s.forEach((i) => {\r\n                    total += i.quantity * i.pricing.retail;\r\n                    qty += i.quantity;\r\n                });\r\n\r\n                this.basketItems.push({ key: s[0].lob, items: s });\r\n                this.totalToPay = (Math.round(total * 100) / 100).toFixed(2);\r\n                this.totalQty = qty;\r\n                this.showItems = this.totalQty > 0;\r\n            });\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.cart-container {\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n    \r\n    .shopping-cart-label {\r\n        color: #333;\r\n        margin-top: 14px;\r\n        font-weight: 600;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .items-container {\r\n        margin-top: 20px;\r\n\r\n        .hr {\r\n            border-top: 1px solid lightgray;\r\n            margin-bottom: 20px;\r\n        }\r\n    }\r\n\r\n    .total-container {\r\n        margin-top: 21px;\r\n    }\r\n\r\n    .disclaimer-container {\r\n        font-size: 0.7rem;\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .empty-cart-message {\r\n        font-size: 0.9em;\r\n        font-weight: 500;\r\n        margin-top: 17px;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .cart-container {\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        width: 720px;\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: 1200px) {\r\n    .cart-container {\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        width: 950px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./shopping-cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "ShoppingCartStateService"
                    },
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"cart-container\">\r\n    <div class=\"shopping-cart-label\">{{ metadata && metadata.myBasket && metadata.myBasket.label }}</div>\r\n    <ng-container *ngIf=\"showItems\">\r\n        <div class=\"total-container\"><ui-proceed-to-buy [metadata]=\"metadata\"></ui-proceed-to-buy></div>\r\n\r\n        <div class=\"items-container\">\r\n            <ng-container *ngIf=\"basketItems\">\r\n                <ng-container *ngFor=\"let group of basketItems\">\r\n                    <ui-group-container [metadata]=\"metadata\" [group]=\"group\"></ui-group-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n\r\n        <div class=\"total-container\"><ui-proceed-to-buy [metadata]=\"metadata\"></ui-proceed-to-buy></div>\r\n\r\n        <div class=\"disclaimer-container\">\r\n            {{ metadata && metadata.disclaimer && metadata.disclaimer.label }}\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"!showItems\">\r\n        <div class=\"empty-cart-message\">\r\n            {{ metadata && metadata.emptyCart && metadata.emptyCart.label }}\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "ShoppingcartItemContainerComponent",
            "id": "component-ShoppingcartItemContainerComponent-684a1254dccea96fb120d7b287099492",
            "file": "projects/content/src/lib/components/shopping-cart/child-components/shoppingcart-item-container/shoppingcart-item-container-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-shoppingcart-item-container",
            "styleUrls": [
                "./shoppingcart-item-container-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shoppingcart-item-container-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "line": 11,
                    "type": "ShoppingCartItem"
                },
                {
                    "name": "metadata",
                    "line": 12,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteFromBasket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "getMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onQuantityChange",
                    "args": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "inputValue",
                            "type": "IInputValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BaseComponent, IInputValue, ShoppingCartStateService, ShoppingCartItem, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-shoppingcart-item-container',\r\n    templateUrl: './shoppingcart-item-container-component.html',\r\n    styleUrls: ['./shoppingcart-item-container-component.scss'],\r\n})\r\nexport class ShoppingcartItemContainerComponent extends BaseComponent {\r\n    @Input() item: ShoppingCartItem;\r\n    @Input() metadata: any;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: any,\r\n        router: Router,\r\n        private shoppingcartStateService: ShoppingCartStateService\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    onQuantityChange(inputValue: IInputValue): void {\r\n        this.shoppingcartStateService.updateItemInBasket(this.item, inputValue.value);\r\n    }\r\n\r\n    getMetadata(): any {\r\n        return { defaultValue: this.item.quantity, min: 1, max: 20 };\r\n    }\r\n\r\n    deleteFromBasket(): void {\r\n        this.shoppingcartStateService.deleteItemFromBasket(this.item);\r\n    }\r\n\r\n    get imageUrl(): string {\r\n        if (this.item && Array.isArray(this.item.images)){\r\n            const image = this.item.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    get packaging(): string {\r\n        let value: string = '';\r\n        const size = this.item.details.find(d => d.title.toLowerCase() === 'size')\r\n        const sizePack = this.item.details.find(d => d.title.toLowerCase() === 'pack');\r\n\r\n        if (size) {\r\n            value = size.value;\r\n        }\r\n\r\n        if (sizePack) {\r\n            value = `${value} ${sizePack.value}`;\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n.item-container {\r\n    display: flex;\r\n\r\n    .image-container {\r\n        width: 150px;\r\n\r\n        figure {\r\n            @include small-product-image;\r\n            margin-bottom: 10px;\r\n        }\r\n    }\r\n\r\n    .text-container {\r\n        color: $desktop-regular-color;\r\n        flex-direction: column;\r\n        padding-left: 20px;\r\n\r\n        .packaging,\r\n        .description {\r\n            font-weight: 500;\r\n            font-size: 1rem;\r\n            line-height: 12pt;\r\n        }\r\n\r\n        .pricing {\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n}\r\n\r\n.buttons-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-self: start;\r\n    width: 100%;\r\n\r\n    .add-to-cart {\r\n        align-self: flex-start;\r\n        width: 135px;\r\n    }\r\n\r\n    .btn {\r\n        height: 41px;\r\n        margin-top: 6px;\r\n        margin-left: 10px;\r\n        width: 100px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./shoppingcart-item-container-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "any"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingcartStateService",
                        "type": "ShoppingCartStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "imageUrl": {
                    "name": "imageUrl",
                    "getSignature": {
                        "name": "imageUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 34
                    }
                },
                "packaging": {
                    "name": "packaging",
                    "getSignature": {
                        "name": "packaging",
                        "type": "string",
                        "returnType": "string",
                        "line": 45
                    }
                }
            },
            "templateData": "<div class=\"item-container\">\r\n    <div class=\"image-container\">\r\n        <figure>\r\n            <img [src]=\"imageUrl\" />\r\n        </figure>\r\n    </div>\r\n    <div class=\"text-container\">\r\n        <div class=\"description\">{{ item.description }}</div>\r\n        <div class=\"packaging\">{{packaging}}</div>\r\n        <div class=\"pricing\">\r\n            <ui-pricing-component [metadata]=\"metadata\" [pricing]=\"item.pricing\"></ui-pricing-component>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"buttons-container\">\r\n    <div class=\"add-to-cart\">\r\n        <ui-number-component\r\n            [value]=\"item.quantity\"\r\n            [metadata]=\"metadata\"\r\n            (valueChange)=\"onQuantityChange($event)\"\r\n        ></ui-number-component>\r\n    </div>\r\n    <button\r\n        uiRecaptcha\r\n        [action]=\"metadata && metadata.delete && metadata.delete.action\"\r\n        type=\"button\"\r\n        class=\"btn btn-light\"\r\n        (execute)=\"deleteFromBasket()\"\r\n    >\r\n        {{metadata && metadata.delete && metadata.delete.label}}\r\n    </button>\r\n</div>\r\n"
        },
        {
            "name": "SidebarMenuComponent",
            "id": "component-SidebarMenuComponent-f5600c5cfdfb68c68e9559872eeb46d8",
            "file": "projects/menu/src/lib/components/sidebar-menu/sidebar-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-menu-sidebar",
            "styleUrls": [
                "sidebar-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "sidebar-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_searchMap",
                    "defaultValue": "{ subTypes: [], brands: [], filters: [] }",
                    "type": "SearchMap",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "previous",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sideBarItems",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "addRemoveToSearchMap",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        },
                        {
                            "name": "arrayKey",
                            "type": "string"
                        },
                        {
                            "name": "predicate",
                            "type": "function",
                            "function": [
                                {
                                    "name": "i",
                                    "type": "any"
                                }
                            ]
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrayKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "predicate",
                            "type": "function",
                            "function": [
                                {
                                    "name": "i",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFilter",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasSelected",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedOnSidebar",
                    "args": [
                        {
                            "name": "sideBarItems",
                            "type": "Array<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "sideBarItems",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortMenuItems",
                    "args": [
                        {
                            "name": "menuItems",
                            "type": "Array<literal type>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<literal type>",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "menuItems",
                            "type": "Array<literal type>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { BaseComponent, DataStoreService, SearchMap, MenuStateService, WINDOW } from '@common/src/public-api';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'ui-menu-sidebar',\r\n    templateUrl: 'sidebar-menu.component.html',\r\n    styleUrls: ['sidebar-menu.component.scss'],\r\n})\r\nexport class SidebarMenuComponent extends BaseComponent {\r\n    private _searchMap: SearchMap = { subTypes: [], brands: [], filters: [] };\r\n\r\n    sideBarItems: Array<any>;    \r\n    previous: any;\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        dataStoreService: DataStoreService,\r\n        menuStateService: MenuStateService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        \r\n\r\n        this.previous = await this.dataStoreService.get('previous-page');\r\n        this._searchMap = Object.assign(this._searchMap, JSON.parse(atob(this.activatedRoute.snapshot.params['query'])));\r\n        \r\n        this.menuStateService.changeSideMenuFilters(this._searchMap);\r\n\r\n        this.activatedRoute.data.pipe(takeUntil(this.$destroy)).subscribe(data => {\r\n            const sideBarItems = data.sidebar;\r\n            if (sideBarItems) {\r\n                this.sideBarItems = this.setSelectedOnSidebar(sideBarItems);\r\n            }\r\n        });\r\n\r\n        this.menuStateService.sideMenuFilters.pipe(\r\n            takeUntil(this.$destroy)\r\n        ).subscribe(sm => {\r\n            if (sm) {\r\n                this._searchMap = sm;\r\n                this.setSelectedOnSidebar(this.sideBarItems);\r\n            }\r\n        })\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    hasSelected(items: Array<any>): boolean {\r\n        return items.find((i) => !!i.selected);\r\n    }\r\n\r\n    public async setSelected(item: any): Promise<void> {\r\n        item.selected = !item.selected;\r\n        switch (item.key) {\r\n            case 'subTypes':\r\n                this.addRemoveToSearchMap(item, 'subTypes', (i) => i === item.label);\r\n                break;\r\n            case 'brands':\r\n                this.addRemoveToSearchMap(item, 'brands', (i) => i === item.label);\r\n                break;\r\n            case 'sizePack':\r\n            case 'speciality':\r\n                this.addRemoveToSearchMap(item, 'filters', (i) =>  i.Value === item.label && i.Key === item.key, item.key);\r\n                break;\r\n        }\r\n\r\n        this.menuStateService.changeSideMenuFilters(this._searchMap);\r\n    }\r\n\r\n    public async clearFilter(items: Array<any>): Promise<void> {\r\n        if (Array.isArray(items) && items.length > 0) {\r\n            const key = items[0].key;\r\n            switch(key) {\r\n                case 'subTypes':\r\n                case 'brands':\r\n                    this._searchMap[key] = [];\r\n                    break;\r\n                case 'speciality':\r\n                case 'sizePack':\r\n                    let index: number;\r\n                    do {\r\n                        index = this._searchMap.filters.findIndex(kvp => kvp.Key === key);\r\n                        if (index >= 0) {\r\n                            this._searchMap.filters.splice(index, 1);\r\n                        }\r\n                    } while (index >= 0);\r\n                    break;\r\n\r\n            }\r\n            items.forEach((i) => (i.selected = false));\r\n            this.menuStateService.changeSideMenuFilters(this._searchMap);\r\n        }\r\n    }\r\n\r\n    private addRemoveToSearchMap(item: any, arrayKey: string, predicate: (i: any) => boolean, key: string = null): void {\r\n        if (!item.selected) {\r\n            const index = this._searchMap[arrayKey].findIndex(predicate);\r\n            this._searchMap[arrayKey].splice(index, 1);\r\n        } else {\r\n            if (!key) {\r\n                this._searchMap[arrayKey].push(item.label);\r\n            } else {\r\n                this._searchMap[arrayKey].push({ Key: key, Value: item.label });\r\n            }\r\n        }\r\n    }\r\n\r\n    private sortMenuItems(menuItems: Array<{ label: string }>): Array<{label: string}> {\r\n        return menuItems.map(m => m.label).sort().map(i => { return { label: i}; });\r\n    }\r\n\r\n    private setSelectedOnSidebar(sideBarItems: Array<any>): Array<any> {\r\n        const isSelected = (key: string, value: string): boolean => {\r\n            let selected = false;\r\n            switch (key) {\r\n                case 'subTypes':\r\n                case 'brands':\r\n                    return this._searchMap[key].findIndex(v => v === value) !== -1;\r\n                case 'sizePack':\r\n                case 'speciality':\r\n                    return this._searchMap['filters'].findIndex(v => v.Key === key && v.Value === value) !== -1;\r\n            }\r\n            return selected;\r\n        };\r\n\r\n        if (sideBarItems) {\r\n            sideBarItems.forEach((sb) => {\r\n                const key =  sb.key ? sb.key : 'subTypes';\r\n                sb.menuItems = this.sortMenuItems(sb.menuItems);\r\n                sb.menuItems.forEach((i: any) => {                    \r\n                    i.selected = isSelected(key, i.label);\r\n                    i.key = key;\r\n                });\r\n            });\r\n        }\r\n\r\n        return sideBarItems;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    display: none;\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {\r\n        margin: 10px 20px;\r\n        font-size: $font-size;\r\n        display: block;\r\n\r\n        .previous {\r\n            cursor: pointer;\r\n            color: $highlight;\r\n            font-size: 1.2em;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        ul {\r\n            list-style: none;\r\n\r\n            li {\r\n                color: $mobile-small-color;\r\n\r\n                &.list-header {\r\n                    font-weight: 500;\r\n                    margin-bottom: 7px;\r\n                    cursor: default;\r\n                    text-transform: capitalize;\r\n                    color: $secondary-color;\r\n                    font-size: 0.9rem;\r\n                }\r\n\r\n                &.sub-list-header {\r\n                    font-weight: 500;\r\n                    margin-left: 10px;\r\n                    margin-top: 10px;\r\n                    margin-bottom: 3px;\r\n                    cursor: default;\r\n\r\n                    a {\r\n                        cursor: default;\r\n                    }\r\n                }\r\n\r\n                &.nav-item {\r\n                    margin-left: 10px;\r\n                    padding: 2px;\r\n\r\n                    &:hover a {\r\n                        color: $highlight;\r\n                    }\r\n\r\n                    &.checkbox {\r\n                        margin-left: 15px;\r\n                        line-height: 18px;\r\n                    }\r\n\r\n                    &.list-item {\r\n                        margin-left: 17px;\r\n                    }\r\n                }\r\n\r\n                &.clear {\r\n                    color: $highlight;\r\n                    font-weight: 500;\r\n                    margin-left: 0;\r\n                    margin-top: -8px;\r\n                }\r\n\r\n                &.selected a {\r\n                    color: $highlight;\r\n                }\r\n                a {\r\n                    color: $mobile-small-color;\r\n                    position: relative;\r\n                    font-size: 0.8rem;\r\n\r\n                    &.checkbox i {\r\n                        position: absolute;\r\n                        font-size: 15px;\r\n                        left: -20px;\r\n                        top: 2px;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "sidebar-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<ng-container *ngIf=\"sideBarItems && sideBarItems.length\">\r\n    <div class=\"container\">\r\n        <div *ngIf=\"previous && previous.url\" class=\"previous\" [routerLink]=\"[previous.url]\">{{previous && previous.label}}</div>\r\n        <ng-container *ngFor=\"let item of sideBarItems; let idx = index;\">\r\n            <ul [style.marginBottom]=\"item.menuItems.length > 0 ? '20px' : '0'\" [style.marginTop]=\"idx === 0 ? '20px' : '0'\">\r\n                <li *ngIf=\"item.key\" class=\"list-header\">{{item.key | textTransform}}</li>\r\n                <ul *ngIf=\"item.menuItems && item.menuItems.length > 0\">\r\n                    <ng-container *ngTemplateOutlet=\"menuItemsTemplate;context:item\"></ng-container>\r\n                </ul>\r\n            </ul>\r\n        </ng-container>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #menuItemsTemplate let-controlType=\"controlType\" let-menuItems=\"menuItems\">\r\n    <li class=\"nav-item clear\" [hidden]=\"!hasSelected(menuItems)\" (click)=\"clearFilter(menuItems)\">Clear</li>\r\n    <ng-container *ngFor=\"let item of menuItems\">\r\n        <ng-container *ngIf=\"item && item.label && item.label.length > 0\">\r\n            <ng-container *ngIf=\"controlType === 'Link'\">\r\n                <ng-container *ngIf=\"item.itemType !== 'List'\">\r\n                    <li class=\"nav-item\" [ngClass]=\"{ 'selected' : item.selected }\" (click)=\"setSelected(item)\">\r\n                        <a class=\"nav-link\">{{item.label}}</a>\r\n                    </li>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.itemType === 'List'\">\r\n                    <li class=\"sub-list-header\">\r\n                        <a class=\"nav-link\">{{item.label}}</a>\r\n                    </li>\r\n                    <ul>\r\n                        <li *ngFor=\"let listItem of item.menuItems\" class=\"nav-item list-item\">\r\n                            <a class=\"nav-link\">{{listItem.label}}</a>\r\n                        </li>\r\n                    </ul>\r\n                </ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"controlType === 'Checkbox'\">\r\n                <li class=\"nav-item checkbox\" [ngClass]=\"{ 'selected' : item.selected }\" (click)=\"setSelected(item)\">\r\n                    <a class=\"nav-link checkbox\">\r\n                        <i *ngIf=\"item.selected\" class=\"material-icons\">check_box</i>\r\n                        <i *ngIf=\"!item.selected\" class=\"material-icons\">check_box_outline_blank</i>\r\n                        {{item.label}}\r\n                    </a>\r\n                </li>\r\n            </ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n</ng-template>\r\n"
        },
        {
            "name": "SigninComponent",
            "id": "component-SigninComponent-db82d1e7af2730d04e2f9b11c8c54d87",
            "file": "projects/header/src/lib/components/header/child-components/sign-in/sign-in.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-signin",
            "styleUrls": [
                "./sign-in.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-in.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onRegisterClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onSignInClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { RouteKeys, SearchStateService } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-signin',\r\n    templateUrl: './sign-in.component.html',\r\n    styleUrls: ['./sign-in.component.scss'],\r\n})\r\nexport class SigninComponent {\r\n    @Input() metadata: any;\r\n\r\n    constructor(\r\n        private searchStateService: SearchStateService,\r\n        private router: Router\r\n    ) {\r\n    }\r\n    \r\n    onSignInClick(): void {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n        this.router.navigateByUrl(RouteKeys.Signin);\r\n    }\r\n\r\n    onRegisterClick(): void {\r\n        this.searchStateService.clearQuickSearch$.next();\r\n        this.router.navigateByUrl(RouteKeys.Register);\r\n    }\r\n    \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\n.container {\r\n    cursor: pointer;\r\n    position: relative;\r\n\r\n    a {\r\n        position: relative;\r\n\r\n        &:hover {\r\n            color: $highlight;\r\n        }\r\n        \r\n        > div {\r\n            text-align: center;\r\n            padding-top: 10px;\r\n            font-size: 1rem;\r\n            color: white;\r\n            position: relative;\r\n        }        \r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {\r\n        a {\r\n            > div:after {\r\n                @include down-arrow(-16px, 1px);\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./sign-in.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "searchStateService",
                        "type": "SearchStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container\">\r\n    <a (click)=\"onSignInClick()\" class=\"small-text signin\">        \r\n        <div>{{metadata && metadata.signIn && metadata.signIn.label}}</div>\r\n    </a>\r\n</div>\r\n"
        },
        {
            "name": "SignoutComponent",
            "id": "component-SignoutComponent-8e1e09a0226d4235b5353ca5af24d61d",
            "file": "projects/header/src/lib/components/header/child-components/sign-out/sign-out.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-signout",
            "styleUrls": [
                "./sign-out.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-out.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "firstName",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "metadata",
                    "line": 21,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "signout",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "show",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "onOptionClick",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSignoutClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114,
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { AccountService, NavigationService, SearchStateService } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-signout',\r\n    templateUrl: './sign-out.component.html',\r\n    styleUrls: ['./sign-out.component.scss'],\r\n})\r\nexport class SignoutComponent {\r\n    private _firstName: string;\r\n\r\n    @Input()\r\n    get firstName(): string {\r\n        return this._firstName && this._firstName.length > 0 ? `, ${this._firstName}` : '';\r\n    }\r\n\r\n    set firstName(value: string) {\r\n        this._firstName = value;\r\n    }\r\n\r\n    @Input() metadata: any;\r\n    @Output() signout = new EventEmitter<void>();\r\n    show: boolean;\r\n\r\n    constructor(\r\n        private navigationService: NavigationService,\r\n        private accountService: AccountService\r\n    ) { }\r\n\r\n    public async onSignoutClick(): Promise<void> {\r\n        await this.navigationService.clear();\r\n        this.signout.emit();\r\n    }\r\n\r\n    public async onOptionClick(key: string): Promise<void> {\r\n        await this.accountService.navigate(key);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../ui/src/scss/variables';\r\n@import '../../../../../../../ui/src/scss/mixins';\r\n\r\ndiv.menu {\r\n    cursor: pointer;\r\n    position: relative;\r\n\r\n    &:hover {\r\n        color: $highlight;\r\n    }\r\n\r\n    > div:not(.dropdown) {\r\n        text-align: right;\r\n        padding-top: 10px;\r\n        font-size: 1rem;\r\n        color: white;\r\n        white-space: nowrap;\r\n        padding-right: 45px;\r\n        position: relative;\r\n\r\n        &:after {\r\n            @include down-arrow(-16px, 1px);\r\n            right: 27px;\r\n            bottom: 0;\r\n        }\r\n    }\r\n\r\n    .dropdown {\r\n        position: absolute;\r\n        right: 25px;\r\n        top: 35px;\r\n        width: 200px;\r\n        padding: 11px;\r\n        border: 0 solid transparent;\r\n        color: white;\r\n        background: $primary-color;\r\n        z-index: 1;\r\n        font-size: 1rem;\r\n        \r\n        &:after {\r\n            @include up-indicator (-3px, $tertiary-color);\r\n        }\r\n\r\n        div {\r\n            width: 100%;\r\n            height: 39px;\r\n            text-align: left;\r\n            cursor: pointer;\r\n            font-weight: normal;\r\n            padding: 8px;\r\n            border: 1px solid transparent;\r\n            border-bottom: 1px solid $secondary-color;\r\n            \r\n            &.list-header {\r\n                background-color: $tertiary-color;\r\n                width: calc(100% + 22px);\r\n                margin-left: -11px;\r\n                margin-top: -12px;\r\n                height: 50px;\r\n                padding: 14px 8px;\r\n                cursor: default;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./sign-out.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accountService",
                        "type": "AccountService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "firstName": {
                    "name": "firstName",
                    "setSignature": {
                        "name": "firstName",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\r\n    class=\"small-text menu\"\r\n    (touch)=\"show = !show\"\r\n    (click)=\"show = !show\"\r\n    (outsideClick)=\"show = false\"\r\n>\r\n    <div>{{metadata && metadata.hello && metadata.hello.label}}{{firstName }}</div>\r\n\r\n    <div [hidden]=\"!show\" class=\"dropdown\">\r\n        <ng-container *ngIf=\"metadata && metadata.options\">\r\n            <div class=\"list-header\">{{metadata && metadata.accountAndOrders && metadata.accountAndOrders.label}}</div>\r\n            <ng-container *ngFor=\"let o of metadata.options\">\r\n                <div (click)=\"onOptionClick(o.key)\">{{o.label}}</div>\r\n            </ng-container>\r\n        </ng-container>\r\n        <div (click)=\"onSignoutClick()\">{{metadata && metadata.signOut && metadata.signOut.label}}</div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SlotDesktopComponent",
            "id": "component-SlotDesktopComponent-33217d98760e92df61f0111cf9ec257b",
            "file": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/slot-desktop/slot-desktop.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-slot-desktop-component",
            "styleUrls": [
                "./slot-desktop.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slot-desktop.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "slots",
                    "line": 18,
                    "type": "Array<AvailableSlot>"
                },
                {
                    "name": "tab",
                    "line": 19,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "slotSelected",
                    "defaultValue": "new EventEmitter<AvailableSlot>()",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_tab",
                    "type": "TabItem",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "slotWeekItems",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "initialiseSlots",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onSlotClick",
                    "args": [
                        {
                            "name": "slot",
                            "type": "AvailableSlot"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "slot",
                            "type": "AvailableSlot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "a",
                            "type": "AvailableSlot"
                        },
                        {
                            "name": "b",
                            "type": "AvailableSlot"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "AvailableSlot",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "type": "AvailableSlot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AvailableSlot, BaseComponent, WINDOW } from '@common/src/public-api';\r\nimport { from } from 'rxjs';\r\nimport { map, mergeAll, toArray } from 'rxjs/operators';\r\nimport { TabItem } from '../../../../../types/tab-item';\r\n\r\n@Component({\r\n    selector: 'ui-slot-desktop-component',\r\n    templateUrl: './slot-desktop.component.html',\r\n    styleUrls: ['./slot-desktop.component.scss'],\r\n})\r\nexport class SlotDesktopComponent extends BaseComponent {\r\n    private _tab: TabItem;\r\n\r\n    slotWeekItems: Array<{ label: string; slots?: Array<AvailableSlot>; key: number }>;\r\n\r\n    @Input() slots: Array<AvailableSlot>;\r\n    @Input() set tab(value: TabItem) {\r\n        if (value) {\r\n            this._tab = value;\r\n            this.initialiseSlots();\r\n        }\r\n    }\r\n    get tab(): TabItem {\r\n        return this._tab;\r\n    }\r\n    @Output() slotSelected = new EventEmitter<AvailableSlot>();\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public async onSlotClick(slot: AvailableSlot): Promise<void> {\r\n        this.slotSelected.emit(slot);\r\n    }\r\n\r\n    private initialiseSlots(): void {\r\n        this.slotWeekItems = [];\r\n\r\n        const tabItem = this._tab;\r\n\r\n        if (tabItem) {\r\n            tabItem.days[0].slots.map((s) =>\r\n                this.slotWeekItems.push({\r\n                    key: Number(s.startTime) + Number(s.endTime),\r\n                    label: `${s.startTime}:00 - ${s.endTime}:00`,\r\n                })\r\n            );\r\n            from(tabItem.days)\r\n                .pipe(\r\n                    map((d) => d.slots),\r\n                    mergeAll(),\r\n                    toArray()\r\n                )\r\n                .subscribe((slots) => {\r\n                    this.slotWeekItems.forEach(\r\n                        (wi) =>\r\n                            (wi.slots = slots\r\n                                .filter((s) => Number(s.startTime) + Number(s.endTime) === wi.key)\r\n                                .sort(this.sort))\r\n                    );\r\n                });\r\n        }\r\n    }\r\n\r\n    private sort(a: AvailableSlot, b: AvailableSlot): number {\r\n        const aDeliveryTime = new Date(a.deliveryDate).getTime();\r\n        const bDeliveryTime = new Date(b.deliveryDate).getTime();\r\n        if (aDeliveryTime < bDeliveryTime) return -1;\r\n        if (aDeliveryTime > bDeliveryTime) return 1;\r\n\r\n        return 0;\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui//src/scss/variables';\r\n\r\n.slot-container {\r\n    margin-top: 0;\r\n    border: 1px solid #f1f1f1;\r\n    padding: 30px 7px;\r\n    border-radius: 5px;\r\n    border-top: 1px solid transparent;\r\n\r\n    .slot {\r\n        height: 40px;\r\n        width: 100%;\r\n        text-align: center;\r\n        border: 1px dashed #a1a1a1;\r\n        padding: 13px 0;\r\n        margin-bottom: 10px;\r\n        font-size: 0.85em;\r\n        color: $mobile-regular-color;\r\n\r\n        &.available {\r\n            border: 1px solid #a1a1a1;\r\n        }\r\n\r\n        &.selected {\r\n            background-color: $mobile-regular-color;\r\n            color: white;\r\n        }\r\n\r\n        &.not-available {\r\n            background-color: #fff6f6;\r\n            font-weight: bold;\r\n            font-size: 0.8em;\r\n            color: #555;\r\n        }\r\n    }\r\n\r\n    .week-container {\r\n        padding: 1px;\r\n        position: relative;\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        justify-content: stretch;\r\n        column-gap: 5px;\r\n        row-gap: 15px;\r\n\r\n        .week-day {\r\n            display: grid;\r\n            grid-auto-flow: column;\r\n            justify-content: stretch;\r\n            grid-template-columns: 120px repeat(7, 1fr);\r\n\r\n            .week-item {\r\n                display: grid;\r\n                grid-auto-flow: row;\r\n                text-align: center;\r\n\r\n                .week-item-weekday {\r\n                    margin-bottom: 10px;\r\n                    text-transform: uppercase;\r\n                    font-size: 0.75em;\r\n                }\r\n\r\n                .week-item-date {\r\n                    height: 25px;\r\n                    width: 25px;\r\n                    padding: 3px;\r\n                    border: 1px solid transparent;\r\n                    font-size: 0.85em;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    padding-top: 5.5px;\r\n                    padding-left: 2px;\r\n                }\r\n            }\r\n        }\r\n\r\n        .week-slot {\r\n            &-container {\r\n                display: grid;\r\n                grid-auto-flow: row;\r\n                justify-content: space-between;\r\n                grid-template-columns: 120px repeat(7, 1fr);\r\n                row-gap: 5px;\r\n                column-gap: 5px;\r\n            }\r\n\r\n            &-item {\r\n                height: 40px;\r\n                text-align: center;\r\n                padding-top: 13px;\r\n\r\n                .not-available,\r\n                .available {\r\n                    font-weight: bold;\r\n                    font-size: 0.75em;\r\n                    padding: 7px;\r\n                }\r\n\r\n                .not-available {\r\n                    background-color: #fff6f6;\r\n                    color: #a1a1a1;\r\n                    border: 1px dashed #a1a1a1;\r\n                }\r\n\r\n                .available {\r\n                    background-color: #e7ffef;\r\n                    color: #555;\r\n                    border: 1px solid #a1a1a1;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .selected {\r\n                    background-color: $mobile-regular-color;\r\n                    color: white;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./slot-desktop.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "tab": {
                    "name": "tab",
                    "setSignature": {
                        "name": "tab",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tab",
                        "type": "",
                        "returnType": "TabItem",
                        "line": 25
                    }
                }
            },
            "templateData": "<div class=\"slot-container\">\r\n    <div class=\"week-container\">\r\n        <div class=\"week-day\">\r\n            <div class=\"week-item\">\r\n                <span colspan=\"2\"></span>\r\n            </div>\r\n            <div class=\"week-item\" *ngFor=\"let currentDay of tab.days\">\r\n                <span class=\"week-item-weekday\">{{ currentDay.weekday }}</span>\r\n                <span\r\n                    ><span class=\"week-item-date\">{{ currentDay.day }}</span></span\r\n                >\r\n            </div>\r\n        </div>\r\n        <div class=\"week-slot-container\">\r\n            <ng-container *ngFor=\"let item of slotWeekItems\">\r\n                <div class=\"week-slot-item\">\r\n                    <span>{{ item.label }}</span>\r\n                </div>\r\n                <div class=\"week-slot-item\" *ngFor=\"let s of item.slots\">\r\n                    <span\r\n                        class=\"available\"\r\n                        [ngClass]=\"{ selected: s.selected }\"\r\n                        *ngIf=\"s.availableSlots > 0\"\r\n                        (click)=\"onSlotClick(s)\"\r\n                        >Available</span\r\n                    >\r\n                    <span class=\"not-available\" *ngIf=\"s.availableSlots === 0\">Unavailable</span>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "SlotMobileComponent",
            "id": "component-SlotMobileComponent-6f1280c1d5fb273a7ddcbdb1703b812b",
            "file": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/slot-mobile/slot-mobile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-slot-mobile-component",
            "styleUrls": [
                "./slot-mobile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slot-mobile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedDate",
                    "line": 12,
                    "type": "Date"
                },
                {
                    "name": "slots",
                    "line": 11,
                    "type": "Array<AvailableSlot>"
                }
            ],
            "outputsClass": [
                {
                    "name": "slotSelected",
                    "defaultValue": "new EventEmitter<AvailableSlot>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onSlotClick",
                    "args": [
                        {
                            "name": "slot",
                            "type": "AvailableSlot"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "slot",
                            "type": "AvailableSlot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AvailableSlot, BaseComponent, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-slot-mobile-component',\r\n    templateUrl: './slot-mobile.component.html',\r\n    styleUrls: ['./slot-mobile.component.scss'],\r\n})\r\nexport class SlotMobileComponent extends BaseComponent {\r\n    @Input() slots: Array<AvailableSlot>;\r\n    @Input() selectedDate: Date;\r\n    @Output() slotSelected = new EventEmitter<AvailableSlot>();\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    public get selectedDateSlots(): Array<AvailableSlot> {\r\n        let slots = new Array<AvailableSlot>();\r\n\r\n        if (this.selectedDate && this.slots) {\r\n            slots = this.slots.filter((s) => {\r\n                const valid =\r\n                new Date(new Date(s.deliveryDate).toDateString()).getTime() === new Date(this.selectedDate.toDateString()).getTime();\r\n                return valid;\r\n            });\r\n        }\r\n\r\n        return slots;\r\n    }\r\n\r\n    public async onSlotClick(slot: AvailableSlot): Promise<void> {\r\n        this.slotSelected.emit(slot);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui//src/scss/variables';\r\n\r\n.slot-container {\r\n    margin-top: 30px;\r\n\r\n    .slot {\r\n        height: 40px;\r\n        width: 100%;\r\n        text-align: center;\r\n        border: 1px dashed #a1a1a1;\r\n        padding: 13px 0;\r\n        margin-bottom: 10px;\r\n        font-size: 0.85em;\r\n        color: $mobile-regular-color;\r\n\r\n        &.available {\r\n            border: 1px solid #a1a1a1;\r\n        }\r\n\r\n        &.selected {\r\n            background-color: $mobile-regular-color;\r\n            color: white;\r\n        }\r\n\r\n        &.not-available {\r\n            background-color: #fff6f6;\r\n            font-weight: bold;\r\n            font-size: 0.8em;\r\n            color: #555;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./slot-mobile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "selectedDateSlots": {
                    "name": "selectedDateSlots",
                    "getSignature": {
                        "name": "selectedDateSlots",
                        "type": "",
                        "returnType": "Array<AvailableSlot>",
                        "line": 22
                    }
                }
            },
            "templateData": "<div class=\"slot-container\">\r\n    <ng-container *ngFor=\"let slot of selectedDateSlots\">\r\n        <div\r\n            *ngIf=\"slot.availableSlots > 0\"\r\n            class=\"slot available\"\r\n            [ngClass]=\"{ selected: slot.selected }\"\r\n            (click)=\"onSlotClick(slot)\"\r\n        >\r\n            {{ slot.startTime }}:00 - {{ slot.endTime }}:00\r\n        </div>\r\n        <div *ngIf=\"slot.availableSlots === 0\" class=\"slot not-available\">Unavailable</div>\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "StarComponent",
            "id": "component-StarComponent-cb665899b276cbf5a44f0180ad8089b2",
            "file": "projects/common/src/lib/component/review/star-rating/child-components/star-component/star.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-star-component",
            "styleUrls": [
                "./star.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./star.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<{ selected: boolean, value: number }>()",
                    "line": 11,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onStarClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ui-star-component',\r\n    templateUrl: './star.component.html',\r\n    styleUrls: ['./star.component.scss']\r\n})\r\nexport class StarComponent {\r\n    @Input() selected: boolean = false;\r\n    @Input() value: number = 0;\r\n    @Output() onChange: EventEmitter<{ selected: boolean, value: number }> = new EventEmitter<{ selected: boolean, value: number }>();\r\n\r\n    get rating(): string {\r\n        return `--rating: ${this.selected ? 1 : 0}`;\r\n    }\r\n\r\n    onStarClick(): void {\r\n        this.onChange.emit({ selected: !this.selected, value: this.value });\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".one-star {\r\n    --star-size: 2.5rem;\r\n}",
                    "styleUrl": "./star.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "rating": {
                    "name": "rating",
                    "getSignature": {
                        "name": "rating",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "templateData": "<span class=\"one-star\" (click)=\"onStarClick()\" [attr.style]=\"rating\"></span>"
        },
        {
            "name": "StarRatingComponent",
            "id": "component-StarRatingComponent-2e08f8fa75ca04a29070c45eb505f198",
            "file": "projects/common/src/lib/component/review/star-rating/star-rating.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-star-rating-component",
            "styleUrls": [
                "./star-rating.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./star-rating.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "rating",
                    "defaultValue": "0",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<{ selected: boolean, value: number }>()",
                    "line": 11,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStarStateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ValueConverter } from \"@angular/compiler/src/render3/view/template\";\r\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'ui-star-rating-component',\r\n    templateUrl: './star-rating.component.html',\r\n    styleUrls: ['./star-rating.component.scss']\r\n})\r\nexport class StarRatingComponent {\r\n    @Input() rating: number = 0;\r\n    @Output() onChange: EventEmitter<{ selected: boolean, value: number }> = new EventEmitter<{ selected: boolean, value: number }>();\r\n\r\n    public async onStarStateChange(event: { selected: boolean, value: number }): Promise<void> {\r\n        this.onChange.emit(event);\r\n    }\r\n\r\n    isSelected(value: number): boolean {\r\n        return value <= this.rating;\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./star-rating.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">    \r\n    <ui-star-component (onChange)=\"onStarStateChange($event)\" [value]=\"1\" [selected]=\"isSelected(1)\"></ui-star-component>\r\n    <ui-star-component (onChange)=\"onStarStateChange($event)\" [value]=\"2\" [selected]=\"isSelected(2)\"></ui-star-component>\r\n    <ui-star-component (onChange)=\"onStarStateChange($event)\" [value]=\"3\" [selected]=\"isSelected(3)\"></ui-star-component>\r\n    <ui-star-component (onChange)=\"onStarStateChange($event)\" [value]=\"4\" [selected]=\"isSelected(4)\"></ui-star-component>\r\n    <ui-star-component (onChange)=\"onStarStateChange($event)\" [value]=\"5\" [selected]=\"isSelected(5)\"></ui-star-component>\r\n</div>"
        },
        {
            "name": "StatementComponent",
            "id": "component-StatementComponent-80e63b9c01bd076c4b8c26fe66cc163a",
            "file": "projects/common/src/lib/component/common/statement/statement.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-statement-component",
            "styleUrls": [
                "./statement.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./statement.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "line": 12,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { WINDOW } from '@common/src/lib/services/window.service';\r\nimport { BaseComponent } from '../../base.component';\r\n\r\n@Component({\r\n    selector: 'ui-statement-component',\r\n    templateUrl: './statement.component.html',\r\n    styleUrls: ['./statement.component.scss'],\r\n})\r\nexport class StatementComponent extends BaseComponent {\r\n    @Input() metadata: any;\r\n\r\n    constructor (\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui//src/scss/variables';\r\n\r\n.statement-container {\r\n    text-align: left;\r\n    line-height: 15px;\r\n\r\n    .statement-link {\r\n        cursor: pointer;\r\n        font-size: 0.85em;\r\n        font-weight: 500;\r\n\r\n        a {\r\n            color: $highlight;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./statement.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<div class=\"statement-container\" *ngIf=\"metadata && metadata.length > 0\">\r\n    <ng-container *ngFor=\"let item of metadata\">\r\n        <span *ngIf=\"item.type === 'text'\" class=\"statement-text\" [ngClass]=\"item.class\">{{ item.text }}</span>\r\n        <span *ngIf=\"item.type === 'link'\" class=\"statement-link\"\r\n            ><a [href]=\"item.url\" [attr.target]=\"item.newWindow ? '_blank' : null\">{{ item.text }}</a></span\r\n        >\r\n    </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "SubMenuComponent",
            "id": "component-SubMenuComponent-70d8d2499c5407754ad2c2bac193270d",
            "file": "projects/menu/src/lib/components/submenu/submenu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-submenu",
            "styleUrls": [
                "submenu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "submenu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_menuData",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_refresh",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "category",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "mainMenuKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "menuChildItems",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showDropMenu",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showSubMenu",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subMenuKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "subMenuScroller",
                    "type": "ElementRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'wrapper'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<literal type>",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onDropMenuItemClick",
                    "args": [
                        {
                            "name": "category",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMenuItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMenuStateServiceObservables",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "setSelectedSubMenuItem",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "showMenuItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { BaseMenuComponent } from '../base-menu.component';\r\nimport { DataStoreService, MenuStateService, NavigationService, WINDOW } from '@common/src/public-api';\r\n\r\n@Component({\r\n    selector: 'ui-submenu',\r\n    templateUrl: 'submenu.component.html',\r\n    styleUrls: ['submenu.component.scss'],\r\n})\r\nexport class SubMenuComponent extends BaseMenuComponent {\r\n    private _menuData: Array<any>;\r\n    private _refresh: boolean = true;\r\n\r\n    menuChildItems: Array<any> = [];\r\n    categories: Array<{ label: string, url: string, selected: boolean }> = [];\r\n    category: { label: string, url: string, selected: boolean };\r\n    showDropMenu: boolean = false;\r\n    @ViewChild('wrapper') subMenuScroller: ElementRef<any>;\r\n\r\n    subMenuKey: string\r\n    showSubMenu: boolean\r\n    mainMenuKey: string;\r\n\r\n    constructor(\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        private activatedRoute: ActivatedRoute,\r\n        private navigationService: NavigationService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        this.setMenuStateServiceObservables();\r\n\r\n        this.activatedRoute.data.pipe(\r\n            takeUntil(this.$destroy)\r\n        ).subscribe(async data => {\r\n            if (!this._refresh && this.isMobile) return;\r\n            \r\n            this._refresh = false;\r\n\r\n            if (!this._menuData) {\r\n                this._menuData = this.activatedRoute.snapshot.data.menuData;\r\n            }\r\n            this.menuChildItems = data.subMenu;\r\n            this.categories = this.getCategories();\r\n            this.category = this.categories.find(c => c.selected === true);\r\n\r\n            await this.setSelectedSubMenuItem()\r\n        });\r\n        \r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onDropMenuItemClick(category: { label: string, url: string, selected: boolean }): Promise<void> {\r\n        this.showDropMenu = false;\r\n        this._refresh = true;\r\n\r\n        await this.navigationService.navigateForCategory(category.url, category.label, this.currentPage, false);\r\n    }\r\n\r\n    public getSelectedItem(): any {\r\n        const selectedItem = this.menuChildItems.find(c => c.selected === true);\r\n\r\n        return { item: selectedItem };\r\n    }\r\n\r\n    public getItem(item): any {\r\n        return { item };\r\n    }\r\n\r\n    public async onMenuItemClick(item: any): Promise<void> {\r\n        this.menuChildItems.forEach((ci: any) => ci.selected = false);\r\n        this.showDropMenu = false;\r\n\r\n        item.selected = true;       \r\n        \r\n        await this.navigationService.navigateForSubcategory(item.url, item.label)\r\n        this.subMenuScroller.nativeElement.scrollLeft = 0;\r\n    }\r\n\r\n    public showMenuItem(item: any): boolean {\r\n        return !this.isMobile || (item && item.selected !== true);\r\n    }\r\n\r\n    private getCategories(): Array<{ label: string, url: string, selected: boolean }> {\r\n        if (!Array.isArray(this._menuData)) {\r\n            return [];\r\n        } else {\r\n            return this._menuData\r\n                        .filter(m => m.active === true)\r\n                        .sort((a: any, b: any) => a.order - b.order)\r\n                        .map(m => { \r\n                            return { \r\n                                label: m.label,\r\n                                url: m.url,\r\n                                selected: m.label?.toLowerCase() === this.mainMenuKey?.toLowerCase()\r\n                            }; \r\n                        });\r\n        }\r\n    }\r\n\r\n    private async setSelectedSubMenuItem(): Promise<void> {\r\n        \r\n        const selected: any = this.subMenuKey?.toLowerCase();\r\n        if (selected) {\r\n            const selectedItem = this.menuChildItems.find(c => c.label.toLowerCase() === selected);\r\n            if (selectedItem) {\r\n                selectedItem.selected = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private setMenuStateServiceObservables(): void {\r\n        this.menuStateService.mainMenuKey.pipe(takeUntil(this.$destroy)).subscribe(v => this.mainMenuKey = v);\r\n        this.menuStateService.subMenuKey.pipe(takeUntil(this.$destroy)).subscribe(v => this.subMenuKey = v);\r\n        this.menuStateService.showSubMenu.pipe(takeUntil(this.$destroy)).subscribe(v => this.showSubMenu = v);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../ui/src/scss/variables';\r\n\r\n.desktop-container {\r\n    display: none;\r\n    --sub-navbar-grid-template-columns: auto;\r\n    --sub-navbar-height: 52px;\r\n    --nav-item-container-background-color: transparent;\r\n    --nav-item-container-color: white;\r\n    --wrapper-margin: 2px 0;\r\n    --nav-item-container-whitespace: nowrap;\r\n    --nav-item-position: static;\r\n    --nav-item-container-border: 1px solid transparent;\r\n    --nav-item-container-selected-background-color: unset;\r\n    --nav-item-container-selected-color: #fff;\r\n    --nav-item-container-selected-opacity: 0.7;\r\n    --nav-item-container-selected-border: 1px solid;\r\n    --nav-item-container-font-weight: 700;\r\n    --nav-item-letter-spacing: 0.5px;\r\n\r\n    &.sub-navbar-container {\r\n        .sub-navbar {\r\n            .nav-item-container {\r\n                font-size: 0.9rem;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.mobile-container {\r\n    --sub-navbar-grid-template-columns: 100px auto;\r\n    --sub-navbar-height: 62px;\r\n    --nav-item-container-background-color:  #f3f3f3;\r\n    --nav-item-container-color: black;\r\n    --wrapper-margin: 4px 0;\r\n    --nav-item-container-whitespace: normal;\r\n    --nav-item-position: absolute;\r\n    --nav-item-container-border: 1px solid $secondary-color;\r\n    --nav-item-container-selected-background-color: #ffe9e9;\r\n    --nav-item-container-selected-color: #a1a1a1;\r\n    --nav-item-container-selected-opacity: 1;\r\n    --nav-item-container-selected-border: 0px solid;\r\n    --nav-item-letter-spacing: 0.25px;\r\n    --nav-item-container-font-weight: normal;\r\n\r\n    &.sub-navbar-container {\r\n        .sub-navbar {\r\n            .nav-item-container {\r\n                min-width: 145px;\r\n                width: 145px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.sub-navbar-container {\r\n    border: 1px solid transparent;\r\n    width: 100vw;\r\n\r\n    .sub-navbar {\r\n        padding: 0;\r\n        margin: 0;\r\n        width: 100vw;\r\n        border: 1px solid transparent;\r\n        display: grid;\r\n        font-size: 0.8rem;\r\n        grid-auto-flow: column;\r\n        grid-template-columns: var(--sub-navbar-grid-template-columns);\r\n        justify-content: stretch;\r\n        height: var(--sub-navbar-height);\r\n\r\n        .nav-item-container {\r\n            white-space: var(--nav-item-container-whitespace);\r\n            cursor: pointer;\r\n            border-radius: 5px;\r\n            display: inline-block;\r\n            position: relative;\r\n            margin-left: 5px;\r\n            padding: 11px;\r\n            border: var(--nav-item-container-border);\r\n            background-color: var(--nav-item-container-background-color);\r\n            color: var(--nav-item-container-color);\r\n            text-align: center;\r\n            font-weight: var(--nav-item-container-font-weight);\r\n            \r\n            &.selected {\r\n                background-color: var(--nav-item-container-selected-background-color);\r\n                color: var(--nav-item-container-selected-color);\r\n                opacity: var(--nav-item-container-selected-opacity);\r\n                border: var(--nav-item-container-selected-border);\r\n                cursor: not-allowed;\r\n            }\r\n        }\r\n    \r\n        .nav-item {\r\n            position: var(--nav-item-position);\r\n            left: 45%;\r\n            top: 50%;\r\n            width: calc(100% - 30px);\r\n            transform: translate(-50%, -50%);\r\n            line-height: 17px;\r\n            letter-spacing: var(--nav-item-letter-spacing);\r\n        }\r\n\r\n        .selected-category {\r\n            padding: 7px 33px 7px 7px;\r\n            cursor: pointer;\r\n            border-radius: 5px;\r\n            position: relative;\r\n            background-color: $secondary-color;\r\n            color: #fff;\r\n            border-radius: 5px;\r\n\r\n            i {\r\n                content: ' ';\r\n                position: absolute;\r\n                right: 2px;\r\n                transform: translateY(-50%);\r\n                top: 50%;\r\n            }\r\n        }\r\n\r\n        .wrapper {\r\n            overflow-y: hidden;\r\n            height: 100%;\r\n            margin: var(--wrapper-margin);\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .sub-category-container {\r\n            display: flex;\r\n            height: calc(100% - 8px);\r\n        }\r\n    }\r\n}\r\n\r\n.drop-menu-container {\r\n    position: absolute;\r\n    left: 3px;\r\n    display: grid;\r\n    grid-auto-flow: row;\r\n    row-gap: 5px;\r\n    justify-content: stretch;\r\n    background-color: #f3f3f3;\r\n    border: 1px solid $secondary-color;\r\n    padding: 0 7px;\r\n    z-index: 1;\r\n    \r\n    .drop-menu-item {\r\n        padding: 6px 18px;\r\n        border: 1px solid transparent;\r\n        border-bottom: 1px solid $secondary-color;\r\n\r\n        &:first-child {\r\n            margin-top: 5px;\r\n        }\r\n\r\n        &:last-child {\r\n            border-bottom: 1px solid transparent;\r\n        }\r\n    }\r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .drop-menu-container,\r\n    .mobile-container {\r\n        display: none;\r\n    }\r\n\r\n    .desktop-container {\r\n        display: block;\r\n        background-color: $quaternary-color;\r\n        height: var(--sub-navbar-height);\r\n    }\r\n\r\n    .sub-navbar-container {\r\n        .sub-navbar {            \r\n            .wrapper {\r\n                margin-right: 5px;\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "submenu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseMenuComponent",
            "templateData": "<ng-container *ngIf=\"showSubMenu\">\r\n    <ng-container *ngTemplateOutlet=\"mobileTemplate\"></ng-container>\r\n    <ng-container *ngTemplateOutlet=\"desktopTemplate\"></ng-container>\r\n</ng-container>\r\n\r\n<ng-container *ngTemplateOutlet=\"categoriesTemplate\"></ng-container>\r\n\r\n<ng-template #subMenuTemplate>\r\n    <div #wrapper class=\"wrapper\">\r\n        <div class=\"sub-category-container\">\r\n            <ng-container *ngIf=\"menuChildItems && menuChildItems.length\">\r\n                <ng-container *ngIf=\"isMobile\">\r\n                    <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: getSelectedItem()\"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngFor=\"let item of menuChildItems\">                            \r\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: getItem(item)\"></ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #mobileTemplate>\r\n    <div class=\"mobile-container sub-navbar-container\">\r\n        <div class=\"sub-navbar\">    \r\n            <ng-container *ngIf=\"category\">\r\n                <div class=\"selected-category\" (click)=\"showDropMenu = !showDropMenu\">\r\n                    <span class=\"nav-item\">{{category.label}}</span>\r\n                    <i class=\"material-icons\">keyboard_arrow_down</i>                    \r\n                </div>                \r\n            </ng-container>\r\n    \r\n            <ng-container *ngTemplateOutlet=\"subMenuTemplate\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #desktopTemplate>\r\n    <div class=\"desktop-container sub-navbar-container\">\r\n        <div class=\"sub-navbar\">\r\n            <ng-container *ngTemplateOutlet=\"subMenuTemplate\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #categoriesTemplate>\r\n    <div class=\"drop-menu-container\" *ngIf=\"showDropMenu\" (outsideClick)=\"showDropMenu = false\">\r\n        <ng-container *ngFor=\"let c of categories\">\r\n            <div class=\"drop-menu-item\" (click)=\"onDropMenuItemClick(c)\">{{c.label}}</div>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #itemTemplate let-item=\"item\">\r\n    <!--  [ngClass]=\"{ 'child-items': item.childItems && item.childItems.length }\" -->\r\n    <span *ngIf=\"showMenuItem(item)\" class=\"nav-item-container\" [ngClass]=\"{ 'selected': !isMobile && item.selected }\" (click)=\"onMenuItemClick(item)\">\r\n        <span class=\"nav-item\">\r\n            <a class=\"nav-link\">{{item.label}}</a>\r\n        </span>\r\n    </span>\r\n</ng-template>\r\n\r\n<ng-template #selectedItemTemplate let-item=\"item\">\r\n    <span *ngIf=\"item\" class=\"nav-item-container selected\">\r\n        <span class=\"nav-item\">\r\n            <a class=\"nav-link\">{{item.label}}</a>\r\n        </span>\r\n    </span>\r\n</ng-template>"
        },
        {
            "name": "TabDesktopComponent",
            "id": "component-TabDesktopComponent-427fe69a0354b5980d849be6f9dc3d6d",
            "file": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/tab-desktop/tab-desktop.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tab-desktop-component",
            "styleUrls": [
                "./tab-desktop.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-desktop.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabs",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "tabSelected",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_tabs",
                    "type": "Array<TabItem>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedTabItemIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "onNavigateClick",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { BaseComponent, WINDOW } from '@common/src/public-api';\r\nimport { TabItem } from '../../../../../types/tab-item';\r\n\r\n\r\n@Component({\r\n    selector: 'ui-tab-desktop-component',\r\n    templateUrl: './tab-desktop.component.html',\r\n    styleUrls: ['./tab-desktop.component.scss'],\r\n})\r\nexport class TabDesktopComponent extends BaseComponent {\r\n    private _tabs: Array<TabItem>;\r\n\r\n    @Input() set tabs(value: Array<TabItem>) {\r\n        if (value) {\r\n            this._tabs = value;\r\n            this.selectedTabItemIndex = this._tabs.findIndex((t) => t.selected);\r\n        }\r\n    }\r\n    get tabs(): Array<TabItem> {\r\n        return this._tabs;\r\n    }\r\n    @Output() tabSelected = new EventEmitter<number>();\r\n\r\n    selectedTabItemIndex: number = 0;\r\n\r\n    constructor(\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router,\r\n    ) {\r\n        super(router, window);\r\n    }\r\n\r\n    async onNavigateClick(index): Promise<void> {\r\n        this.tabSelected.emit(index);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui/src/scss/variables';\r\n\r\n.container {\r\n    .tabs {\r\n        display: grid;\r\n        grid-auto-flow: column;\r\n        justify-items: center;\r\n        justify-content: stretch;\r\n        column-gap: 10px;\r\n        height: 50px;\r\n\r\n        .tab {\r\n            border: 1px solid #f1f1f1;\r\n            border-bottom: 1px solid transparent;\r\n            width: 100%;\r\n            text-align: center;\r\n            padding-top: 15px;\r\n            border-top-left-radius: 10px;\r\n            border-top-right-radius: 10px;\r\n            font-size: 0.9em;\r\n            font-weight: 500;\r\n            color: $desktop-regular-color;\r\n            background-color: #fcfcfc;\r\n\r\n            &.selected {\r\n                background-color: transparent;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./tab-desktop.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "tabs": {
                    "name": "tabs",
                    "setSignature": {
                        "name": "tabs",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tabs",
                        "type": "",
                        "returnType": "Array<TabItem>",
                        "line": 22
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n    <div *ngIf=\"tabs\" class=\"tabs\">\r\n        <span\r\n            class=\"tab\"\r\n            [ngClass]=\"{ selected: tab.selected }\"\r\n            *ngFor=\"let tab of tabs; let idx = index\"\r\n            (click)=\"onNavigateClick(idx)\"\r\n            >{{ tab.label }}</span\r\n        >\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "TabMobileComponent",
            "id": "component-TabMobileComponent-5331d2614cc6cd040b16135b5f7a2ddc",
            "file": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/tab-mobile/tab-mobile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-tab-mobile-component",
            "styleUrls": [
                "./tab-mobile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-mobile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabs",
                    "line": 20,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "daySelected",
                    "defaultValue": "new EventEmitter<Date>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_tabs",
                    "type": "Array<TabItem>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "configuration",
                    "type": "IConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "month",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedTabItemIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "onDayClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "TabDay"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "TabDay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNavigateClick",
                    "args": [
                        {
                            "name": "direction",
                            "type": "\"l\" | \"r\""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "\"l\" | \"r\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedOrCurrentDayClass",
                    "args": [
                        {
                            "name": "currentDay",
                            "type": "TabDay"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "currentDay",
                            "type": "TabDay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\n\r\nimport { BaseComponent, ConfigService, IConfiguration, WINDOW } from '@common/src/public-api';\r\nimport { TabItem } from '../../../../../types/tab-item';\r\nimport { TabDay } from '../../../../../types/tab-day';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'ui-tab-mobile-component',\r\n    templateUrl: './tab-mobile.component.html',\r\n    styleUrls: ['./tab-mobile.component.scss'],\r\n})\r\nexport class TabMobileComponent extends BaseComponent {\r\n    private _tabs: Array<TabItem>;\r\n    private configuration: IConfiguration;\r\n\r\n    month: string;\r\n    selectedTabItemIndex: number = 0;\r\n\r\n    @Input() set tabs(value: Array<TabItem>) {\r\n        if (value) {\r\n            this._tabs = value;\r\n            this.selectedTabItemIndex = this._tabs.findIndex((t) => t.selected);\r\n        }\r\n    }\r\n    get tabs(): Array<TabItem> {\r\n        return this._tabs;\r\n    }\r\n\r\n    @Output() daySelected = new EventEmitter<Date>();\r\n\r\n    constructor(\r\n        configService: ConfigService,\r\n        @Inject(WINDOW) window: Window,\r\n        router: Router\r\n    ) {\r\n        super(router, window);\r\n\r\n        this.configuration = configService.getConfiguration();\r\n    }\r\n\r\n    async onDayClick(item: TabDay): Promise<void> {\r\n        for (const currentTab of this._tabs) {\r\n            for (let day of currentTab.days) {\r\n                day.selected = false;\r\n            }\r\n        }\r\n        item.selected = true;\r\n\r\n        this.daySelected.emit(item.date);\r\n    }\r\n\r\n    async onNavigateClick(direction: 'l' | 'r'): Promise<void> {\r\n        this.selectedTabItemIndex += direction === 'l' ? -1 : 1;\r\n        this.setMonth();\r\n\r\n        await this.onDayClick(this._tabs[this.selectedTabItemIndex].days[0]);\r\n    }\r\n\r\n    selectedOrCurrentDayClass(currentDay: TabDay): string {\r\n        if (currentDay.selected) {\r\n            return 'current-day';\r\n        } else if (currentDay.slots.findIndex((s) => s.selected) !== -1) {\r\n            return 'selected-day';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    private setMonth(): void {\r\n        const selectedTab = this._tabs[this.selectedTabItemIndex];\r\n        const startDate = new Date(selectedTab.start);\r\n        const endDate = new Date(selectedTab.end);\r\n        const endDateMonth = endDate.toLocaleString(this.configuration.language, { month: 'long' });\r\n\r\n        this.month = startDate.toLocaleString(this.configuration.language, { month: 'long' });\r\n\r\n        if (this.month !== endDateMonth) {\r\n            this.month += ` - ${endDateMonth}`;\r\n        }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../../ui//src//scss//variables';\r\n\r\n.tab-mobile {\r\n    color: $mobile-regular-color;\r\n\r\n    .month {\r\n        text-transform: uppercase;\r\n        font-weight: bold;\r\n        width: 100%;\r\n        text-align: center;\r\n        margin-bottom: 10px;\r\n    }\r\n\r\n    .week-container {\r\n        padding: 1px;\r\n        position: relative;\r\n        display: grid;\r\n        grid-auto-flow: column;\r\n        grid-template-columns: 25px auto 25px;\r\n        justify-content: stretch;\r\n        column-gap: 5px;\r\n\r\n        .navigation {\r\n            position: relative;\r\n            cursor: pointer;\r\n\r\n            i {\r\n                position: absolute;\r\n                font-weight: bold;\r\n                font-size: 2em;\r\n\r\n                &.left {\r\n                    left: 0;\r\n                }\r\n\r\n                &.right {\r\n                    right: 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        .week-day {\r\n            display: grid;\r\n            grid-auto-flow: column;\r\n            justify-content: space-between;\r\n\r\n            .week-item {\r\n                display: grid;\r\n                grid-auto-flow: row;\r\n                text-align: center;\r\n\r\n                .week-item-weekday {\r\n                    margin-bottom: 10px;\r\n                    text-transform: uppercase;\r\n                    font-size: 0.75em;\r\n                }\r\n\r\n                .week-item-date {\r\n                    height: 25px;\r\n                    width: 25px;\r\n                    padding: 3px;\r\n                    border: 1px solid transparent;\r\n                    border-radius: 12.5px;\r\n                    background-color: #f1f1f1;\r\n                    font-size: 0.85em;\r\n                    font-weight: bold;\r\n                    cursor: pointer;\r\n                    padding-top: 5.5px;\r\n                    padding-left: 2px;\r\n\r\n                    &.selected-day {\r\n                        background-color: #dcdcff;\r\n                        color: $mobile-regular-color;\r\n                    }\r\n\r\n                    &.current-day {\r\n                        background-color: $mobile-regular-color;\r\n                        color: white;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /* &:before,\r\n        &:after {\r\n            font-family: \"Material Icons\";\r\n            font-feature-settings: \"liga\";\r\n            position: absolute;\r\n        }\r\n\r\n        &:before {\r\n            content: \"chevron_left\";\r\n            left: 0;\r\n        }\r\n\r\n        &:after {\r\n            content: \"chevron_right\";\r\n            right: 0;\r\n        } */\r\n    }\r\n}\r\n",
                    "styleUrl": "./tab-mobile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "tabs": {
                    "name": "tabs",
                    "setSignature": {
                        "name": "tabs",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tabs",
                        "type": "",
                        "returnType": "Array<TabItem>",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"tab-mobile\">\r\n    <div class=\"month\">{{ month }}</div>\r\n    <div class=\"week-container\">\r\n        <span [hidden]=\"selectedTabItemIndex === 0\" class=\"navigation\" (click)=\"onNavigateClick('l')\"\r\n            ><i class=\"material-icons left\">chevron_left</i></span\r\n        >\r\n        <span [hidden]=\"selectedTabItemIndex !== 0\" class=\"navigation\"></span>\r\n        <div class=\"week-day\">\r\n            <div class=\"week-item\" *ngFor=\"let currentDay of tabs[selectedTabItemIndex].days\">\r\n                <span class=\"week-item-weekday\">{{ currentDay.weekday }}</span>\r\n                <span\r\n                    [ngClass]=\"selectedOrCurrentDayClass(currentDay)\"\r\n                    (click)=\"onDayClick(currentDay)\"\r\n                    class=\"week-item-date\"\r\n                    >{{ currentDay.day }}</span\r\n                >\r\n            </div>\r\n        </div>\r\n        <span [hidden]=\"selectedTabItemIndex === tabs.length - 1\" class=\"navigation\" (click)=\"onNavigateClick('r')\"\r\n            ><i class=\"material-icons right\">chevron_right</i></span\r\n        >\r\n        <span [hidden]=\"selectedTabItemIndex !== tabs.length - 1\" class=\"navigation\"></span>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "TextAreaComponent",
            "id": "component-TextAreaComponent-42851249ba4890d568da9f2c40f8c76c",
            "file": "projects/common/src/lib/component/common/input/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-textarea-component",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "keyboardKeyup",
                    "defaultValue": "new EventEmitter<KeyboardEvent>()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onKey",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\n\r\n@Component({\r\n    selector: 'ui-textarea-component',\r\n    templateUrl: './textarea.component.html',\r\n    styleUrls: ['./textarea.component.scss'],\r\n})\r\nexport class TextAreaComponent extends BaseInputComponent {\r\n    @Output() keyboardKeyup = new EventEmitter<KeyboardEvent>();\r\n\r\n    protected setFocus(): void {\r\n        this.inputControl.nativeElement.focus();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public focus(): void {\r\n        this.inputControl.nativeElement.focus();\r\n    }\r\n\r\n    onChange(): void {\r\n        this.valueChange.emit({ name: this.name, value: this.data });\r\n    }\r\n\r\n    onKey($event: KeyboardEvent): void {\r\n        this.keyboardKeyup.emit($event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "templateData": "<ng-container *ngIf=\"show\">\r\n    <div class=\"control-row\">\r\n        <div class=\"control\" [attr.information]=\"metadata && metadata.information && metadata.information.length > 0\">\r\n            <textarea\r\n                uiCheckIsValid\r\n                [readonly]=\"readonly\"\r\n                [rows]=\"metadata && metadata.rows\"\r\n                #inputControl\r\n                [id]=\"id\"\r\n                #model=\"ngModel\"\r\n                [(ngModel)]=\"data\"\r\n                [ngModelOptions]=\"{ updateOn: 'change' }\"\r\n                [ngClass]=\"data && data.trim().length > 0 ? 'has-value' : ''\"\r\n                (change)=\"onChange()\"\r\n                (keyup)=\"onKey($event)\"\r\n                autocomplete=\"nope\"\r\n                [maxlength]=\"\r\n                    metadata && metadata.validators && metadata.validators.maxLength === '' ? metadata.maxLength : null\r\n                \"\r\n                [required]=\"metadata && metadata.validators && metadata.validators?.required === '' ? '' : null\"\r\n            >\r\n            </textarea>\r\n            <label [ngClass]=\"ignoreMediaQueries ? 'ignore' : ''\"\r\n                >{{ metadata && metadata.label }}\r\n                <span *ngIf=\"metadata && metadata.validators && metadata.validators.required === ''\">*</span>\r\n            </label>\r\n            <div *ngIf=\"!disableValidation && (model.dirty || model.touched) && model.invalid\" class=\"error\">\r\n                <span *ngIf=\"model.errors.required\">{{ metadata.error.required }}</span>\r\n                <span *ngIf=\"model.errors.maxlength\">{{ metadata.error.maxLength }}</span>\r\n            </div>\r\n            <div class=\"focus-indicator\"></div>\r\n            <span class=\"optional-text\">{{ metadata && metadata.optionalText }}</span>\r\n            <a class=\"information-icon\" (click)=\"onShowInfoIconClick()\" (outsideClick)=\"showInfo = false\"></a>\r\n\r\n            <div class=\"information\" [hidden]=\"!showInfo\">\r\n                <div *ngFor=\"let text of metadata && metadata.information\">\r\n                    {{ text }}\r\n                </div>\r\n            </div>\r\n            <div class=\"background\"></div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "TextboxComponent",
            "id": "component-TextboxComponent-96463504f81c6b9c43a6bd553ce5903e",
            "file": "projects/common/src/lib/component/common/input/textbox/textbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-textbox-component",
            "styleUrls": [
                "./textbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "keyboardKeyup",
                    "defaultValue": "new EventEmitter<KeyboardEvent>()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onKey",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { BaseInputComponent } from '../base.input.component';\r\n\r\n@Component({\r\n    selector: 'ui-textbox-component',\r\n    templateUrl: './textbox.component.html',\r\n    styleUrls: ['./textbox.component.scss'],\r\n})\r\nexport class TextboxComponent extends BaseInputComponent {\r\n    @Output() keyboardKeyup = new EventEmitter<KeyboardEvent>();\r\n\r\n    protected setFocus(): void {\r\n        this.inputControl.nativeElement.focus();\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public focus(): void {\r\n        this.inputControl.nativeElement.focus();\r\n    }\r\n\r\n    onChange(): void {\r\n        this.valueChange.emit({ name: this.name, value: this.inputControl.nativeElement.value });\r\n    }\r\n\r\n    onKey($event: KeyboardEvent): void {\r\n        this.keyboardKeyup.emit($event);\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./textbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "templateData": "<ng-container *ngIf=\"show\">\r\n    <div class=\"control-row\">\r\n        <div class=\"control\" [attr.information]=\"metadata && metadata.information && metadata.information.length > 0\">\r\n            <input\r\n                uiCheckIsValid\r\n                [type]=\"type\"\r\n                [readonly]=\"readonly\"\r\n                #inputControl\r\n                [id]=\"id\"\r\n                [attr.name]=\"type === 'password' ? name : ''\"\r\n                #model=\"ngModel\"\r\n                [(ngModel)]=\"data\"\r\n                [ngModelOptions]=\"{ updateOn: 'blur' }\"\r\n                [ngClass]=\"data && data.trim().length > 0 ? 'has-value' : ''\"\r\n                (change)=\"onChange()\"\r\n                (keyup)=\"onKey($event)\"\r\n                autocomplete=\"nope\"\r\n                [attr.otherControlName]=\"metadata && metadata.otherControlName\"\r\n                [maxlength]=\"\r\n                    metadata && metadata.validators && metadata.validators.maxLength === '' ? metadata.maxLength : null\r\n                \"\r\n                [minlength]=\"\r\n                    metadata && metadata.validators && metadata.validators?.minLength === '' ? metadata.minLength : null\r\n                \"\r\n                [pattern]=\"\r\n                    metadata && metadata.validators && metadata.validators?.pattern === '' ? metadata.pattern : null\r\n                \"\r\n                [email]=\"metadata && metadata.validators && metadata.validators?.email === '' ? '' : null\"\r\n                [required]=\"metadata && metadata.validators && metadata.validators?.required === '' ? '' : null\"\r\n            />\r\n            <label [ngClass]=\"ignoreMediaQueries ? 'ignore' : ''\"\r\n                >{{ metadata && metadata.label }}\r\n                <span *ngIf=\"metadata && metadata.validators && metadata.validators.required === ''\">*</span>\r\n            </label>\r\n            <div *ngIf=\"!disableValidation && (model.dirty || model.touched) && model.invalid\" class=\"error\">\r\n                <span *ngIf=\"model.errors.required\">{{ metadata.error.required }}</span>\r\n                <span *ngIf=\"model.errors.pattern\">{{ metadata.error.pleaseEnterValidCharacters }}</span>\r\n                <span *ngIf=\"model.errors.minlength\">{{ metadata.error.minLength }}</span>\r\n                <span *ngIf=\"model.errors.maxlength\">{{ metadata.error.maxLength }}</span>\r\n                <span *ngIf=\"model.errors.email\">{{ metadata.error.email }}</span>\r\n            </div>\r\n            <div class=\"focus-indicator\"></div>\r\n            <span class=\"optional-text\">{{ metadata && metadata.optionalText }}</span>\r\n            <a class=\"information-icon\" (click)=\"onShowInfoIconClick()\" (outsideClick)=\"showInfo = false\"></a>\r\n\r\n            <div class=\"information\" [hidden]=\"!showInfo\">\r\n                <div *ngFor=\"let text of metadata && metadata.information\">\r\n                    {{ text }}\r\n                </div>\r\n            </div>\r\n            <div class=\"background\"></div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "ViewReviewComponent",
            "id": "component-ViewReviewComponent-87d038e2d851fd424e19dce9e2207f04",
            "file": "projects/content/src/lib/components/reviews/view-review/view-review.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-view-review-component",
            "styleUrls": [
                "./view-review.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-review.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "show",
                    "defaultValue": "true",
                    "line": 39,
                    "type": "boolean"
                },
                {
                    "name": "showProductInfo",
                    "defaultValue": "false",
                    "line": 38,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_hasMorePages",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageNumber",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "metadata",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "navReviewsRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navReviews'"
                        }
                    ]
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "reviewLimit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "reviews",
                    "type": "Array<Review>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "reviewsCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "getBrand",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getLightboxData",
                    "args": [
                        {
                            "name": "src",
                            "type": "string"
                        },
                        {
                            "name": "idx",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 167,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "src",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRating",
                    "args": [
                        {
                            "name": "r",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 163,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "r",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReviewDate",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSizePack",
                    "args": [
                        {
                            "name": "details",
                            "type": "Array<ProductDetail>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "details",
                            "type": "Array<ProductDetail>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        113,
                        120
                    ]
                },
                {
                    "name": "isSpeciality",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidDate",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 144,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onlightboxClose",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 153,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSeeMoreReviewsClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 159,
                    "modifierKind": [
                        114,
                        120
                    ]
                },
                {
                    "name": "onVoteChange",
                    "args": [
                        {
                            "name": "review",
                            "type": "Review"
                        },
                        {
                            "name": "vote",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "review",
                            "type": "Review",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vote",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openLightbox",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 147,
                    "modifierKind": [
                        114,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToReviews",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Inject, Input, ViewChild } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { \r\n    BaseComponent,\r\n    ConfigService,\r\n    DataStoreService,\r\n    InfiniteScrollService,\r\n    LightboxService,\r\n    MenuStateService,\r\n    Product,\r\n    ProductDetail,\r\n    ProductReviewService,\r\n    Review,\r\n    ReviewSummary,\r\n    WINDOW\r\n} from \"@common/src/public-api\";\r\nimport { Result } from \"@search/src/lib/types\";\r\nimport { from, interval } from \"rxjs\";\r\nimport { debounce, delay, filter, first, takeUntil } from \"rxjs/operators\";\r\nimport { DetailService } from \"../../../services/detail.service\";\r\n\r\n@Component({\r\n    selector: 'ui-view-review-component',\r\n    templateUrl: './view-review.component.html',\r\n    styleUrls: ['./view-review.component.scss']\r\n})\r\nexport class ViewReviewComponent extends BaseComponent {\r\n    private _hasMorePages: boolean = true;\r\n    private _pageNumber: number;\r\n    private _loading: boolean = false;\r\n\r\n    metadata: any;\r\n    reviews: Array<Review>;\r\n    product: Product;    \r\n    reviewsCount: number;\r\n    reviewLimit: number;\r\n\r\n    @Input() showProductInfo: boolean = false;\r\n    @Input() show: boolean = true;\r\n    @ViewChild('navReviews') navReviewsRef: ElementRef;\r\n    \r\n    constructor(\r\n        router: Router,\r\n        @Inject(WINDOW) window: Window,\r\n        menuStateService: MenuStateService,\r\n        dataStoreService: DataStoreService,\r\n        configService: ConfigService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private detailService: DetailService,\r\n        private infiniteScrollService: InfiniteScrollService,\r\n        private lightboxService: LightboxService,\r\n        private productReviewService: ProductReviewService\r\n    ) {\r\n        super(router, window, menuStateService, dataStoreService);\r\n        this.reviewLimit = configService.getConfiguration().reviewLimit;\r\n    }\r\n\r\n    protected async init(): Promise<void> {\r\n        const data = this.activatedRoute.snapshot.data;\r\n        this.activatedRoute.queryParams.pipe(delay(0), first()).subscribe(param  => {\r\n            if (param['vr'] === 'true') {\r\n                this.scrollToReviews();\r\n            }\r\n        });\r\n\r\n        this.product = data && data.detail;\r\n        this.reviews = data && data.reviews.items;\r\n        this.reviewsCount = data && data.reviews.count;\r\n        this.metadata = data && data.metadata['ViewReview'];\r\n        this._pageNumber = 1;\r\n\r\n        if (this.showProductInfo) {\r\n            this.infiniteScrollService.onScrolledDown\r\n                .pipe(\r\n                    filter(() => this._hasMorePages),\r\n                    debounce(() => interval(200)),\r\n                    takeUntil(this.$destroy))\r\n                .subscribe(() => {\r\n                    if (!this._loading) {\r\n                        this._loading = true;\r\n                        this.productReviewService.getReviews(this.product._id, ++this._pageNumber, this.reviewLimit)\r\n                            .pipe(takeUntil(this.$destroy))\r\n                            .subscribe((data: Result<Review>) => {\r\n                                this._hasMorePages = Array.isArray(data.items) && data.items.length > 0;\r\n                                this.reviews = this.reviews.concat(data.items);\r\n                                this.reviewsCount = data.count;\r\n                                this._loading = false;\r\n                            });\r\n                    }\r\n            });\r\n        }\r\n    }\r\n\r\n    get reviewSummary(): ReviewSummary {\r\n        return this.product && this.product.reviewSummary;\r\n    }\r\n\r\n    get imageUrl(): string {\r\n        if (this.product && Array.isArray(this.product.images)){\r\n            const image = this.product.images.find(i => Number(i.size) === 0);\r\n\r\n            if (image) {\r\n                return image.src;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    get sortedFeaturesRating(): Array<any> {\r\n        return this.reviewSummary && this.reviewSummary.featuresRating && this.reviewSummary.featuresRating.sort((a, b) =>  a.value - b.value).reverse();\r\n    }\r\n\r\n    get sortedReviews(): Array<any> {\r\n        return this.reviews && this.reviews.sort((a, b) =>  a.modifiedDate - b.modifiedDate).reverse();\r\n    }\r\n\r\n    public getReviewDate(review: Review): Date {\r\n        return new Date(new Date(review.modifiedDate).toDateString());\r\n    }\r\n\r\n    public isValidDate(review: Review): boolean {\r\n        let dt = new Date(new Date(review.modifiedDate).toDateString());\r\n\r\n        return dt instanceof Date && !isNaN(dt.getTime());\r\n    }\r\n\r\n    public getSizePack(details: Array<ProductDetail>): string {\r\n        const sizePack = details.find(d => d.title.toLowerCase() === 'sizepack');\r\n        return sizePack?.value ?? '';\r\n    }\r\n\r\n    public isSpeciality(title: string): boolean {\r\n        return title.toLowerCase() === 'speciality';\r\n    }\r\n\r\n    public getBrand(): string {\r\n        if (this.product.description.toLowerCase().includes(this.product.brand.toLowerCase())){\r\n            return '';\r\n        } else {\r\n            return `${this.product.brand} `;\r\n        }\r\n    }\r\n\r\n    public async onItemClick(): Promise<void> {\r\n    }\r\n\r\n    public async openLightbox(id: string): Promise<void> {\r\n        this.lightboxService.open(id);\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onlightboxClose(id: string): Promise<void> {\r\n        this.lightboxService.close(id);\r\n\r\n        await Promise.resolve();\r\n    }\r\n\r\n    public async onSeeMoreReviewsClick(): Promise<void> {\r\n        \r\n    }\r\n\r\n    public getRating(r: any): string {\r\n        return `--rating: ${r && r.rating || 0}`;\r\n    }\r\n\r\n    public getLightboxData(src: string, idx: string): any {\r\n        return { src, id: `review-image-${idx}` };\r\n    }\r\n\r\n    public async onVoteChange(review: Review, vote: { likeVote: boolean, dislikeVote: boolean }): Promise<void> {\r\n        try {\r\n            await this.productReviewService.updateReviewVote(review._id, vote).toPromise();\r\n            \r\n            if (!review.votes) {\r\n                review.votes = { likeVote: 0, dislikeVote: 0 };\r\n            }\r\n\r\n            if (vote.likeVote) {\r\n                review.votes.likeVote++;\r\n            }\r\n    \r\n            if (vote.dislikeVote) {\r\n                review.votes.dislikeVote++;\r\n            }\r\n\r\n        } catch (e) {\r\n            // TODO: Error handling\r\n        }\r\n    }\r\n\r\n    private scrollToReviews(): void {        \r\n        this.navReviewsRef.nativeElement.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../ui//src/scss/variables';\r\n@import '../../../../../../ui//src/scss/mixins';\r\n@import '../mixins.scss';\r\n\r\n.container {\r\n    @include non-content-container;\r\n    color: $desktop-regular-color;\r\n    padding: 0 10px;\r\n\r\n    .product-review-container {\r\n        display: grid;\r\n        grid-auto-flow: row;\r\n        grid-template-columns: 1fr;\r\n        margin-top: 20px;\r\n\r\n        &.no-product {\r\n            grid-template-columns: 1fr;\r\n        }\r\n\r\n        .review-summary {\r\n            .header {\r\n                @include header;\r\n            }\r\n    \r\n            .no-product {\r\n                display: grid;\r\n                grid-template-columns: 1fr;\r\n                justify-items: stretch;\r\n\r\n                ui-feature-review-component {\r\n                    .container {\r\n                        ::ng-deep & {\r\n                            margin-top: 9px;\r\n                        }\r\n\r\n                        .header {\r\n                            ::ng-deep & {\r\n                                margin-bottom: 16px;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            ui-feature-review-component,\r\n            ui-review-summary-component {\r\n                max-width: 280px;\r\n\r\n                .container {\r\n                    ::ng-deep & {\r\n                        padding: 11px 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        .product-summary {\r\n            display: grid;\r\n            grid-auto-flow: row;\r\n            grid-template-columns: 1fr 2fr;\r\n            column-gap: 10px;\r\n            margin-top: 14px;\r\n    \r\n            figure {\r\n                margin: 0;\r\n                cursor: pointer;\r\n                text-align: center;\r\n                height: 180px;\r\n                margin-bottom: 10px;\r\n        \r\n                img {\r\n                    max-width: 150px;\r\n                    max-height: 100%;\r\n                }\r\n            }\r\n    \r\n            .summary {\r\n                display: grid;\r\n                grid-auto-flow: row;\r\n                justify-content: left;\r\n                align-content: start;\r\n                row-gap: 5px;\r\n    \r\n                .description {\r\n                    font-weight: 600;\r\n                    font-size: 1.2rem;\r\n                }\r\n    \r\n                .size {\r\n                    font-size: $font-size;\r\n                    font-weight: normal;\r\n                    line-height: 20px;\r\n                    color: $mobile-regular-color;\r\n                    max-width: 280px;\r\n                    margin-bottom: 5px;\r\n                }\r\n    \r\n                .size {\r\n                    \r\n                }\r\n    \r\n                .country-container {\r\n                    font-size: $font-size;\r\n                    margin-top: 5px;\r\n                    color: $desktop-regular-color;\r\n    \r\n                    .country {\r\n                        font-size: 1.1em;\r\n                        color: $desktop-regular-color;\r\n                        font-weight: 500;\r\n                    }\r\n                }\r\n    \r\n                .speciality {\r\n                    font-weight: normal;\r\n                    font-size: 0.8em;\r\n                    margin-top: 5px;\r\n                    \r\n                    .veg-symbol {\r\n                        color: green;\r\n                        font-weight: 600;\r\n                    }\r\n    \r\n                    .pre-text {\r\n                        color: $desktop-regular-color;\r\n                        margin-left: 5px;\r\n                    }\r\n    \r\n                    .text {\r\n                        color: $desktop-regular-color;\r\n                        font-weight: 500;\r\n                        line-height: 10px;\r\n                    }\r\n                }\r\n            }\r\n    \r\n            ui-add-to-shoppingcart-quantity {\r\n                \r\n                .add-to-basket-container {\r\n                    ::ng-deep & {\r\n                        padding: 0;\r\n                    }\r\n                }\r\n            }\r\n    \r\n        }\r\n    }\r\n\r\n    .reviews-container {\r\n        position: relative;\r\n\r\n        .review-user {\r\n            @include reviewer;\r\n        }\r\n\r\n        .feature-rating {\r\n            margin-top: 10px;\r\n\r\n            .header {\r\n                margin-left: 20px;\r\n                font-weight: 500;\r\n                font-size: 1.2rem;\r\n            }\r\n\r\n            .no-reviews {\r\n                cursor: default;\r\n            }\r\n        }\r\n\r\n        .images-container {\r\n            display: grid;\r\n            grid-auto-flow: column;\r\n            justify-content: stretch;\r\n            margin-top: 10px;\r\n\r\n            figure {\r\n                @include small-product-image(50px, 50px, false);\r\n\r\n                cursor: default;\r\n                border: 1px solid #c0c0c0;\r\n                padding: 1px;\r\n                box-sizing: content-box;\r\n\r\n                &:not(:first-child) {\r\n                    margin-left: 2px;\r\n                }\r\n            }\r\n\r\n            ui-carousel-component {\r\n                width: calc(100vw - 20px);\r\n\r\n                .carousel-wrapper {\r\n                    ::ng-deep & {\r\n                        display: grid;\r\n                        grid-auto-flow: column;\r\n                        grid-template-columns: 20px auto 20px;\r\n                        column-gap: 5px;\r\n                    }\r\n\r\n                    i {\r\n                        ::ng-deep & {\r\n                            position: relative;\r\n                            top: 8px;\r\n                            transform: unset;\r\n                            opacity: 1;\r\n                        }\r\n\r\n                        &.chevron-right {\r\n                            ::ng-deep & {\r\n                                right: 9px;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        .description {\r\n            margin-top: 5px;\r\n            padding: 2px 0;\r\n            line-height: 1.3rem;\r\n        }\r\n\r\n        .review-date {\r\n            font-size: 0.9rem;\r\n            margin-top: 5px;\r\n        }\r\n\r\n        .nav-reviews {\r\n            position: absolute;\r\n            left: 1px;\r\n            top: 1px;\r\n        }\r\n    }  \r\n\r\n    .review-note {\r\n        font-size: 0.9rem;\r\n        font-weight: 600;\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .header {\r\n        @include header;\r\n    }\r\n\r\n    .mt-20 {\r\n        margin-top: 20px;\r\n    }\r\n\r\n    .mt-40 {\r\n        margin-top: 40px;\r\n    }\r\n\r\n    .see-more-reviews {\r\n        a {\r\n            color: #0000ff;\r\n\r\n            &:hover {\r\n                text-decoration: underline;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nui-lightbox-component {\r\n    .lightbox {\r\n        .lightbox-body {    \r\n            figure {\r\n                ::ng-deep & {\r\n                    margin-top: 20px;\r\n                }\r\n            }\r\n        }\r\n    }        \r\n}\r\n\r\n@media only screen and (min-width: $tablet-min-width) {\r\n    .container {    \r\n        .product-review-container {\r\n            grid-template-columns: 1fr 1fr;\r\n\r\n            .review-summary {\r\n                .no-product {\r\n                    grid-template-columns: 1fr 1fr;\r\n                    column-gap: 40px;\r\n                }\r\n\r\n                ui-feature-review-component,\r\n                ui-review-summary-component {\r\n                    max-width: unset;\r\n                }\r\n            }\r\n        }\r\n\r\n        .reviews-container {\r\n            .images-container {\r\n                ui-carousel-component {\r\n                    width: calc(100% - 20px);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ui-lightbox-component {\r\n        .lightbox {\r\n            .lightbox-body {\r\n                ::ng-deep & {\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    left: 50%;\r\n                    transform: translate(-50%, -50%);\r\n                    text-align: right;\r\n                }\r\n\r\n                button {\r\n                    ::ng-deep & {\r\n                        width: 200px;\r\n                    }\r\n                }\r\n        \r\n                figure {\r\n                    ::ng-deep & {\r\n                        margin-top: 20px;\r\n                        width: 400px;\r\n                    }\r\n                    \r\n                    img {\r\n                        ::ng-deep & {\r\n                            width: 400px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }        \r\n    }\r\n}\r\n\r\n",
                    "styleUrl": "./view-review.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "window",
                        "type": "Window"
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService"
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService"
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "detailService",
                        "type": "DetailService"
                    },
                    {
                        "name": "infiniteScrollService",
                        "type": "InfiniteScrollService"
                    },
                    {
                        "name": "lightboxService",
                        "type": "LightboxService"
                    },
                    {
                        "name": "productReviewService",
                        "type": "ProductReviewService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "window",
                        "type": "Window",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuStateService",
                        "type": "MenuStateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "type": "DataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "detailService",
                        "type": "DetailService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "infiniteScrollService",
                        "type": "InfiniteScrollService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lightboxService",
                        "type": "LightboxService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productReviewService",
                        "type": "ProductReviewService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "accessors": {
                "reviewSummary": {
                    "name": "reviewSummary",
                    "getSignature": {
                        "name": "reviewSummary",
                        "type": "",
                        "returnType": "ReviewSummary",
                        "line": 94
                    }
                },
                "imageUrl": {
                    "name": "imageUrl",
                    "getSignature": {
                        "name": "imageUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 98
                    }
                },
                "sortedFeaturesRating": {
                    "name": "sortedFeaturesRating",
                    "getSignature": {
                        "name": "sortedFeaturesRating",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 109
                    }
                },
                "sortedReviews": {
                    "name": "sortedReviews",
                    "getSignature": {
                        "name": "sortedReviews",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 113
                    }
                }
            },
            "templateData": "<div *ngIf=\"show && reviews && reviews.length > 0\" class=\"container\">\r\n    <div class=\"product-review-container\" [ngClass]=\"{'no-product': !showProductInfo }\">\r\n        <ng-container *ngIf=\"reviewSummary\">\r\n            <ng-container *ngTemplateOutlet=\"reviewSummaryTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"product && showProductInfo\">\r\n            <ng-container *ngTemplateOutlet=\"productTemplate\"></ng-container>\r\n        </ng-container>\r\n    </div>\r\n    <div class=\"review-note\">\r\n        {{metadata && metadata.verifiedPurchaser && metadata.verifiedPurchaser.label}}\r\n    </div>\r\n    <div *ngIf=\"reviews\" class=\"reviews-container\">\r\n        <a class=\"nav-reviews\" #navReviews></a>\r\n        <div class=\"header\">{{metadata && metadata.reviews && metadata.reviews.label}}</div>\r\n        <ng-container *ngTemplateOutlet=\"reviewsTemplate\"></ng-container>\r\n    </div>\r\n    <div *ngIf=\"!showProductInfo && reviewsCount > reviewLimit\" class=\"see-more-reviews mt-20\">\r\n        <a (click)=\"onSeeMoreReviewsClick()\">{{metadata && metadata.seeMoreReviews && metadata.seeMoreReviews.label}}</a>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #reviewSummaryTemplate>\r\n    <div class=\"review-summary\">\r\n        <div class=\"header\">\r\n            {{metadata && metadata.customerReviews && metadata.customerReviews.label}}\r\n        </div>\r\n        <div [ngClass]=\"{'no-product': !showProductInfo }\">\r\n            <ui-review-summary-component [showViewAll]=\"false\" [reviewSummary]=\"reviewSummary\" [metadata]=\"metadata && metadata.reviewSummary\"></ui-review-summary-component>\r\n            <ui-feature-review-component [featuresRating]=\"sortedFeaturesRating\" [metadata]=\"metadata\"></ui-feature-review-component>\r\n        </div>        \r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #productTemplate>\r\n    <div class=\"product-summary\">\r\n        <figure (click)=\"onItemClick\">\r\n            <img [src]=\"imageUrl\">\r\n        </figure>\r\n        <div class=\"summary\">\r\n            <div class=\"description\">{{getBrand()}}{{product.description}}</div>\r\n            <div class=\"size\">{{ getSizePack(product.details) }}</div>\r\n            <ui-pricing-component [metadata]=\"metadata\" [pricing]=\"product.pricing\"></ui-pricing-component>\r\n            <ng-container *ngFor=\"let detail of product.details\">\r\n                <div *ngIf=\"isSpeciality(detail.title)\" class=\"speciality\">\r\n                    <span *ngIf=\"detail.value === 'Vegetarian'\" class=\"veg-symbol\">V</span>\r\n                    <span class=\"pre-text\" *ngIf=\"detail.value === 'Vegetarian'\">{{metadata && metadata.suitableFor && metadata.suitableFor.label}}</span\r\n                    ><span class=\"text\">{{ detail.value }}</span>\r\n                </div>\r\n            </ng-container>\r\n            <div class=\"country-container\">\r\n                {{ metadata && metadata.countryOfOrigin && metadata.countryOfOrigin.label }}:\r\n                <span class=\"country\">{{ product.country }}</span>\r\n            </div>\r\n        </div>\r\n        <div></div>\r\n        <ui-add-to-shoppingcart-quantity [metadata]=\"metadata\" [item]=\"product\"></ui-add-to-shoppingcart-quantity>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #reviewsTemplate>\r\n    <ng-container *ngFor=\"let review of sortedReviews; let idx = index\">\r\n        <div class=\"review-user\" [ngClass]=\"{ 'mt-20': idx === 0, 'mt-40': idx > 0 }\">\r\n            <i class=\"material-icons\">person</i>\r\n            <span>{{review.user}}</span>\r\n        </div>\r\n        <div class=\"feature-rating\">\r\n            <span class=\"five-star\" [attr.style]=\"getRating(review)\" [ngClass]=\"{ 'no-reviews': review.rating === 0 }\"></span>\r\n            <span class=\"header\">{{review.headline}}</span>\r\n        </div>\r\n        <div *ngIf=\"isValidDate(review)\" class=\"review-date\">\r\n            <span>Review date</span>: <span>{{getReviewDate(review) | date: 'dd MMMM YYYY'}}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"review.urls && review.urls.length > 0\">\r\n            <div class=\"images-container\">\r\n                <ui-carousel-component [enableTimer]=\"false\" [setWidth]=\"false\">\r\n                    <ng-container *ngFor=\"let url of review.urls;let idx1 = index\">\r\n                        <ng-container *ngIf=\"url.type === 'image'\">\r\n                            <ng-container *uiCarouselItem>\r\n                                <figure>\r\n                                    <img (click)=\"openLightbox('review-image-'+idx+'-'+idx1)\" [src]=\"url.src\" />\r\n                                </figure>\r\n                                <ng-container *ngTemplateOutlet=\"reviewImageLightbox; context: getLightboxData(url.src, idx+'-'+idx1)\"></ng-container>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </ui-carousel-component>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <div class=\"description\">\r\n            {{review.review}}\r\n        </div>\r\n        <ui-like-dislike-component\r\n            [metadata]=\"metadata\"\r\n            [likeVote]=\"review && review.votes && review.votes.likeVote || 0\"\r\n            [dislikeVote]=\"review && review.votes && review.votes.dislikeVote || 0\"\r\n            (voteChange)=\"onVoteChange(review, $event)\"></ui-like-dislike-component>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #reviewImageLightbox let-src=\"src\" let-id=\"id\">\r\n    <ui-image-lightbox-component [id]=\"id\" [src]=\"src\" (close)=\"onlightboxClose(id)\"></ui-image-lightbox-component>\r\n</ng-template>"
        }
    ],
    "modules": [
        {
            "name": "AccountRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdminComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminRoutingModule"
                        },
                        {
                            "name": "CommonAppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AdminRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfigService"
                        },
                        {
                            "name": "RequestInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CommonAppModule"
                        },
                        {
                            "name": "FooterModule"
                        },
                        {
                            "name": "HeaderModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "ShellModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressComponent"
                        },
                        {
                            "name": "AddressSelectComponent"
                        },
                        {
                            "name": "CheckoutComponent"
                        },
                        {
                            "name": "DeliveryOptionsComponent"
                        },
                        {
                            "name": "DeliverySlotComponent"
                        },
                        {
                            "name": "PaymentFailureComponent"
                        },
                        {
                            "name": "PaymentSuccessComponent"
                        },
                        {
                            "name": "PreviewComponent"
                        },
                        {
                            "name": "SlotDesktopComponent"
                        },
                        {
                            "name": "SlotMobileComponent"
                        },
                        {
                            "name": "TabDesktopComponent"
                        },
                        {
                            "name": "TabMobileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CheckoutRoutingModule"
                        },
                        {
                            "name": "CommonAppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckoutRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommonAppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddressDisplayComponent"
                        },
                        {
                            "name": "AddressEntryComponent"
                        },
                        {
                            "name": "AddressPreviewComponent"
                        },
                        {
                            "name": "BackComponent"
                        },
                        {
                            "name": "BreadCrumbComponent"
                        },
                        {
                            "name": "CarouselComponent"
                        },
                        {
                            "name": "CarouselItemDirective"
                        },
                        {
                            "name": "CarouselItemElement"
                        },
                        {
                            "name": "CheckAllInputsValidDirective"
                        },
                        {
                            "name": "CheckIsValidDirective"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ConfirmTextboxComponent"
                        },
                        {
                            "name": "DeviceInfoDirective"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "EmailMaskPipe"
                        },
                        {
                            "name": "EqualValidator"
                        },
                        {
                            "name": "FeatureReviewComponent"
                        },
                        {
                            "name": "LanguageSelectorComponent"
                        },
                        {
                            "name": "LightboxComponent"
                        },
                        {
                            "name": "LikeDislikeComponent"
                        },
                        {
                            "name": "MaskPipe"
                        },
                        {
                            "name": "NumberComponent"
                        },
                        {
                            "name": "OutsideClickDirective"
                        },
                        {
                            "name": "RadioComponent"
                        },
                        {
                            "name": "RatingReviewComponent"
                        },
                        {
                            "name": "RecaptchaDirective"
                        },
                        {
                            "name": "RecaptchaProtectedComponent"
                        },
                        {
                            "name": "ReviewSummaryComponent"
                        },
                        {
                            "name": "StarComponent"
                        },
                        {
                            "name": "StarRatingComponent"
                        },
                        {
                            "name": "StatementComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextTransformPipe"
                        },
                        {
                            "name": "TextboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddressDisplayComponent"
                        },
                        {
                            "name": "AddressEntryComponent"
                        },
                        {
                            "name": "AddressPreviewComponent"
                        },
                        {
                            "name": "BackComponent"
                        },
                        {
                            "name": "BreadCrumbComponent"
                        },
                        {
                            "name": "CarouselComponent"
                        },
                        {
                            "name": "CarouselItemDirective"
                        },
                        {
                            "name": "CarouselItemElement"
                        },
                        {
                            "name": "CheckAllInputsValidDirective"
                        },
                        {
                            "name": "CheckIsValidDirective"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ConfirmTextboxComponent"
                        },
                        {
                            "name": "DeviceInfoDirective"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "EmailMaskPipe"
                        },
                        {
                            "name": "EqualValidator"
                        },
                        {
                            "name": "FeatureReviewComponent"
                        },
                        {
                            "name": "LanguageSelectorComponent"
                        },
                        {
                            "name": "LightboxComponent"
                        },
                        {
                            "name": "LikeDislikeComponent"
                        },
                        {
                            "name": "MaskPipe"
                        },
                        {
                            "name": "NumberComponent"
                        },
                        {
                            "name": "OutsideClickDirective"
                        },
                        {
                            "name": "RadioComponent"
                        },
                        {
                            "name": "RatingReviewComponent"
                        },
                        {
                            "name": "RecaptchaDirective"
                        },
                        {
                            "name": "RecaptchaProtectedComponent"
                        },
                        {
                            "name": "ReviewSummaryComponent"
                        },
                        {
                            "name": "StarComponent"
                        },
                        {
                            "name": "StarRatingComponent"
                        },
                        {
                            "name": "StatementComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TextTransformPipe"
                        },
                        {
                            "name": "TextboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UIControl"
                        },
                        {
                            "name": "UILabel"
                        },
                        {
                            "name": "UISelect"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIControl"
                        },
                        {
                            "name": "UILabel"
                        },
                        {
                            "name": "UISelect"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContentModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddToBasketComponent"
                        },
                        {
                            "name": "AddToShoppingcartQuantityComponent"
                        },
                        {
                            "name": "ContentComponent"
                        },
                        {
                            "name": "DetailContentComponent"
                        },
                        {
                            "name": "GroupContainerComponent"
                        },
                        {
                            "name": "HomePageComponent"
                        },
                        {
                            "name": "ImageLightboxComponent"
                        },
                        {
                            "name": "ItemContainerComponent"
                        },
                        {
                            "name": "ListContentComponent"
                        },
                        {
                            "name": "MultiItemReviewComponent"
                        },
                        {
                            "name": "PricingComponent"
                        },
                        {
                            "name": "ProceedToBuyComponent"
                        },
                        {
                            "name": "ReviewComponent"
                        },
                        {
                            "name": "ShoppingCartComponent"
                        },
                        {
                            "name": "ShoppingcartItemContainerComponent"
                        },
                        {
                            "name": "ViewReviewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        },
                        {
                            "name": "ContentRoutingModule"
                        },
                        {
                            "name": "MenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ContentComponent"
                        },
                        {
                            "name": "MultiItemReviewComponent"
                        },
                        {
                            "name": "ReviewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ContentRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountAddressComponent"
                        },
                        {
                            "name": "AccountComponent"
                        },
                        {
                            "name": "AddressHomeComponent"
                        },
                        {
                            "name": "EmailVerificationComponent"
                        },
                        {
                            "name": "ForgotPasswordComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "InvoiceComponent"
                        },
                        {
                            "name": "NewCustomerComponent"
                        },
                        {
                            "name": "OrderComponent"
                        },
                        {
                            "name": "OrderDetailComponent"
                        },
                        {
                            "name": "OrderHeaderComponent"
                        },
                        {
                            "name": "OrderListComponent"
                        },
                        {
                            "name": "OrderStatusComponent"
                        },
                        {
                            "name": "OrderWrapperComponent"
                        },
                        {
                            "name": "OtpVerificationComponent"
                        },
                        {
                            "name": "PasswordResetComponent"
                        },
                        {
                            "name": "ProfileChangeComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountRoutingModule"
                        },
                        {
                            "name": "CommonAppModule"
                        },
                        {
                            "name": "CustomerRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccountComponent"
                        },
                        {
                            "name": "EmailVerificationComponent"
                        },
                        {
                            "name": "ForgotPasswordComponent"
                        },
                        {
                            "name": "InvoiceComponent"
                        },
                        {
                            "name": "OtpVerificationComponent"
                        },
                        {
                            "name": "PasswordResetComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomerRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FooterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FooterService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HeaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LocationComponent"
                        },
                        {
                            "name": "NonContentHeaderComponent"
                        },
                        {
                            "name": "SigninComponent"
                        },
                        {
                            "name": "SignoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SearchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NonContentHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        },
                        {
                            "name": "LoginRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HamburgerMenuComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "SidebarMenuComponent"
                        },
                        {
                            "name": "SubMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HamburgerMenuComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "SidebarMenuComponent"
                        },
                        {
                            "name": "SubMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "QuickSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "QuickSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShellModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ErrorComponent"
                        },
                        {
                            "name": "NotSupportedOrientationComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "ShellComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CommonAppModule"
                        },
                        {
                            "name": "FooterModule"
                        },
                        {
                            "name": "HeaderModule"
                        },
                        {
                            "name": "SearchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ErrorComponent"
                        },
                        {
                            "name": "NotSupportedOrientationComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "ShellComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/server.ts",
                "type": "NodeRequire"
            },
            {
                "name": "browserWindowProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/services/window.service.ts",
                "type": "ClassProvider",
                "defaultValue": "{\r\n    provide: WindowRef,\r\n    useClass: BrowserWindowRef,\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/checkout/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/customer/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/footer/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/header/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/menu/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/search/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/shell/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_BACKOFF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/functions/retry.ts",
                "type": "number",
                "defaultValue": "500"
            },
            {
                "name": "DEFAULT_MAX_RETRIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/functions/retry.ts",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  configFile: 'assets/config/config.prod.json'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  configFile: '/assets/config/config.json'\r\n}"
            },
            {
                "name": "IMAGE_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/constants/image-options.ts",
                "type": "Options",
                "defaultValue": "{\r\n    resize: {\r\n        maxHeight: 150,\r\n        maxWidth: 150\r\n    },\r\n    allowedExtensions: ['JPG', 'JPEG', 'PnG']\r\n}"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/stories/Dropdown.stories.ts",
                "type": "Array<ILookup>",
                "defaultValue": "[\r\n    { id: \"1\", value: \"Item 1\" },\r\n    { id: \"2\", value: \"Item 2\" }\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/server.ts",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/server.ts",
                "type": "",
                "defaultValue": "(mainModule && mainModule.filename) || ''"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/admin/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/checkout/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/customer/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/footer/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/header/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/menu/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/search/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/shell/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/stories/Dropdown.stories.ts",
                "type": "Story<DropdownComponent>",
                "defaultValue": "(args: DropdownComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "WINDOW",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/services/window.service.ts",
                "type": "",
                "defaultValue": "new InjectionToken('WindowToken')"
            },
            {
                "name": "WINDOW_PROVIDERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/services/window.service.ts",
                "type": "[]",
                "defaultValue": "[browserWindowProvider, windowProvider]"
            },
            {
                "name": "windowProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/src/lib/services/window.service.ts",
                "type": "FactoryProvider",
                "defaultValue": "{\r\n    provide: WINDOW,\r\n    useFactory: windowFactory,\r\n    deps: [WindowRef, PLATFORM_ID],\r\n}"
            },
            {
                "name": "WithItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/common/stories/Dropdown.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "projects/ui/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "AppInitializer",
                "file": "projects/ui/src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "configService"
                    },
                    {
                        "name": "authService"
                    },
                    {
                        "name": "globalisationService"
                    },
                    {
                        "name": "dataStoreService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "configService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalisationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataStoreService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "overlayClickOutside",
                "file": "projects/common/src/lib/directives/auto-complete.directive.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "overlayRef"
                    },
                    {
                        "name": "origin"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "overlayRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "origin",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "retry",
                "file": "projects/common/src/lib/functions/retry.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "delayMs"
                    },
                    {
                        "name": "maxRetry"
                    },
                    {
                        "name": "backoffMs"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "delayMs",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maxRetry",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "backoffMs",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "run",
                "file": "projects/ui/server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "windowFactory",
                "file": "projects/common/src/lib/services/window.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "browserWindowRef"
                    },
                    {
                        "name": "platformId"
                    }
                ],
                "returnType": "Window | Object",
                "jsdoctags": [
                    {
                        "name": "browserWindowRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "ChangePasswordState",
                "childs": [
                    {
                        "name": "Success",
                        "value": "Success"
                    },
                    {
                        "name": "Failure",
                        "value": "Failure"
                    },
                    {
                        "name": "PasswordInPreviousSet",
                        "value": "PasswordInPreviousSet"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/customer/src/lib/models/change-password-state.ts"
            },
            {
                "name": "DeliverySlotType",
                "childs": [
                    {
                        "name": "Panchshil",
                        "value": "Panchshil"
                    },
                    {
                        "name": "Vehicle",
                        "value": "Vehicle"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/delivery-slot-type.ts"
            },
            {
                "name": "FileType",
                "childs": [
                    {
                        "name": "Invoice",
                        "value": "Invoice"
                    },
                    {
                        "name": "CreditNote",
                        "value": "CreditNote"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/file-type.ts"
            },
            {
                "name": "HttpStatusCode",
                "childs": [
                    {
                        "name": "Ok",
                        "value": "200"
                    },
                    {
                        "name": "Created",
                        "value": "201"
                    },
                    {
                        "name": "Accepted",
                        "value": "202"
                    },
                    {
                        "name": "BadRequest",
                        "value": "400"
                    },
                    {
                        "name": "Unauthorized",
                        "value": "401"
                    },
                    {
                        "name": "Forbidden",
                        "value": "403"
                    },
                    {
                        "name": "NotFound",
                        "value": "404"
                    },
                    {
                        "name": "InternalServerError",
                        "value": "500"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/http-status-codes.ts"
            },
            {
                "name": "OrderPaymentStatus",
                "childs": [
                    {
                        "name": "PaymentInProgress",
                        "value": "PaymentInProgress"
                    },
                    {
                        "name": "PaymentSuccess",
                        "value": "PaymentSuccess"
                    },
                    {
                        "name": "PaymentFailure",
                        "value": "PaymentFailure"
                    },
                    {
                        "name": "PaymentCancelled",
                        "value": "PaymentCancelled"
                    },
                    {
                        "name": "PaymentCOD",
                        "value": "PaymentCOD"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/order-payment-status.ts"
            },
            {
                "name": "OrderStatus",
                "childs": [
                    {
                        "name": "PaymentInProgress",
                        "value": "PaymentInProgress"
                    },
                    {
                        "name": "Failed",
                        "value": "Failed"
                    },
                    {
                        "name": "Open",
                        "value": "Open"
                    },
                    {
                        "name": "Picking",
                        "value": "Picking"
                    },
                    {
                        "name": "Dispatch",
                        "value": "Dispatch"
                    },
                    {
                        "name": "Delivered",
                        "value": "Delivered"
                    },
                    {
                        "name": "Returned",
                        "value": "Returned"
                    },
                    {
                        "name": "SemiReturned",
                        "value": "SemiReturned"
                    },
                    {
                        "name": "Closed",
                        "value": "Closed"
                    },
                    {
                        "name": "Cancelled",
                        "value": "Cancelled"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/order-status.ts"
            },
            {
                "name": "ProductRating",
                "childs": [
                    {
                        "name": "NoStar",
                        "value": "0"
                    },
                    {
                        "name": "OneStar",
                        "value": "1"
                    },
                    {
                        "name": "TwoStar",
                        "value": "2"
                    },
                    {
                        "name": "ThreeStar",
                        "value": "3"
                    },
                    {
                        "name": "FourStar",
                        "value": "4"
                    },
                    {
                        "name": "FiveStar",
                        "value": "5"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/product-rating.ts"
            },
            {
                "name": "SlotState",
                "childs": [
                    {
                        "name": "Open",
                        "value": "Open"
                    },
                    {
                        "name": "Reserved",
                        "value": "Reserved"
                    },
                    {
                        "name": "Confirmed",
                        "value": "Confirmed"
                    },
                    {
                        "name": "NotAvailable",
                        "value": "NotAvailable"
                    },
                    {
                        "name": "Failure",
                        "value": "Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/checkout/src/lib/types/slot-state.ts"
            },
            {
                "name": "VerificationState",
                "childs": [
                    {
                        "name": "Verified",
                        "value": "Verified"
                    },
                    {
                        "name": "Expired",
                        "value": "Expired"
                    },
                    {
                        "name": "NotFound",
                        "value": "NotFound"
                    },
                    {
                        "name": "NotVerified",
                        "value": "NotVerified"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/verification-state.ts"
            },
            {
                "name": "VerificationType",
                "childs": [
                    {
                        "name": "NewAccountVerify",
                        "value": "New-Account-Verify"
                    },
                    {
                        "name": "ResetPassword",
                        "value": "Reset-Password"
                    },
                    {
                        "name": "ProfileChange",
                        "value": "Profile-Change"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/common/src/lib/types/verification-type.ts"
            }
        ],
        "groupedVariables": {
            "projects/ui/server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/server.ts",
                    "type": "NodeRequire"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/server.ts",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/server.ts",
                    "type": "",
                    "defaultValue": "(mainModule && mainModule.filename) || ''"
                }
            ],
            "projects/common/src/lib/services/window.service.ts": [
                {
                    "name": "browserWindowProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/services/window.service.ts",
                    "type": "ClassProvider",
                    "defaultValue": "{\r\n    provide: WindowRef,\r\n    useClass: BrowserWindowRef,\r\n}"
                },
                {
                    "name": "WINDOW",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/services/window.service.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('WindowToken')"
                },
                {
                    "name": "WINDOW_PROVIDERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/services/window.service.ts",
                    "type": "[]",
                    "defaultValue": "[browserWindowProvider, windowProvider]"
                },
                {
                    "name": "windowProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/services/window.service.ts",
                    "type": "FactoryProvider",
                    "defaultValue": "{\r\n    provide: WINDOW,\r\n    useFactory: windowFactory,\r\n    deps: [WindowRef, PLATFORM_ID],\r\n}"
                }
            ],
            "projects/admin/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/admin/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/checkout/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/checkout/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/checkout/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/common/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/customer/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/customer/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/customer/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/footer/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/footer/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/footer/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/header/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/header/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/header/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/menu/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/menu/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/menu/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/search/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/search/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/search/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/shell/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/shell/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/shell/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/ui/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/common/src/lib/functions/retry.ts": [
                {
                    "name": "DEFAULT_BACKOFF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/functions/retry.ts",
                    "type": "number",
                    "defaultValue": "500"
                },
                {
                    "name": "DEFAULT_MAX_RETRIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/functions/retry.ts",
                    "type": "number",
                    "defaultValue": "2"
                }
            ],
            "projects/ui/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  configFile: 'assets/config/config.prod.json'\r\n}"
                }
            ],
            "projects/ui/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  configFile: '/assets/config/config.json'\r\n}"
                }
            ],
            "projects/common/src/lib/constants/image-options.ts": [
                {
                    "name": "IMAGE_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/src/lib/constants/image-options.ts",
                    "type": "Options",
                    "defaultValue": "{\r\n    resize: {\r\n        maxHeight: 150,\r\n        maxWidth: 150\r\n    },\r\n    allowedExtensions: ['JPG', 'JPEG', 'PnG']\r\n}"
                }
            ],
            "projects/common/stories/Dropdown.stories.ts": [
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/stories/Dropdown.stories.ts",
                    "type": "Array<ILookup>",
                    "defaultValue": "[\r\n    { id: \"1\", value: \"Item 1\" },\r\n    { id: \"2\", value: \"Item 2\" }\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/stories/Dropdown.stories.ts",
                    "type": "Story<DropdownComponent>",
                    "defaultValue": "(args: DropdownComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "WithItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/common/stories/Dropdown.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ui/server.ts": [
                {
                    "name": "app",
                    "file": "projects/ui/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                },
                {
                    "name": "run",
                    "file": "projects/ui/server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ],
            "projects/ui/src/app/app.module.ts": [
                {
                    "name": "AppInitializer",
                    "file": "projects/ui/src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "configService"
                        },
                        {
                            "name": "authService"
                        },
                        {
                            "name": "globalisationService"
                        },
                        {
                            "name": "dataStoreService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "configService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "authService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "globalisationService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dataStoreService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/common/src/lib/directives/auto-complete.directive.ts": [
                {
                    "name": "overlayClickOutside",
                    "file": "projects/common/src/lib/directives/auto-complete.directive.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "overlayRef"
                        },
                        {
                            "name": "origin"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "overlayRef",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "origin",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/common/src/lib/functions/retry.ts": [
                {
                    "name": "retry",
                    "file": "projects/common/src/lib/functions/retry.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "delayMs"
                        },
                        {
                            "name": "maxRetry"
                        },
                        {
                            "name": "backoffMs"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "delayMs",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxRetry",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "backoffMs",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/common/src/lib/services/window.service.ts": [
                {
                    "name": "windowFactory",
                    "file": "projects/common/src/lib/services/window.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "browserWindowRef"
                        },
                        {
                            "name": "platformId"
                        }
                    ],
                    "returnType": "Window | Object",
                    "jsdoctags": [
                        {
                            "name": "browserWindowRef",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "platformId",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/customer/src/lib/models/change-password-state.ts": [
                {
                    "name": "ChangePasswordState",
                    "childs": [
                        {
                            "name": "Success",
                            "value": "Success"
                        },
                        {
                            "name": "Failure",
                            "value": "Failure"
                        },
                        {
                            "name": "PasswordInPreviousSet",
                            "value": "PasswordInPreviousSet"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/customer/src/lib/models/change-password-state.ts"
                }
            ],
            "projects/common/src/lib/types/delivery-slot-type.ts": [
                {
                    "name": "DeliverySlotType",
                    "childs": [
                        {
                            "name": "Panchshil",
                            "value": "Panchshil"
                        },
                        {
                            "name": "Vehicle",
                            "value": "Vehicle"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/delivery-slot-type.ts"
                }
            ],
            "projects/common/src/lib/types/file-type.ts": [
                {
                    "name": "FileType",
                    "childs": [
                        {
                            "name": "Invoice",
                            "value": "Invoice"
                        },
                        {
                            "name": "CreditNote",
                            "value": "CreditNote"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/file-type.ts"
                }
            ],
            "projects/common/src/lib/types/http-status-codes.ts": [
                {
                    "name": "HttpStatusCode",
                    "childs": [
                        {
                            "name": "Ok",
                            "value": "200"
                        },
                        {
                            "name": "Created",
                            "value": "201"
                        },
                        {
                            "name": "Accepted",
                            "value": "202"
                        },
                        {
                            "name": "BadRequest",
                            "value": "400"
                        },
                        {
                            "name": "Unauthorized",
                            "value": "401"
                        },
                        {
                            "name": "Forbidden",
                            "value": "403"
                        },
                        {
                            "name": "NotFound",
                            "value": "404"
                        },
                        {
                            "name": "InternalServerError",
                            "value": "500"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/http-status-codes.ts"
                }
            ],
            "projects/common/src/lib/types/order-payment-status.ts": [
                {
                    "name": "OrderPaymentStatus",
                    "childs": [
                        {
                            "name": "PaymentInProgress",
                            "value": "PaymentInProgress"
                        },
                        {
                            "name": "PaymentSuccess",
                            "value": "PaymentSuccess"
                        },
                        {
                            "name": "PaymentFailure",
                            "value": "PaymentFailure"
                        },
                        {
                            "name": "PaymentCancelled",
                            "value": "PaymentCancelled"
                        },
                        {
                            "name": "PaymentCOD",
                            "value": "PaymentCOD"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/order-payment-status.ts"
                }
            ],
            "projects/common/src/lib/types/order-status.ts": [
                {
                    "name": "OrderStatus",
                    "childs": [
                        {
                            "name": "PaymentInProgress",
                            "value": "PaymentInProgress"
                        },
                        {
                            "name": "Failed",
                            "value": "Failed"
                        },
                        {
                            "name": "Open",
                            "value": "Open"
                        },
                        {
                            "name": "Picking",
                            "value": "Picking"
                        },
                        {
                            "name": "Dispatch",
                            "value": "Dispatch"
                        },
                        {
                            "name": "Delivered",
                            "value": "Delivered"
                        },
                        {
                            "name": "Returned",
                            "value": "Returned"
                        },
                        {
                            "name": "SemiReturned",
                            "value": "SemiReturned"
                        },
                        {
                            "name": "Closed",
                            "value": "Closed"
                        },
                        {
                            "name": "Cancelled",
                            "value": "Cancelled"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/order-status.ts"
                }
            ],
            "projects/common/src/lib/types/product-rating.ts": [
                {
                    "name": "ProductRating",
                    "childs": [
                        {
                            "name": "NoStar",
                            "value": "0"
                        },
                        {
                            "name": "OneStar",
                            "value": "1"
                        },
                        {
                            "name": "TwoStar",
                            "value": "2"
                        },
                        {
                            "name": "ThreeStar",
                            "value": "3"
                        },
                        {
                            "name": "FourStar",
                            "value": "4"
                        },
                        {
                            "name": "FiveStar",
                            "value": "5"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/product-rating.ts"
                }
            ],
            "projects/checkout/src/lib/types/slot-state.ts": [
                {
                    "name": "SlotState",
                    "childs": [
                        {
                            "name": "Open",
                            "value": "Open"
                        },
                        {
                            "name": "Reserved",
                            "value": "Reserved"
                        },
                        {
                            "name": "Confirmed",
                            "value": "Confirmed"
                        },
                        {
                            "name": "NotAvailable",
                            "value": "NotAvailable"
                        },
                        {
                            "name": "Failure",
                            "value": "Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/checkout/src/lib/types/slot-state.ts"
                }
            ],
            "projects/common/src/lib/types/verification-state.ts": [
                {
                    "name": "VerificationState",
                    "childs": [
                        {
                            "name": "Verified",
                            "value": "Verified"
                        },
                        {
                            "name": "Expired",
                            "value": "Expired"
                        },
                        {
                            "name": "NotFound",
                            "value": "NotFound"
                        },
                        {
                            "name": "NotVerified",
                            "value": "NotVerified"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/verification-state.ts"
                }
            ],
            "projects/common/src/lib/types/verification-type.ts": [
                {
                    "name": "VerificationType",
                    "childs": [
                        {
                            "name": "NewAccountVerify",
                            "value": "New-Account-Verify"
                        },
                        {
                            "name": "ResetPassword",
                            "value": "Reset-Password"
                        },
                        {
                            "name": "ProfileChange",
                            "value": "Profile-Change"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/common/src/lib/types/verification-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/admin/src/lib/components/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/lib/services/admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/admin/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/checkout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/address-select/address-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/address/address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/delivery-options/delivery-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeliveryOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/slot-desktop/slot-desktop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlotDesktopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/slot-mobile/slot-mobile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlotMobileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/tab-desktop/tab-desktop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabDesktopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/delivery-slot/child-components/tab-mobile/tab-mobile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabMobileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/delivery-slot/delivery-slot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeliverySlotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/payment/failure/payment-failure.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentFailureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/payment/success/payment-success.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentSuccessComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/components/child-components/preview/preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/guards/payment.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "PaymentGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/resolvers/address.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AddressResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/resolvers/available-loyalty-points.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AvailableLoyaltyPointsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/resolvers/delivery-options.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "DeliveryOptionsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/resolvers/delivery-slots.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "DeliverySlotsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/resolvers/state-county-province.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "StateCountyProvinceResolver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/services/checkout-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CheckoutStateService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/services/loyalty-point.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoyaltyPointService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/services/payment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaymentService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/types/payment-complete-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaymentCompleteResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/types/tab-day.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabDay",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/types/tab-item-click-event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabItemClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/lib/types/tab-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/checkout/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/address/address-display/address-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/address/address-entry/address-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/address/address-preview/address-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressPreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/back/back.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadCrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/carousel/carousel.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CarouselItemElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/auto-complete/auto-complete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutoCompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/auto-complete/child-components/option/option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/confirm-textbox/confirm.textbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmTextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/number/number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/input/textbox/textbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/recaptcha/recaptcha-protected.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecaptchaProtectedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/common/statement/statement.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/language-selector/language-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/lightbox/lightbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LightboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/like-dislike/like-dislike.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LikeDislikeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/review/feature/feature-review.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureReviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/review/rating/rating-review.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RatingReviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/review/star-rating/child-components/star-component/star.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/review/star-rating/star-rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StarRatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/component/review/summary/review-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/constants/cookie.keys.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CookieKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/constants/image-options.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IMAGE_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/constants/notification.message.keys.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationMessageKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/constants/resource.keys.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResourceKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/constants/route.keys.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouteKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/auto-complete-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutoCompleteContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/auto-complete.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutoCompleteDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/auto-complete.directive.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "overlayClickOutside",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/carousel-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CarouselItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/check-all-inputs-valid.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CheckAllInputsValidDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/check-is-valid.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CheckIsValidDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/device-info.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DeviceInfoDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/outside-click.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OutsideClickDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/recaptcha.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RecaptchaDirective",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/directives/validate-equal.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "EqualValidator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/functions/retry.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "retry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/functions/retry.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_BACKOFF",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/functions/retry.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_MAX_RETRIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/guards/admin-auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/guards/not-authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "NotAuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/interceptors/request.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "RequestInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/interceptors/retry.interceptor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RetryInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/pipes/auto-complete-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "AutoCompleteFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/pipes/email-mask.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "EmailMaskPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/pipes/mask.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MaskPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/pipes/text-transform.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TextTransformPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/resolvers/metadata.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "MetadataResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/resolvers/xsrf.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "XsrfResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/service.locator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServiceLocator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/address.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddressService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/auth.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/cookie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookieService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/data-store.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataStoreService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/delivery-options.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeliveryOptionsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/delivery-slots.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeliverySlotsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FileService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/globalisation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GlobalisationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/history.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HistoryService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/http.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/infinite-scroll.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InfiniteScrollService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/infinite-scroll.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Position",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/lightbox.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LightboxService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/menu-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuStateService",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/order.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/product-review.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductReviewService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/recaptcha.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecaptchaService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/search-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchStateService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/shopping-cart-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingCartStateService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/shopping-cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingCartService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/verification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VerificationService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WindowRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BrowserWindowRef",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "windowFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserWindowProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WINDOW",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WINDOW_PROVIDERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/services/window.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "windowProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/IInputValue.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/ILookup.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILookup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/address.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/available-slot.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AvailableSlot",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/delivery-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDeliveryOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/history-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HistoryItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/key-value-pair.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyValuePair",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/like-dislike.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LikeDislikeVote",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/order-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/order.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Order",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/pricing.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pricing",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/product-detail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductDetail",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/review-summary.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReviewSummary",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/review.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Review",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/search-map.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchMap",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/shipping.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Shipping",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/shopping-cart-item-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingCartItemGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/shopping-cart-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingCartItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/shopping-cart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingCart",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/lib/types/video-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VideoResult",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/stories/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/stories/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/common/stories/Dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/add-to-shoppingcart-quantity/add-to-shoppingcart-quantity.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddToShoppingcartQuantityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/add-to-shoppingcart/add-to-shoppingcart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddToBasketComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/content/content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/detail/detail.content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/homepage/homepage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/list/child-components/item-container/item-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/list/child-components/item-container/item-container.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Quantity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/list/list.content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/pricing/pricing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PricingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/reviews/child-components/image-lightbox/image-lightbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageLightboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/reviews/multi-item-review/multi-item-review.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiItemReviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/reviews/review/review.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/reviews/view-review/view-review.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewReviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/shopping-cart/child-components/group-container/group-container-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/shopping-cart/child-components/proceed-to-buy/proceed-to-buy.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProceedToBuyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/shopping-cart/child-components/shoppingcart-item-container/shoppingcart-item-container-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingcartItemContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/components/shopping-cart/shopping-cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingCartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/detail.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "DetailResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/homepage.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "HomePageResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/list-data.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ListDataResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/order-product-review.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "OrderProductReviewResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/order-product.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "OrderProductResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/order-products.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "OrderProductsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/order-review.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "OrderReviewResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/pack-sizes.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "PackSizesResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/resolvers/product-reviews.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProductReviewsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/services/detail.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DetailService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/content/src/lib/services/homePage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HomePageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/addresses/address-home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressHomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/addresses/child-components/address/account-address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountAddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/base-account.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/child-components/invoice/invoice.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/child-components/order-detail/order-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/child-components/order-header/order-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/child-components/order-status/order-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/child-components/order-wrapper/order-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/order-list/order-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/orders/order/order.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/profile/child-components/profile-change/profile-change.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileChangeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/profile/models/profile-change.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileChange",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/account/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/email-verification/email-verification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/forgot-password/forgot-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/new-customer/new-customer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewCustomerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/otp-verification/otp-verification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OtpVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/components/password-reset/password-reset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordResetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/guards/profile-access.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/models/INewCustomer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INewCustomer",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/models/change-password.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChangePasswordModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/resolvers/address.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AddressResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/resolvers/customer-order-detail.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CustomerOrderDetailResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/resolvers/customer-orders.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CustomerOrdersResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/resolvers/forgot-password.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ForgotPasswordResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/resolvers/profile.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProfileResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/resolvers/verify-otp-model.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "VerifyOtpModelResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/services/customer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomerService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/lib/services/order-filter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderFilterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/customer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/footer/src/lib/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/footer/src/lib/footer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FooterService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/footer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/footer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/lib/components/header/child-components/location/location.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/lib/components/header/child-components/sign-in/sign-in.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SigninComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/lib/components/header/child-components/sign-out/sign-out.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/lib/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/lib/components/non-content-header/non-content-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NonContentHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/header/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/login/src/lib/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/login/src/lib/models/ILogin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILogin",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/login/src/lib/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/components/burger-menu/burger-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HamburgerMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/components/sidebar-menu/sidebar-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/components/submenu/submenu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/resolvers/burger-menu.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "BurgerMenuResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/resolvers/menu.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "MenuResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/resolvers/sidebar.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "SidebarResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/resolvers/submenu.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "SubMenuResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/services/hamburger-menu-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HamburgerMenuStateService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/lib/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/menu/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/search/src/lib/components/quick-search/quick-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/search/src/lib/types/result.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Result",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/search/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/search/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/shell/src/lib/components/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/shell/src/lib/components/not-supported-orientation/not-supported-orientation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotSupportedOrientationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/shell/src/lib/components/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/shell/src/lib/components/shell/shell.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShellComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/shell/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/shell/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "AppInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}